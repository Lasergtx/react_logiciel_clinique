# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template client.py.jinja --
import warnings
import logging
from datetime import timedelta
from pathlib import Path
from types import TracebackType
from typing_extensions import override

from pydantic import BaseModel

from . import types, models, errors, actions
from ._base_client import BasePrisma, UseClientDefault, USE_CLIENT_DEFAULT
from .types import DatasourceOverride, HttpConfig, MetricsFormat
from ._types import BaseModelT, PrismaMethod, TransactionId, Datasource
from .bases import _PrismaModel
from ._builder import QueryBuilder, dumps
from .generator.models import EngineType, OptionalValueFromEnvVar, BinaryPaths
from ._compat import removeprefix, model_parse
from ._constants import CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED, DEFAULT_CONNECT_TIMEOUT, DEFAULT_TX_MAX_WAIT, DEFAULT_TX_TIMEOUT
from ._raw_query import deserialize_raw_results
from ._metrics import Metrics
from .metadata import PRISMA_MODELS, RELATIONAL_FIELD_MAPPINGS
from ._transactions import AsyncTransactionManager, SyncTransactionManager

# re-exports
from ._base_client import SyncBasePrisma, AsyncBasePrisma, load_env as load_env
from ._registry import (
    register as register,
    get_client as get_client,
    RegisteredClient as RegisteredClient,
)


__all__ = (
    'ENGINE_TYPE',
    'SCHEMA_PATH',
    'BINARY_PATHS',
    'Batch',
    'Prisma',
    'Client',
    'load_env',
    'register',
    'get_client',
)

log: logging.Logger = logging.getLogger(__name__)

SCHEMA_PATH = Path('C:/Code/react_logiciel_clinique/python_api/prisma/schema.prisma')
PACKAGED_SCHEMA_PATH = Path(__file__).parent.joinpath('schema.prisma')
ENGINE_TYPE: EngineType = EngineType.binary
BINARY_PATHS = model_parse(BinaryPaths, {'queryEngine': {'windows': 'C:\\Users\\bibig\\.cache\\prisma-python\\binaries\\5.17.0\\393aa359c9ad4a4bb28630fb5613f9c281cde053\\node_modules\\prisma\\query-engine-windows.exe'}, 'introspectionEngine': {}, 'migrationEngine': {}, 'libqueryEngine': {}, 'prismaFmt': {}})


class Prisma(AsyncBasePrisma):
    # Note: these property names can be customised using `/// @Python(instance_name: '...')`
    # https://prisma-client-py.readthedocs.io/en/stable/reference/schema-extensions/#instance_name
    allergies: 'actions.allergiesActions[models.allergies]'
    booster_shots: 'actions.booster_shotsActions[models.booster_shots]'
    clients: 'actions.clientsActions[models.clients]'
    earnings: 'actions.earningsActions[models.earnings]'
    events: 'actions.eventsActions[models.events]'
    expenses: 'actions.expensesActions[models.expenses]'
    invoices: 'actions.invoicesActions[models.invoices]'
    items_bought: 'actions.items_boughtActions[models.items_bought]'
    items_sold: 'actions.items_soldActions[models.items_sold]'
    patients: 'actions.patientsActions[models.patients]'
    patients_allergies: 'actions.patients_allergiesActions[models.patients_allergies]'
    prescriptions: 'actions.prescriptionsActions[models.prescriptions]'
    product_types: 'actions.product_typesActions[models.product_types]'
    products: 'actions.productsActions[models.products]'
    users: 'actions.usersActions[models.users]'

    __slots__ = (
        'allergies',
        'booster_shots',
        'clients',
        'earnings',
        'events',
        'expenses',
        'invoices',
        'items_bought',
        'items_sold',
        'patients',
        'patients_allergies',
        'prescriptions',
        'product_types',
        'products',
        'users',
    )

    def __init__(
        self,
        *,
        use_dotenv: bool = True,
        log_queries: bool = False,
        auto_register: bool = False,
        datasource: DatasourceOverride | None = None,
        connect_timeout: int | timedelta = DEFAULT_CONNECT_TIMEOUT,
        http: HttpConfig | None = None,
    ) -> None:
        super().__init__(
            http=http,
            use_dotenv=use_dotenv,
            log_queries=log_queries,
            datasource=datasource,
            connect_timeout=connect_timeout,
        )
        self._set_generated_properties(
            schema_path=SCHEMA_PATH,
            engine_type=ENGINE_TYPE,
            prisma_models=PRISMA_MODELS,
            packaged_schema_path=PACKAGED_SCHEMA_PATH,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
            preview_features=set([]),
            active_provider='postgresql',
            default_datasource_name='db',
        )

        self.allergies = actions.allergiesActions[models.allergies](self, models.allergies)
        self.booster_shots = actions.booster_shotsActions[models.booster_shots](self, models.booster_shots)
        self.clients = actions.clientsActions[models.clients](self, models.clients)
        self.earnings = actions.earningsActions[models.earnings](self, models.earnings)
        self.events = actions.eventsActions[models.events](self, models.events)
        self.expenses = actions.expensesActions[models.expenses](self, models.expenses)
        self.invoices = actions.invoicesActions[models.invoices](self, models.invoices)
        self.items_bought = actions.items_boughtActions[models.items_bought](self, models.items_bought)
        self.items_sold = actions.items_soldActions[models.items_sold](self, models.items_sold)
        self.patients = actions.patientsActions[models.patients](self, models.patients)
        self.patients_allergies = actions.patients_allergiesActions[models.patients_allergies](self, models.patients_allergies)
        self.prescriptions = actions.prescriptionsActions[models.prescriptions](self, models.prescriptions)
        self.product_types = actions.product_typesActions[models.product_types](self, models.product_types)
        self.products = actions.productsActions[models.products](self, models.products)
        self.users = actions.usersActions[models.users](self, models.users)

        if auto_register:
            register(self)

    @property
    @override
    def _default_datasource(self) -> Datasource:
        return {
            'name': 'db',
            'url': OptionalValueFromEnvVar(**{'value': None, 'fromEnvVar': 'DATABASE_URL'}).resolve(),
            'source_file_path': 'C:/Code/react_logiciel_clinique/python_api/prisma/schema.prisma',
        }

    async def execute_raw(self, query: LiteralString, *args: Any) -> int:
        resp = await self._execute(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=None,
        )
        return int(resp['data']['result'])

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> dict[str, Any]:
        ...

    @overload
    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> Optional[BaseModelT]:
        ...

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[Optional[BaseModelT], dict[str, Any]]:
        """This function is the exact same as `query_raw()` but returns the first result.

        If model is given, the returned record is converted to the pydantic model first,
        otherwise a raw dictionary will be returned.
        """
        results: Sequence[Union[BaseModelT, dict[str, Any]]]
        if model is not None:
            results = await self.query_raw(query, *args, model=model)
        else:
            results = await self.query_raw(query, *args)

        if not results:
            return None

        return results[0]

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[dict[str, Any]]:
        ...

    @overload
    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Type[BaseModelT],
    ) -> List[BaseModelT]:
        ...

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
        model: Optional[Type[BaseModelT]] = None,
    ) -> Union[List[BaseModelT], List[dict[str, Any]]]:
        """Execute a raw SQL query against the database.

        If model is given, each returned record is converted to the pydantic model first,
        otherwise results will be raw dictionaries.
        """
        resp = await self._execute(
            method='query_raw',
            arguments={
                'query': query,
                'parameters': args,
            },
            model=model,
        )
        result = resp['data']['result']
        if model is not None:
            return deserialize_raw_results(result, model=model)

        return deserialize_raw_results(result)

    def batch_(self) -> Batch:
        """Returns a context manager for grouping write queries into a single transaction."""
        return Batch(client=self)

    def tx(
        self,
        *,
        max_wait: Union[int, timedelta] = DEFAULT_TX_MAX_WAIT,
        timeout: Union[int, timedelta] = DEFAULT_TX_TIMEOUT,
    ) -> TransactionManager:
        """Returns a context manager for executing queries within a database transaction.

        Entering the context manager returns a new Prisma instance wrapping all
        actions within a transaction, queries will be isolated to the Prisma instance and
        will not be commited to the database until the context manager exits.

        By default, Prisma will wait a maximum of 2 seconds to acquire a transaction from the database. You can modify this
        default with the `max_wait` argument which accepts a value in milliseconds or `datetime.timedelta`.

        By default, Prisma will cancel and rollback ay transactions that last longer than 5 seconds. You can modify this timeout
        with the `timeout` argument which accepts a value in milliseconds or `datetime.timedelta`.

        Example usage:

        ```py
        async with client.tx() as transaction:
            user1 = await client.user.create({'name': 'Robert'})
            user2 = await client.user.create({'name': 'Tegan'})
        ```

        In the above example, if the first database call succeeds but the second does not then neither of the records will be created.
        """
        return TransactionManager(
            client=self,
            max_wait=max_wait,
            timeout=timeout,
        )


TransactionManager = AsyncTransactionManager[Prisma]


# TODO: this should return the results as well
# TODO: don't require copy-pasting arguments between actions and batch actions
class Batch:
    allergies: 'allergiesBatchActions'
    booster_shots: 'booster_shotsBatchActions'
    clients: 'clientsBatchActions'
    earnings: 'earningsBatchActions'
    events: 'eventsBatchActions'
    expenses: 'expensesBatchActions'
    invoices: 'invoicesBatchActions'
    items_bought: 'items_boughtBatchActions'
    items_sold: 'items_soldBatchActions'
    patients: 'patientsBatchActions'
    patients_allergies: 'patients_allergiesBatchActions'
    prescriptions: 'prescriptionsBatchActions'
    product_types: 'product_typesBatchActions'
    products: 'productsBatchActions'
    users: 'usersBatchActions'

    def __init__(self, client: Prisma) -> None:
        self.__client = client
        self.__queries: List[str] = []
        self._active_provider = client._active_provider
        self.allergies = allergiesBatchActions(self)
        self.booster_shots = booster_shotsBatchActions(self)
        self.clients = clientsBatchActions(self)
        self.earnings = earningsBatchActions(self)
        self.events = eventsBatchActions(self)
        self.expenses = expensesBatchActions(self)
        self.invoices = invoicesBatchActions(self)
        self.items_bought = items_boughtBatchActions(self)
        self.items_sold = items_soldBatchActions(self)
        self.patients = patientsBatchActions(self)
        self.patients_allergies = patients_allergiesBatchActions(self)
        self.prescriptions = prescriptionsBatchActions(self)
        self.product_types = product_typesBatchActions(self)
        self.products = productsBatchActions(self)
        self.users = usersBatchActions(self)

    def _add(self, **kwargs: Any) -> None:
        builder = QueryBuilder(
            **kwargs,
            prisma_models=PRISMA_MODELS,
            relational_field_mappings=RELATIONAL_FIELD_MAPPINGS,
        )
        self.__queries.append(builder.build_query())

    async def commit(self) -> None:
        """Execute the queries"""
        # TODO: normalise this, we should still call client._execute
        queries = self.__queries
        self.__queries = []

        payload = {
            'batch': [
                {
                    'query': query,
                    'variables': {},
                }
                for query in queries
            ],
            'transaction': True,
        }
        await self.__client._engine.query(
            dumps(payload),
            tx_id=self.__client._tx_id,
        )

    def execute_raw(self, query: LiteralString, *args: Any) -> None:
        self._add(
            method='execute_raw',
            arguments={
                'query': query,
                'parameters': args,
            }
        )

    async def __aenter__(self) -> 'Batch':
        return self

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc: Optional[BaseException],
        exc_tb: Optional[TracebackType],
    ) -> None:
        if exc is None:
            await self.commit()


# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class allergiesBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.allergiesCreateInput,
        include: Optional[types.allergiesInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.allergies,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.allergiesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.allergies,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.allergiesWhereUniqueInput,
        include: Optional[types.allergiesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.allergies,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.allergiesUpdateInput,
        where: types.allergiesWhereUniqueInput,
        include: Optional[types.allergiesInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.allergies,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.allergiesWhereUniqueInput,
        data: types.allergiesUpsertInput,
        include: Optional[types.allergiesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.allergies,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.allergiesUpdateManyMutationInput,
        where: types.allergiesWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.allergies,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.allergiesWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.allergies,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class booster_shotsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.booster_shotsCreateInput,
        include: Optional[types.booster_shotsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.booster_shots,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.booster_shotsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.booster_shots,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.booster_shotsWhereUniqueInput,
        include: Optional[types.booster_shotsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.booster_shots,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.booster_shotsUpdateInput,
        where: types.booster_shotsWhereUniqueInput,
        include: Optional[types.booster_shotsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.booster_shots,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.booster_shotsWhereUniqueInput,
        data: types.booster_shotsUpsertInput,
        include: Optional[types.booster_shotsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.booster_shots,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.booster_shotsUpdateManyMutationInput,
        where: types.booster_shotsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.booster_shots,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.booster_shotsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.booster_shots,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class clientsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.clientsCreateInput,
        include: Optional[types.clientsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.clients,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.clientsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.clients,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.clientsWhereUniqueInput,
        include: Optional[types.clientsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.clients,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.clientsUpdateInput,
        where: types.clientsWhereUniqueInput,
        include: Optional[types.clientsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.clients,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.clientsWhereUniqueInput,
        data: types.clientsUpsertInput,
        include: Optional[types.clientsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.clients,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.clientsUpdateManyMutationInput,
        where: types.clientsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.clients,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.clientsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.clients,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class earningsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.earningsCreateInput,
        include: Optional[types.earningsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.earnings,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.earningsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.earnings,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.earningsWhereUniqueInput,
        include: Optional[types.earningsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.earnings,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.earningsUpdateInput,
        where: types.earningsWhereUniqueInput,
        include: Optional[types.earningsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.earnings,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.earningsWhereUniqueInput,
        data: types.earningsUpsertInput,
        include: Optional[types.earningsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.earnings,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.earningsUpdateManyMutationInput,
        where: types.earningsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.earnings,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.earningsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.earnings,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class eventsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.eventsCreateInput,
        include: Optional[types.eventsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.events,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.eventsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.events,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.eventsWhereUniqueInput,
        include: Optional[types.eventsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.events,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.eventsUpdateInput,
        where: types.eventsWhereUniqueInput,
        include: Optional[types.eventsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.events,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.eventsWhereUniqueInput,
        data: types.eventsUpsertInput,
        include: Optional[types.eventsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.events,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.eventsUpdateManyMutationInput,
        where: types.eventsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.events,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.eventsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.events,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class expensesBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.expensesCreateInput,
        include: Optional[types.expensesInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.expenses,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.expensesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.expenses,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.expensesWhereUniqueInput,
        include: Optional[types.expensesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.expenses,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.expensesUpdateInput,
        where: types.expensesWhereUniqueInput,
        include: Optional[types.expensesInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.expenses,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.expensesWhereUniqueInput,
        data: types.expensesUpsertInput,
        include: Optional[types.expensesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.expenses,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.expensesUpdateManyMutationInput,
        where: types.expensesWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.expenses,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.expensesWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.expenses,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class invoicesBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.invoicesCreateInput,
        include: Optional[types.invoicesInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.invoices,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.invoicesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.invoices,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.invoicesWhereUniqueInput,
        include: Optional[types.invoicesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.invoices,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.invoicesUpdateInput,
        where: types.invoicesWhereUniqueInput,
        include: Optional[types.invoicesInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.invoices,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.invoicesWhereUniqueInput,
        data: types.invoicesUpsertInput,
        include: Optional[types.invoicesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.invoices,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.invoicesUpdateManyMutationInput,
        where: types.invoicesWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.invoices,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.invoicesWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.invoices,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class items_boughtBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.items_boughtCreateInput,
        include: Optional[types.items_boughtInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.items_bought,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.items_boughtCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.items_bought,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.items_boughtWhereUniqueInput,
        include: Optional[types.items_boughtInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.items_bought,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.items_boughtUpdateInput,
        where: types.items_boughtWhereUniqueInput,
        include: Optional[types.items_boughtInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.items_bought,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.items_boughtWhereUniqueInput,
        data: types.items_boughtUpsertInput,
        include: Optional[types.items_boughtInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.items_bought,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.items_boughtUpdateManyMutationInput,
        where: types.items_boughtWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.items_bought,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.items_boughtWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.items_bought,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class items_soldBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.items_soldCreateInput,
        include: Optional[types.items_soldInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.items_sold,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.items_soldCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.items_sold,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.items_soldWhereUniqueInput,
        include: Optional[types.items_soldInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.items_sold,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.items_soldUpdateInput,
        where: types.items_soldWhereUniqueInput,
        include: Optional[types.items_soldInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.items_sold,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.items_soldWhereUniqueInput,
        data: types.items_soldUpsertInput,
        include: Optional[types.items_soldInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.items_sold,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.items_soldUpdateManyMutationInput,
        where: types.items_soldWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.items_sold,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.items_soldWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.items_sold,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class patientsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.patientsCreateInput,
        include: Optional[types.patientsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.patients,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.patientsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.patients,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.patientsWhereUniqueInput,
        include: Optional[types.patientsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.patients,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.patientsUpdateInput,
        where: types.patientsWhereUniqueInput,
        include: Optional[types.patientsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.patients,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.patientsWhereUniqueInput,
        data: types.patientsUpsertInput,
        include: Optional[types.patientsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.patients,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.patientsUpdateManyMutationInput,
        where: types.patientsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.patients,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.patientsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.patients,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class patients_allergiesBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.patients_allergiesCreateInput,
        include: Optional[types.patients_allergiesInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.patients_allergies,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.patients_allergiesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.patients_allergies,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.patients_allergiesWhereUniqueInput,
        include: Optional[types.patients_allergiesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.patients_allergies,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.patients_allergiesUpdateInput,
        where: types.patients_allergiesWhereUniqueInput,
        include: Optional[types.patients_allergiesInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.patients_allergies,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.patients_allergiesWhereUniqueInput,
        data: types.patients_allergiesUpsertInput,
        include: Optional[types.patients_allergiesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.patients_allergies,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.patients_allergiesUpdateManyMutationInput,
        where: types.patients_allergiesWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.patients_allergies,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.patients_allergiesWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.patients_allergies,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class prescriptionsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.prescriptionsCreateInput,
        include: Optional[types.prescriptionsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.prescriptions,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.prescriptionsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.prescriptions,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.prescriptionsWhereUniqueInput,
        include: Optional[types.prescriptionsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.prescriptions,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.prescriptionsUpdateInput,
        where: types.prescriptionsWhereUniqueInput,
        include: Optional[types.prescriptionsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.prescriptions,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.prescriptionsWhereUniqueInput,
        data: types.prescriptionsUpsertInput,
        include: Optional[types.prescriptionsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.prescriptions,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.prescriptionsUpdateManyMutationInput,
        where: types.prescriptionsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.prescriptions,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.prescriptionsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.prescriptions,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class product_typesBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.product_typesCreateInput,
        include: Optional[types.product_typesInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.product_types,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.product_typesCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.product_types,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.product_typesWhereUniqueInput,
        include: Optional[types.product_typesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.product_types,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.product_typesUpdateInput,
        where: types.product_typesWhereUniqueInput,
        include: Optional[types.product_typesInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.product_types,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.product_typesWhereUniqueInput,
        data: types.product_typesUpsertInput,
        include: Optional[types.product_typesInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.product_types,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.product_typesUpdateManyMutationInput,
        where: types.product_typesWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.product_types,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.product_typesWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.product_types,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class productsBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.productsCreateInput,
        include: Optional[types.productsInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.products,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.productsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.products,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.productsWhereUniqueInput,
        include: Optional[types.productsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.products,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.productsUpdateInput,
        where: types.productsWhereUniqueInput,
        include: Optional[types.productsInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.products,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.productsWhereUniqueInput,
        data: types.productsUpsertInput,
        include: Optional[types.productsInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.products,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.productsUpdateManyMutationInput,
        where: types.productsWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.products,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.productsWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.products,
            arguments={'where': where},
            root_selection=['count'],
        )



# NOTE: some arguments are meaningless in this context but are included
# for completeness sake
class usersBatchActions:
    def __init__(self, batcher: Batch) -> None:
        self._batcher = batcher

    def create(
        self,
        data: types.usersCreateInput,
        include: Optional[types.usersInclude] = None
    ) -> None:
        self._batcher._add(
            method='create',
            model=models.users,
            arguments={
                'data': data,
                'include': include,
            },
        )

    def create_many(
        self,
        data: List[types.usersCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> None:
        if skip_duplicates and self._batcher._active_provider in CREATE_MANY_SKIP_DUPLICATES_UNSUPPORTED:
            raise errors.UnsupportedDatabaseError(self._batcher._active_provider, 'create_many_skip_duplicates')

        self._batcher._add(
            method='create_many',
            model=models.users,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )

    def delete(
        self,
        where: types.usersWhereUniqueInput,
        include: Optional[types.usersInclude] = None,
    ) -> None:
        self._batcher._add(
            method='delete',
            model=models.users,
            arguments={
                'where': where,
                'include': include,
            },
        )

    def update(
        self,
        data: types.usersUpdateInput,
        where: types.usersWhereUniqueInput,
        include: Optional[types.usersInclude] = None
    ) -> None:
        self._batcher._add(
            method='update',
            model=models.users,
            arguments={
                'data': data,
                'where': where,
                'include': include,
            },
        )

    def upsert(
        self,
        where: types.usersWhereUniqueInput,
        data: types.usersUpsertInput,
        include: Optional[types.usersInclude] = None,
    ) -> None:
        self._batcher._add(
            method='upsert',
            model=models.users,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )

    def update_many(
        self,
        data: types.usersUpdateManyMutationInput,
        where: types.usersWhereInput,
    ) -> None:
        self._batcher._add(
            method='update_many',
            model=models.users,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )

    def delete_many(
        self,
        where: Optional[types.usersWhereInput] = None,
    ) -> None:
        self._batcher._add(
            method='delete_many',
            model=models.users,
            arguments={'where': where},
            root_selection=['count'],
        )



Client = Prisma