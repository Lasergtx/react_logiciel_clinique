# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _event_typeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.event_type']]


class _event_typeListFilterHasInput(TypedDict):
    has: 'enums.event_type'


class _event_typeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.event_type']


class _event_typeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.event_type']


class _event_typeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


event_typeListFilter = Union[
    _event_typeListFilterHasInput,
    _event_typeListFilterEqualsInput,
    _event_typeListFilterHasSomeInput,
    _event_typeListFilterIsEmptyInput,
    _event_typeListFilterHasEveryInput,
]


class _event_typeListUpdateSet(TypedDict):
    set: List['enums.event_type']


class _event_typeListUpdatePush(TypedDict):
    push: List['enums.event_type']


event_typeListUpdate = Union[
    List['enums.event_type'],
    _event_typeListUpdateSet,
    _event_typeListUpdatePush,
]

class _gendersListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.genders']]


class _gendersListFilterHasInput(TypedDict):
    has: 'enums.genders'


class _gendersListFilterHasEveryInput(TypedDict):
    has_every: List['enums.genders']


class _gendersListFilterHasSomeInput(TypedDict):
    has_some: List['enums.genders']


class _gendersListFilterIsEmptyInput(TypedDict):
    is_empty: bool


gendersListFilter = Union[
    _gendersListFilterHasInput,
    _gendersListFilterEqualsInput,
    _gendersListFilterHasSomeInput,
    _gendersListFilterIsEmptyInput,
    _gendersListFilterHasEveryInput,
]


class _gendersListUpdateSet(TypedDict):
    set: List['enums.genders']


class _gendersListUpdatePush(TypedDict):
    push: List['enums.genders']


gendersListUpdate = Union[
    List['enums.genders'],
    _gendersListUpdateSet,
    _gendersListUpdatePush,
]

class _paymentListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.payment']]


class _paymentListFilterHasInput(TypedDict):
    has: 'enums.payment'


class _paymentListFilterHasEveryInput(TypedDict):
    has_every: List['enums.payment']


class _paymentListFilterHasSomeInput(TypedDict):
    has_some: List['enums.payment']


class _paymentListFilterIsEmptyInput(TypedDict):
    is_empty: bool


paymentListFilter = Union[
    _paymentListFilterHasInput,
    _paymentListFilterEqualsInput,
    _paymentListFilterHasSomeInput,
    _paymentListFilterIsEmptyInput,
    _paymentListFilterHasEveryInput,
]


class _paymentListUpdateSet(TypedDict):
    set: List['enums.payment']


class _paymentListUpdatePush(TypedDict):
    push: List['enums.payment']


paymentListUpdate = Union[
    List['enums.payment'],
    _paymentListUpdateSet,
    _paymentListUpdatePush,
]

class _rolesListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.roles']]


class _rolesListFilterHasInput(TypedDict):
    has: 'enums.roles'


class _rolesListFilterHasEveryInput(TypedDict):
    has_every: List['enums.roles']


class _rolesListFilterHasSomeInput(TypedDict):
    has_some: List['enums.roles']


class _rolesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


rolesListFilter = Union[
    _rolesListFilterHasInput,
    _rolesListFilterEqualsInput,
    _rolesListFilterHasSomeInput,
    _rolesListFilterIsEmptyInput,
    _rolesListFilterHasEveryInput,
]


class _rolesListUpdateSet(TypedDict):
    set: List['enums.roles']


class _rolesListUpdatePush(TypedDict):
    push: List['enums.roles']


rolesListUpdate = Union[
    List['enums.roles'],
    _rolesListUpdateSet,
    _rolesListUpdatePush,
]

class _statusesListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.statuses']]


class _statusesListFilterHasInput(TypedDict):
    has: 'enums.statuses'


class _statusesListFilterHasEveryInput(TypedDict):
    has_every: List['enums.statuses']


class _statusesListFilterHasSomeInput(TypedDict):
    has_some: List['enums.statuses']


class _statusesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


statusesListFilter = Union[
    _statusesListFilterHasInput,
    _statusesListFilterEqualsInput,
    _statusesListFilterHasSomeInput,
    _statusesListFilterIsEmptyInput,
    _statusesListFilterHasEveryInput,
]


class _statusesListUpdateSet(TypedDict):
    set: List['enums.statuses']


class _statusesListUpdatePush(TypedDict):
    push: List['enums.statuses']


statusesListUpdate = Union[
    List['enums.statuses'],
    _statusesListUpdateSet,
    _statusesListUpdatePush,
]

class _statutsListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.statuts']]


class _statutsListFilterHasInput(TypedDict):
    has: 'enums.statuts'


class _statutsListFilterHasEveryInput(TypedDict):
    has_every: List['enums.statuts']


class _statutsListFilterHasSomeInput(TypedDict):
    has_some: List['enums.statuts']


class _statutsListFilterIsEmptyInput(TypedDict):
    is_empty: bool


statutsListFilter = Union[
    _statutsListFilterHasInput,
    _statutsListFilterEqualsInput,
    _statutsListFilterHasSomeInput,
    _statutsListFilterIsEmptyInput,
    _statutsListFilterHasEveryInput,
]


class _statutsListUpdateSet(TypedDict):
    set: List['enums.statuts']


class _statutsListUpdatePush(TypedDict):
    push: List['enums.statuts']


statutsListUpdate = Union[
    List['enums.statuts'],
    _statutsListUpdateSet,
    _statutsListUpdatePush,
]


# allergies types

class allergiesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the allergies create method"""
    allergyid: _int
    description: Optional[_str]
    patients_allergies: 'patients_allergiesCreateManyNestedWithoutRelationsInput'


class allergiesCreateInput(allergiesOptionalCreateInput):
    """Required arguments to the allergies create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class allergiesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the allergies create method, without relations"""
    allergyid: _int
    description: Optional[_str]


class allergiesCreateWithoutRelationsInput(allergiesOptionalCreateWithoutRelationsInput):
    """Required arguments to the allergies create method, without relations"""
    name: _str

class allergiesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'allergiesCreateWithoutRelationsInput'
    where: 'allergiesWhereUniqueInput'

class allergiesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'allergiesCreateWithoutRelationsInput'
    connect: 'allergiesWhereUniqueInput'
    connect_or_create: 'allergiesConnectOrCreateWithoutRelationsInput'


class allergiesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['allergiesCreateWithoutRelationsInput', List['allergiesCreateWithoutRelationsInput']]
    connect: Union['allergiesWhereUniqueInput', List['allergiesWhereUniqueInput']]
    connect_or_create: Union['allergiesConnectOrCreateWithoutRelationsInput', List['allergiesConnectOrCreateWithoutRelationsInput']]

_allergiesWhereUnique_allergyid_Input = TypedDict(
    '_allergiesWhereUnique_allergyid_Input',
    {
        'allergyid': '_int',
    },
    total=True
)

allergiesWhereUniqueInput = _allergiesWhereUnique_allergyid_Input


class allergiesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    allergyid: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]
    patients_allergies: 'patients_allergiesUpdateManyWithoutRelationsInput'


class allergiesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    allergyid: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]


class allergiesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['allergiesCreateWithoutRelationsInput']
    connect: List['allergiesWhereUniqueInput']
    connect_or_create: List['allergiesConnectOrCreateWithoutRelationsInput']
    set: List['allergiesWhereUniqueInput']
    disconnect: List['allergiesWhereUniqueInput']
    delete: List['allergiesWhereUniqueInput']

    # TODO
    # update: List['allergiesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['allergiesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['allergiesScalarWhereInput']
    # upsert: List['allergiesUpserteWithWhereUniqueWithoutRelationsInput']


class allergiesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'allergiesCreateWithoutRelationsInput'
    connect: 'allergiesWhereUniqueInput'
    connect_or_create: 'allergiesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'allergiesUpdateInput'
    # upsert: 'allergiesUpsertWithoutRelationsInput'


class allergiesUpsertInput(TypedDict):
    create: 'allergiesCreateInput'
    update: 'allergiesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_allergies_allergyid_OrderByInput = TypedDict(
    '_allergies_allergyid_OrderByInput',
    {
        'allergyid': 'SortOrder',
    },
    total=True
)

_allergies_name_OrderByInput = TypedDict(
    '_allergies_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_allergies_description_OrderByInput = TypedDict(
    '_allergies_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_allergies_RelevanceInner = TypedDict(
    '_allergies_RelevanceInner',
    {
        'fields': 'List[allergiesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_allergies_RelevanceOrderByInput = TypedDict(
    '_allergies_RelevanceOrderByInput',
    {
        '_relevance': '_allergies_RelevanceInner',
    },
    total=True
)

allergiesOrderByInput = Union[
    '_allergies_allergyid_OrderByInput',
    '_allergies_name_OrderByInput',
    '_allergies_description_OrderByInput',
    '_allergies_RelevanceOrderByInput',
]



# recursive allergies types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

allergiesRelationFilter = TypedDict(
    'allergiesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class allergiesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class allergiesInclude(TypedDict, total=False):
    """allergies relational arguments"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromallergies']


    

class allergiesIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromallergiesRecursive1']


class allergiesIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromallergiesRecursive2']


class allergiesIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromallergiesRecursive3']


class allergiesIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromallergiesRecursive4']


class allergiesIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class allergiesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyallergiesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients: Union[bool, 'patientsArgsFromallergiesRecursive1']


class booster_shotsIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients: Union[bool, 'patientsArgsFromallergiesRecursive2']


class booster_shotsIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients: Union[bool, 'patientsArgsFromallergiesRecursive3']


class booster_shotsIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients: Union[bool, 'patientsArgsFromallergiesRecursive4']


class booster_shotsIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class booster_shotsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManybooster_shotsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    earnings: Union[bool, 'FindManyearningsArgsFromallergiesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromallergiesRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromallergiesRecursive1']


class clientsIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    earnings: Union[bool, 'FindManyearningsArgsFromallergiesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromallergiesRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromallergiesRecursive2']


class clientsIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    earnings: Union[bool, 'FindManyearningsArgsFromallergiesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromallergiesRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromallergiesRecursive3']


class clientsIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    earnings: Union[bool, 'FindManyearningsArgsFromallergiesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromallergiesRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromallergiesRecursive4']


class clientsIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class clientsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyclientsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromallergiesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromallergiesRecursive1']


class earningsIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromallergiesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromallergiesRecursive2']


class earningsIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromallergiesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromallergiesRecursive3']


class earningsIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromallergiesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromallergiesRecursive4']


class earningsIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class earningsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyearningsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive1']
    patients: Union[bool, 'patientsArgsFromallergiesRecursive1']
    users: Union[bool, 'usersArgsFromallergiesRecursive1']


class eventsIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive2']
    patients: Union[bool, 'patientsArgsFromallergiesRecursive2']
    users: Union[bool, 'usersArgsFromallergiesRecursive2']


class eventsIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive3']
    patients: Union[bool, 'patientsArgsFromallergiesRecursive3']
    users: Union[bool, 'usersArgsFromallergiesRecursive3']


class eventsIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive4']
    patients: Union[bool, 'patientsArgsFromallergiesRecursive4']
    users: Union[bool, 'usersArgsFromallergiesRecursive4']


class eventsIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class eventsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyeventsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromallergiesRecursive1']


class expensesIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromallergiesRecursive2']


class expensesIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromallergiesRecursive3']


class expensesIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromallergiesRecursive4']


class expensesIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class expensesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyexpensesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive1']
    earnings: Union[bool, 'earningsArgsFromallergiesRecursive1']


class invoicesIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive2']
    earnings: Union[bool, 'earningsArgsFromallergiesRecursive2']


class invoicesIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive3']
    earnings: Union[bool, 'earningsArgsFromallergiesRecursive3']


class invoicesIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    clients: Union[bool, 'clientsArgsFromallergiesRecursive4']
    earnings: Union[bool, 'earningsArgsFromallergiesRecursive4']


class invoicesIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class invoicesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyinvoicesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    expense: Union[bool, 'expensesArgsFromallergiesRecursive1']
    product: Union[bool, 'productsArgsFromallergiesRecursive1']


class items_boughtIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    expense: Union[bool, 'expensesArgsFromallergiesRecursive2']
    product: Union[bool, 'productsArgsFromallergiesRecursive2']


class items_boughtIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    expense: Union[bool, 'expensesArgsFromallergiesRecursive3']
    product: Union[bool, 'productsArgsFromallergiesRecursive3']


class items_boughtIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    expense: Union[bool, 'expensesArgsFromallergiesRecursive4']
    product: Union[bool, 'productsArgsFromallergiesRecursive4']


class items_boughtIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class items_boughtArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyitems_boughtArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    earning: Union[bool, 'earningsArgsFromallergiesRecursive1']
    product: Union[bool, 'productsArgsFromallergiesRecursive1']


class items_soldIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    earning: Union[bool, 'earningsArgsFromallergiesRecursive2']
    product: Union[bool, 'productsArgsFromallergiesRecursive2']


class items_soldIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    earning: Union[bool, 'earningsArgsFromallergiesRecursive3']
    product: Union[bool, 'productsArgsFromallergiesRecursive3']


class items_soldIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    earning: Union[bool, 'earningsArgsFromallergiesRecursive4']
    product: Union[bool, 'productsArgsFromallergiesRecursive4']


class items_soldIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class items_soldArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyitems_soldArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromallergiesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive1']
    clients: Union[bool, 'clientsArgsFromallergiesRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromallergiesRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromallergiesRecursive1']


class patientsIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromallergiesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive2']
    clients: Union[bool, 'clientsArgsFromallergiesRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromallergiesRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromallergiesRecursive2']


class patientsIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromallergiesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive3']
    clients: Union[bool, 'clientsArgsFromallergiesRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromallergiesRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromallergiesRecursive3']


class patientsIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromallergiesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive4']
    clients: Union[bool, 'clientsArgsFromallergiesRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromallergiesRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromallergiesRecursive4']


class patientsIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class patientsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManypatientsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    allergies: Union[bool, 'allergiesArgsFromallergiesRecursive1']
    patients: Union[bool, 'patientsArgsFromallergiesRecursive1']


class patients_allergiesIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    allergies: Union[bool, 'allergiesArgsFromallergiesRecursive2']
    patients: Union[bool, 'patientsArgsFromallergiesRecursive2']


class patients_allergiesIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    allergies: Union[bool, 'allergiesArgsFromallergiesRecursive3']
    patients: Union[bool, 'patientsArgsFromallergiesRecursive3']


class patients_allergiesIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    allergies: Union[bool, 'allergiesArgsFromallergiesRecursive4']
    patients: Union[bool, 'patientsArgsFromallergiesRecursive4']


class patients_allergiesIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class patients_allergiesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManypatients_allergiesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients: Union[bool, 'patientsArgsFromallergiesRecursive1']


class prescriptionsIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients: Union[bool, 'patientsArgsFromallergiesRecursive2']


class prescriptionsIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients: Union[bool, 'patientsArgsFromallergiesRecursive3']


class prescriptionsIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    patients: Union[bool, 'patientsArgsFromallergiesRecursive4']


class prescriptionsIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class prescriptionsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyprescriptionsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    products: Union[bool, 'FindManyproductsArgsFromallergiesRecursive1']


class product_typesIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    products: Union[bool, 'FindManyproductsArgsFromallergiesRecursive2']


class product_typesIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    products: Union[bool, 'FindManyproductsArgsFromallergiesRecursive3']


class product_typesIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    products: Union[bool, 'FindManyproductsArgsFromallergiesRecursive4']


class product_typesIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class product_typesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyproduct_typesArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    product_types: Union[bool, 'product_typesArgsFromallergiesRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromallergiesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromallergiesRecursive1']


class productsIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    product_types: Union[bool, 'product_typesArgsFromallergiesRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromallergiesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromallergiesRecursive2']


class productsIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    product_types: Union[bool, 'product_typesArgsFromallergiesRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromallergiesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromallergiesRecursive3']


class productsIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    product_types: Union[bool, 'product_typesArgsFromallergiesRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromallergiesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromallergiesRecursive4']


class productsIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class productsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyproductsArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromallergies(TypedDict, total=False):
    """Relational arguments for allergies"""
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive1']


class usersIncludeFromallergiesRecursive1(TypedDict, total=False):
    """Relational arguments for allergies"""
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive2']


class usersIncludeFromallergiesRecursive2(TypedDict, total=False):
    """Relational arguments for allergies"""
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive3']


class usersIncludeFromallergiesRecursive3(TypedDict, total=False):
    """Relational arguments for allergies"""
    events: Union[bool, 'FindManyeventsArgsFromallergiesRecursive4']


class usersIncludeFromallergiesRecursive4(TypedDict, total=False):
    """Relational arguments for allergies"""

    

class usersArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    
    

class FindManyusersArgsFromallergies(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromallergiesRecursive1(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromallergiesRecursive2(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromallergiesRecursive3(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromallergiesRecursive4(TypedDict, total=False):
    """Arguments for allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyallergiesArgs = FindManyallergiesArgsFromallergies
FindFirstallergiesArgs = FindManyallergiesArgsFromallergies


    

class allergiesWhereInput(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    patients_allergies: 'patients_allergiesListRelationFilter'

    # should be noted that AND and NOT should be Union['allergiesWhereInputRecursive1', List['allergiesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['allergiesWhereInputRecursive1']
    OR: List['allergiesWhereInputRecursive1']
    NOT: List['allergiesWhereInputRecursive1']


class allergiesWhereInputRecursive1(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    patients_allergies: 'patients_allergiesListRelationFilter'

    # should be noted that AND and NOT should be Union['allergiesWhereInputRecursive2', List['allergiesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['allergiesWhereInputRecursive2']
    OR: List['allergiesWhereInputRecursive2']
    NOT: List['allergiesWhereInputRecursive2']


class allergiesWhereInputRecursive2(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    patients_allergies: 'patients_allergiesListRelationFilter'

    # should be noted that AND and NOT should be Union['allergiesWhereInputRecursive3', List['allergiesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['allergiesWhereInputRecursive3']
    OR: List['allergiesWhereInputRecursive3']
    NOT: List['allergiesWhereInputRecursive3']


class allergiesWhereInputRecursive3(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    patients_allergies: 'patients_allergiesListRelationFilter'

    # should be noted that AND and NOT should be Union['allergiesWhereInputRecursive4', List['allergiesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['allergiesWhereInputRecursive4']
    OR: List['allergiesWhereInputRecursive4']
    NOT: List['allergiesWhereInputRecursive4']


class allergiesWhereInputRecursive4(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    patients_allergies: 'patients_allergiesListRelationFilter'



# aggregate allergies types


    

class allergiesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['allergiesScalarWhereWithAggregatesInputRecursive1']
    OR: List['allergiesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['allergiesScalarWhereWithAggregatesInputRecursive1']


class allergiesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['allergiesScalarWhereWithAggregatesInputRecursive2']
    OR: List['allergiesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['allergiesScalarWhereWithAggregatesInputRecursive2']


class allergiesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['allergiesScalarWhereWithAggregatesInputRecursive3']
    OR: List['allergiesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['allergiesScalarWhereWithAggregatesInputRecursive3']


class allergiesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['allergiesScalarWhereWithAggregatesInputRecursive4']
    OR: List['allergiesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['allergiesScalarWhereWithAggregatesInputRecursive4']


class allergiesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """allergies arguments for searching"""
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']



class allergiesGroupByOutput(TypedDict, total=False):
    allergyid: _int
    name: _str
    description: _str
    _sum: 'allergiesSumAggregateOutput'
    _avg: 'allergiesAvgAggregateOutput'
    _min: 'allergiesMinAggregateOutput'
    _max: 'allergiesMaxAggregateOutput'
    _count: 'allergiesCountAggregateOutput'


class allergiesAvgAggregateOutput(TypedDict, total=False):
    """allergies output for aggregating averages"""
    allergyid: float


class allergiesSumAggregateOutput(TypedDict, total=False):
    """allergies output for aggregating sums"""
    allergyid: _int


class allergiesScalarAggregateOutput(TypedDict, total=False):
    """allergies output including scalar fields"""
    allergyid: _int
    name: _str
    description: _str


allergiesMinAggregateOutput = allergiesScalarAggregateOutput
allergiesMaxAggregateOutput = allergiesScalarAggregateOutput


class allergiesMaxAggregateInput(TypedDict, total=False):
    """allergies input for aggregating by max"""
    allergyid: bool
    name: bool
    description: bool


class allergiesMinAggregateInput(TypedDict, total=False):
    """allergies input for aggregating by min"""
    allergyid: bool
    name: bool
    description: bool


class allergiesNumberAggregateInput(TypedDict, total=False):
    """allergies input for aggregating numbers"""
    allergyid: bool


allergiesAvgAggregateInput = allergiesNumberAggregateInput
allergiesSumAggregateInput = allergiesNumberAggregateInput


allergiesCountAggregateInput = TypedDict(
    'allergiesCountAggregateInput',
    {
        'allergyid': bool,
        'name': bool,
        'description': bool,
        '_all': bool,
    },
    total=False,
)

allergiesCountAggregateOutput = TypedDict(
    'allergiesCountAggregateOutput',
    {
        'allergyid': int,
        'name': int,
        'description': int,
        '_all': int,
    },
    total=False,
)


allergiesKeys = Literal[
    'allergyid',
    'name',
    'description',
    'patients_allergies',
]
allergiesScalarFieldKeys = Literal[
    'allergyid',
    'name',
    'description',
]
allergiesScalarFieldKeysT = TypeVar('allergiesScalarFieldKeysT', bound=allergiesScalarFieldKeys)

allergiesRelationalFieldKeys = Literal[
        'patients_allergies',
    ]

# booster_shots types

class booster_shotsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the booster_shots create method"""
    boostershotid: _int
    executiondate: Optional[datetime.datetime]
    patientid: _int
    patients: 'patientsCreateNestedWithoutRelationsInput'


class booster_shotsCreateInput(booster_shotsOptionalCreateInput):
    """Required arguments to the booster_shots create method"""
    type: _str
    initialdate: datetime.datetime
    status: 'enums.statuts'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class booster_shotsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the booster_shots create method, without relations"""
    boostershotid: _int
    executiondate: Optional[datetime.datetime]
    patientid: _int


class booster_shotsCreateWithoutRelationsInput(booster_shotsOptionalCreateWithoutRelationsInput):
    """Required arguments to the booster_shots create method, without relations"""
    type: _str
    initialdate: datetime.datetime
    status: 'enums.statuts'

class booster_shotsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'booster_shotsCreateWithoutRelationsInput'
    where: 'booster_shotsWhereUniqueInput'

class booster_shotsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'booster_shotsCreateWithoutRelationsInput'
    connect: 'booster_shotsWhereUniqueInput'
    connect_or_create: 'booster_shotsConnectOrCreateWithoutRelationsInput'


class booster_shotsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['booster_shotsCreateWithoutRelationsInput', List['booster_shotsCreateWithoutRelationsInput']]
    connect: Union['booster_shotsWhereUniqueInput', List['booster_shotsWhereUniqueInput']]
    connect_or_create: Union['booster_shotsConnectOrCreateWithoutRelationsInput', List['booster_shotsConnectOrCreateWithoutRelationsInput']]

_booster_shotsWhereUnique_boostershotid_Input = TypedDict(
    '_booster_shotsWhereUnique_boostershotid_Input',
    {
        'boostershotid': '_int',
    },
    total=True
)

booster_shotsWhereUniqueInput = _booster_shotsWhereUnique_boostershotid_Input


class booster_shotsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    boostershotid: Union[AtomicIntInput, _int]
    type: _str
    initialdate: datetime.datetime
    executiondate: Optional[datetime.datetime]
    status: 'enums.statuts'
    patients: 'patientsUpdateOneWithoutRelationsInput'


class booster_shotsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    boostershotid: Union[AtomicIntInput, _int]
    type: _str
    initialdate: datetime.datetime
    executiondate: Optional[datetime.datetime]
    status: 'enums.statuts'


class booster_shotsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['booster_shotsCreateWithoutRelationsInput']
    connect: List['booster_shotsWhereUniqueInput']
    connect_or_create: List['booster_shotsConnectOrCreateWithoutRelationsInput']
    set: List['booster_shotsWhereUniqueInput']
    disconnect: List['booster_shotsWhereUniqueInput']
    delete: List['booster_shotsWhereUniqueInput']

    # TODO
    # update: List['booster_shotsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['booster_shotsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['booster_shotsScalarWhereInput']
    # upsert: List['booster_shotsUpserteWithWhereUniqueWithoutRelationsInput']


class booster_shotsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'booster_shotsCreateWithoutRelationsInput'
    connect: 'booster_shotsWhereUniqueInput'
    connect_or_create: 'booster_shotsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'booster_shotsUpdateInput'
    # upsert: 'booster_shotsUpsertWithoutRelationsInput'


class booster_shotsUpsertInput(TypedDict):
    create: 'booster_shotsCreateInput'
    update: 'booster_shotsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_booster_shots_boostershotid_OrderByInput = TypedDict(
    '_booster_shots_boostershotid_OrderByInput',
    {
        'boostershotid': 'SortOrder',
    },
    total=True
)

_booster_shots_type_OrderByInput = TypedDict(
    '_booster_shots_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_booster_shots_initialdate_OrderByInput = TypedDict(
    '_booster_shots_initialdate_OrderByInput',
    {
        'initialdate': 'SortOrder',
    },
    total=True
)

_booster_shots_executiondate_OrderByInput = TypedDict(
    '_booster_shots_executiondate_OrderByInput',
    {
        'executiondate': 'SortOrder',
    },
    total=True
)

_booster_shots_status_OrderByInput = TypedDict(
    '_booster_shots_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_booster_shots_patientid_OrderByInput = TypedDict(
    '_booster_shots_patientid_OrderByInput',
    {
        'patientid': 'SortOrder',
    },
    total=True
)

_booster_shots_RelevanceInner = TypedDict(
    '_booster_shots_RelevanceInner',
    {
        'fields': 'List[booster_shotsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_booster_shots_RelevanceOrderByInput = TypedDict(
    '_booster_shots_RelevanceOrderByInput',
    {
        '_relevance': '_booster_shots_RelevanceInner',
    },
    total=True
)

booster_shotsOrderByInput = Union[
    '_booster_shots_boostershotid_OrderByInput',
    '_booster_shots_type_OrderByInput',
    '_booster_shots_initialdate_OrderByInput',
    '_booster_shots_executiondate_OrderByInput',
    '_booster_shots_status_OrderByInput',
    '_booster_shots_patientid_OrderByInput',
    '_booster_shots_RelevanceOrderByInput',
]



# recursive booster_shots types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

booster_shotsRelationFilter = TypedDict(
    'booster_shotsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class booster_shotsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class booster_shotsInclude(TypedDict, total=False):
    """booster_shots relational arguments"""
    patients: Union[bool, 'patientsArgsFrombooster_shots']


    

class allergiesIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrombooster_shotsRecursive1']


class allergiesIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrombooster_shotsRecursive2']


class allergiesIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrombooster_shotsRecursive3']


class allergiesIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrombooster_shotsRecursive4']


class allergiesIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class allergiesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyallergiesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive1']


class booster_shotsIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive2']


class booster_shotsIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive3']


class booster_shotsIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive4']


class booster_shotsIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class booster_shotsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManybooster_shotsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    earnings: Union[bool, 'FindManyearningsArgsFrombooster_shotsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFrombooster_shotsRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFrombooster_shotsRecursive1']


class clientsIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    earnings: Union[bool, 'FindManyearningsArgsFrombooster_shotsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFrombooster_shotsRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFrombooster_shotsRecursive2']


class clientsIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    earnings: Union[bool, 'FindManyearningsArgsFrombooster_shotsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFrombooster_shotsRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFrombooster_shotsRecursive3']


class clientsIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    earnings: Union[bool, 'FindManyearningsArgsFrombooster_shotsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFrombooster_shotsRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFrombooster_shotsRecursive4']


class clientsIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class clientsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyclientsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFrombooster_shotsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrombooster_shotsRecursive1']


class earningsIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFrombooster_shotsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrombooster_shotsRecursive2']


class earningsIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFrombooster_shotsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrombooster_shotsRecursive3']


class earningsIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFrombooster_shotsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrombooster_shotsRecursive4']


class earningsIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class earningsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyearningsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive1']
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive1']
    users: Union[bool, 'usersArgsFrombooster_shotsRecursive1']


class eventsIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive2']
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive2']
    users: Union[bool, 'usersArgsFrombooster_shotsRecursive2']


class eventsIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive3']
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive3']
    users: Union[bool, 'usersArgsFrombooster_shotsRecursive3']


class eventsIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive4']
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive4']
    users: Union[bool, 'usersArgsFrombooster_shotsRecursive4']


class eventsIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class eventsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyeventsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrombooster_shotsRecursive1']


class expensesIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrombooster_shotsRecursive2']


class expensesIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrombooster_shotsRecursive3']


class expensesIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrombooster_shotsRecursive4']


class expensesIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class expensesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyexpensesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive1']
    earnings: Union[bool, 'earningsArgsFrombooster_shotsRecursive1']


class invoicesIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive2']
    earnings: Union[bool, 'earningsArgsFrombooster_shotsRecursive2']


class invoicesIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive3']
    earnings: Union[bool, 'earningsArgsFrombooster_shotsRecursive3']


class invoicesIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive4']
    earnings: Union[bool, 'earningsArgsFrombooster_shotsRecursive4']


class invoicesIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class invoicesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyinvoicesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    expense: Union[bool, 'expensesArgsFrombooster_shotsRecursive1']
    product: Union[bool, 'productsArgsFrombooster_shotsRecursive1']


class items_boughtIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    expense: Union[bool, 'expensesArgsFrombooster_shotsRecursive2']
    product: Union[bool, 'productsArgsFrombooster_shotsRecursive2']


class items_boughtIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    expense: Union[bool, 'expensesArgsFrombooster_shotsRecursive3']
    product: Union[bool, 'productsArgsFrombooster_shotsRecursive3']


class items_boughtIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    expense: Union[bool, 'expensesArgsFrombooster_shotsRecursive4']
    product: Union[bool, 'productsArgsFrombooster_shotsRecursive4']


class items_boughtIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class items_boughtArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyitems_boughtArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    earning: Union[bool, 'earningsArgsFrombooster_shotsRecursive1']
    product: Union[bool, 'productsArgsFrombooster_shotsRecursive1']


class items_soldIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    earning: Union[bool, 'earningsArgsFrombooster_shotsRecursive2']
    product: Union[bool, 'productsArgsFrombooster_shotsRecursive2']


class items_soldIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    earning: Union[bool, 'earningsArgsFrombooster_shotsRecursive3']
    product: Union[bool, 'productsArgsFrombooster_shotsRecursive3']


class items_soldIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    earning: Union[bool, 'earningsArgsFrombooster_shotsRecursive4']
    product: Union[bool, 'productsArgsFrombooster_shotsRecursive4']


class items_soldIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class items_soldArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyitems_soldArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrombooster_shotsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive1']
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrombooster_shotsRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrombooster_shotsRecursive1']


class patientsIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrombooster_shotsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive2']
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrombooster_shotsRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrombooster_shotsRecursive2']


class patientsIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrombooster_shotsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive3']
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrombooster_shotsRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrombooster_shotsRecursive3']


class patientsIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrombooster_shotsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive4']
    clients: Union[bool, 'clientsArgsFrombooster_shotsRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrombooster_shotsRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrombooster_shotsRecursive4']


class patientsIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class patientsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManypatientsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    allergies: Union[bool, 'allergiesArgsFrombooster_shotsRecursive1']
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive1']


class patients_allergiesIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    allergies: Union[bool, 'allergiesArgsFrombooster_shotsRecursive2']
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive2']


class patients_allergiesIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    allergies: Union[bool, 'allergiesArgsFrombooster_shotsRecursive3']
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive3']


class patients_allergiesIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    allergies: Union[bool, 'allergiesArgsFrombooster_shotsRecursive4']
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive4']


class patients_allergiesIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class patients_allergiesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManypatients_allergiesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive1']


class prescriptionsIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive2']


class prescriptionsIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive3']


class prescriptionsIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    patients: Union[bool, 'patientsArgsFrombooster_shotsRecursive4']


class prescriptionsIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class prescriptionsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyprescriptionsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    products: Union[bool, 'FindManyproductsArgsFrombooster_shotsRecursive1']


class product_typesIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    products: Union[bool, 'FindManyproductsArgsFrombooster_shotsRecursive2']


class product_typesIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    products: Union[bool, 'FindManyproductsArgsFrombooster_shotsRecursive3']


class product_typesIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    products: Union[bool, 'FindManyproductsArgsFrombooster_shotsRecursive4']


class product_typesIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class product_typesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyproduct_typesArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    product_types: Union[bool, 'product_typesArgsFrombooster_shotsRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrombooster_shotsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrombooster_shotsRecursive1']


class productsIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    product_types: Union[bool, 'product_typesArgsFrombooster_shotsRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrombooster_shotsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrombooster_shotsRecursive2']


class productsIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    product_types: Union[bool, 'product_typesArgsFrombooster_shotsRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrombooster_shotsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrombooster_shotsRecursive3']


class productsIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    product_types: Union[bool, 'product_typesArgsFrombooster_shotsRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrombooster_shotsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrombooster_shotsRecursive4']


class productsIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class productsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyproductsArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFrombooster_shots(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive1']


class usersIncludeFrombooster_shotsRecursive1(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive2']


class usersIncludeFrombooster_shotsRecursive2(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive3']


class usersIncludeFrombooster_shotsRecursive3(TypedDict, total=False):
    """Relational arguments for booster_shots"""
    events: Union[bool, 'FindManyeventsArgsFrombooster_shotsRecursive4']


class usersIncludeFrombooster_shotsRecursive4(TypedDict, total=False):
    """Relational arguments for booster_shots"""

    

class usersArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    
    

class FindManyusersArgsFrombooster_shots(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFrombooster_shotsRecursive1(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFrombooster_shotsRecursive2(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFrombooster_shotsRecursive3(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFrombooster_shotsRecursive4(TypedDict, total=False):
    """Arguments for booster_shots"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManybooster_shotsArgs = FindManybooster_shotsArgsFrombooster_shots
FindFirstbooster_shotsArgs = FindManybooster_shotsArgsFrombooster_shots


    

class booster_shotsWhereInput(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeFilter']
    executiondate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['booster_shotsWhereInputRecursive1', List['booster_shotsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['booster_shotsWhereInputRecursive1']
    OR: List['booster_shotsWhereInputRecursive1']
    NOT: List['booster_shotsWhereInputRecursive1']


class booster_shotsWhereInputRecursive1(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeFilter']
    executiondate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['booster_shotsWhereInputRecursive2', List['booster_shotsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['booster_shotsWhereInputRecursive2']
    OR: List['booster_shotsWhereInputRecursive2']
    NOT: List['booster_shotsWhereInputRecursive2']


class booster_shotsWhereInputRecursive2(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeFilter']
    executiondate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['booster_shotsWhereInputRecursive3', List['booster_shotsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['booster_shotsWhereInputRecursive3']
    OR: List['booster_shotsWhereInputRecursive3']
    NOT: List['booster_shotsWhereInputRecursive3']


class booster_shotsWhereInputRecursive3(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeFilter']
    executiondate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['booster_shotsWhereInputRecursive4', List['booster_shotsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['booster_shotsWhereInputRecursive4']
    OR: List['booster_shotsWhereInputRecursive4']
    NOT: List['booster_shotsWhereInputRecursive4']


class booster_shotsWhereInputRecursive4(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntFilter']
    type: Union[_str, 'types.StringFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeFilter']
    executiondate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'



# aggregate booster_shots types


    

class booster_shotsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    executiondate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['booster_shotsScalarWhereWithAggregatesInputRecursive1']
    OR: List['booster_shotsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['booster_shotsScalarWhereWithAggregatesInputRecursive1']


class booster_shotsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    executiondate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['booster_shotsScalarWhereWithAggregatesInputRecursive2']
    OR: List['booster_shotsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['booster_shotsScalarWhereWithAggregatesInputRecursive2']


class booster_shotsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    executiondate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['booster_shotsScalarWhereWithAggregatesInputRecursive3']
    OR: List['booster_shotsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['booster_shotsScalarWhereWithAggregatesInputRecursive3']


class booster_shotsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    executiondate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['booster_shotsScalarWhereWithAggregatesInputRecursive4']
    OR: List['booster_shotsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['booster_shotsScalarWhereWithAggregatesInputRecursive4']


class booster_shotsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """booster_shots arguments for searching"""
    boostershotid: Union[_int, 'types.IntWithAggregatesFilter']
    type: Union[_str, 'types.StringWithAggregatesFilter']
    initialdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    executiondate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    patientid: Union[_int, 'types.IntWithAggregatesFilter']



class booster_shotsGroupByOutput(TypedDict, total=False):
    boostershotid: _int
    type: _str
    initialdate: datetime.datetime
    executiondate: datetime.datetime
    status: 'enums.statuts'
    patientid: _int
    _sum: 'booster_shotsSumAggregateOutput'
    _avg: 'booster_shotsAvgAggregateOutput'
    _min: 'booster_shotsMinAggregateOutput'
    _max: 'booster_shotsMaxAggregateOutput'
    _count: 'booster_shotsCountAggregateOutput'


class booster_shotsAvgAggregateOutput(TypedDict, total=False):
    """booster_shots output for aggregating averages"""
    boostershotid: float
    patientid: float


class booster_shotsSumAggregateOutput(TypedDict, total=False):
    """booster_shots output for aggregating sums"""
    boostershotid: _int
    patientid: _int


class booster_shotsScalarAggregateOutput(TypedDict, total=False):
    """booster_shots output including scalar fields"""
    boostershotid: _int
    type: _str
    initialdate: datetime.datetime
    executiondate: datetime.datetime
    status: 'enums.statuts'
    patientid: _int


booster_shotsMinAggregateOutput = booster_shotsScalarAggregateOutput
booster_shotsMaxAggregateOutput = booster_shotsScalarAggregateOutput


class booster_shotsMaxAggregateInput(TypedDict, total=False):
    """booster_shots input for aggregating by max"""
    boostershotid: bool
    type: bool
    initialdate: bool
    executiondate: bool
    status: bool
    patientid: bool


class booster_shotsMinAggregateInput(TypedDict, total=False):
    """booster_shots input for aggregating by min"""
    boostershotid: bool
    type: bool
    initialdate: bool
    executiondate: bool
    status: bool
    patientid: bool


class booster_shotsNumberAggregateInput(TypedDict, total=False):
    """booster_shots input for aggregating numbers"""
    boostershotid: bool
    patientid: bool


booster_shotsAvgAggregateInput = booster_shotsNumberAggregateInput
booster_shotsSumAggregateInput = booster_shotsNumberAggregateInput


booster_shotsCountAggregateInput = TypedDict(
    'booster_shotsCountAggregateInput',
    {
        'boostershotid': bool,
        'type': bool,
        'initialdate': bool,
        'executiondate': bool,
        'status': bool,
        'patientid': bool,
        '_all': bool,
    },
    total=False,
)

booster_shotsCountAggregateOutput = TypedDict(
    'booster_shotsCountAggregateOutput',
    {
        'boostershotid': int,
        'type': int,
        'initialdate': int,
        'executiondate': int,
        'status': int,
        'patientid': int,
        '_all': int,
    },
    total=False,
)


booster_shotsKeys = Literal[
    'boostershotid',
    'type',
    'initialdate',
    'executiondate',
    'status',
    'patientid',
    'patients',
]
booster_shotsScalarFieldKeys = Literal[
    'boostershotid',
    'type',
    'initialdate',
    'executiondate',
    'status',
    'patientid',
]
booster_shotsScalarFieldKeysT = TypeVar('booster_shotsScalarFieldKeysT', bound=booster_shotsScalarFieldKeys)

booster_shotsRelationalFieldKeys = Literal[
        'patients',
    ]

# clients types

class clientsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the clients create method"""
    clientid: _int
    email: Optional[_str]
    address: Optional[_str]
    zipcode: Optional[_str]
    city: Optional[_str]
    earnings: 'earningsCreateManyNestedWithoutRelationsInput'
    events: 'eventsCreateManyNestedWithoutRelationsInput'
    invoices: 'invoicesCreateManyNestedWithoutRelationsInput'
    patients: 'patientsCreateManyNestedWithoutRelationsInput'


class clientsCreateInput(clientsOptionalCreateInput):
    """Required arguments to the clients create method"""
    lastname: _str
    firstname: _str
    gender: 'enums.genders'
    phonenumber: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class clientsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the clients create method, without relations"""
    clientid: _int
    email: Optional[_str]
    address: Optional[_str]
    zipcode: Optional[_str]
    city: Optional[_str]


class clientsCreateWithoutRelationsInput(clientsOptionalCreateWithoutRelationsInput):
    """Required arguments to the clients create method, without relations"""
    lastname: _str
    firstname: _str
    gender: 'enums.genders'
    phonenumber: _str

class clientsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'clientsCreateWithoutRelationsInput'
    where: 'clientsWhereUniqueInput'

class clientsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'clientsCreateWithoutRelationsInput'
    connect: 'clientsWhereUniqueInput'
    connect_or_create: 'clientsConnectOrCreateWithoutRelationsInput'


class clientsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['clientsCreateWithoutRelationsInput', List['clientsCreateWithoutRelationsInput']]
    connect: Union['clientsWhereUniqueInput', List['clientsWhereUniqueInput']]
    connect_or_create: Union['clientsConnectOrCreateWithoutRelationsInput', List['clientsConnectOrCreateWithoutRelationsInput']]

_clientsWhereUnique_clientid_Input = TypedDict(
    '_clientsWhereUnique_clientid_Input',
    {
        'clientid': '_int',
    },
    total=True
)

clientsWhereUniqueInput = _clientsWhereUnique_clientid_Input


class clientsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    clientid: Union[AtomicIntInput, _int]
    lastname: _str
    firstname: _str
    gender: 'enums.genders'
    phonenumber: _str
    email: Optional[_str]
    address: Optional[_str]
    zipcode: Optional[_str]
    city: Optional[_str]
    earnings: 'earningsUpdateManyWithoutRelationsInput'
    events: 'eventsUpdateManyWithoutRelationsInput'
    invoices: 'invoicesUpdateManyWithoutRelationsInput'
    patients: 'patientsUpdateManyWithoutRelationsInput'


class clientsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    clientid: Union[AtomicIntInput, _int]
    lastname: _str
    firstname: _str
    gender: 'enums.genders'
    phonenumber: _str
    email: Optional[_str]
    address: Optional[_str]
    zipcode: Optional[_str]
    city: Optional[_str]


class clientsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['clientsCreateWithoutRelationsInput']
    connect: List['clientsWhereUniqueInput']
    connect_or_create: List['clientsConnectOrCreateWithoutRelationsInput']
    set: List['clientsWhereUniqueInput']
    disconnect: List['clientsWhereUniqueInput']
    delete: List['clientsWhereUniqueInput']

    # TODO
    # update: List['clientsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['clientsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['clientsScalarWhereInput']
    # upsert: List['clientsUpserteWithWhereUniqueWithoutRelationsInput']


class clientsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'clientsCreateWithoutRelationsInput'
    connect: 'clientsWhereUniqueInput'
    connect_or_create: 'clientsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'clientsUpdateInput'
    # upsert: 'clientsUpsertWithoutRelationsInput'


class clientsUpsertInput(TypedDict):
    create: 'clientsCreateInput'
    update: 'clientsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_clients_clientid_OrderByInput = TypedDict(
    '_clients_clientid_OrderByInput',
    {
        'clientid': 'SortOrder',
    },
    total=True
)

_clients_lastname_OrderByInput = TypedDict(
    '_clients_lastname_OrderByInput',
    {
        'lastname': 'SortOrder',
    },
    total=True
)

_clients_firstname_OrderByInput = TypedDict(
    '_clients_firstname_OrderByInput',
    {
        'firstname': 'SortOrder',
    },
    total=True
)

_clients_gender_OrderByInput = TypedDict(
    '_clients_gender_OrderByInput',
    {
        'gender': 'SortOrder',
    },
    total=True
)

_clients_phonenumber_OrderByInput = TypedDict(
    '_clients_phonenumber_OrderByInput',
    {
        'phonenumber': 'SortOrder',
    },
    total=True
)

_clients_email_OrderByInput = TypedDict(
    '_clients_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_clients_address_OrderByInput = TypedDict(
    '_clients_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_clients_zipcode_OrderByInput = TypedDict(
    '_clients_zipcode_OrderByInput',
    {
        'zipcode': 'SortOrder',
    },
    total=True
)

_clients_city_OrderByInput = TypedDict(
    '_clients_city_OrderByInput',
    {
        'city': 'SortOrder',
    },
    total=True
)

_clients_RelevanceInner = TypedDict(
    '_clients_RelevanceInner',
    {
        'fields': 'List[clientsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_clients_RelevanceOrderByInput = TypedDict(
    '_clients_RelevanceOrderByInput',
    {
        '_relevance': '_clients_RelevanceInner',
    },
    total=True
)

clientsOrderByInput = Union[
    '_clients_clientid_OrderByInput',
    '_clients_lastname_OrderByInput',
    '_clients_firstname_OrderByInput',
    '_clients_gender_OrderByInput',
    '_clients_phonenumber_OrderByInput',
    '_clients_email_OrderByInput',
    '_clients_address_OrderByInput',
    '_clients_zipcode_OrderByInput',
    '_clients_city_OrderByInput',
    '_clients_RelevanceOrderByInput',
]



# recursive clients types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

clientsRelationFilter = TypedDict(
    'clientsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class clientsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class clientsInclude(TypedDict, total=False):
    """clients relational arguments"""
    earnings: Union[bool, 'FindManyearningsArgsFromclients']
    events: Union[bool, 'FindManyeventsArgsFromclients']
    invoices: Union[bool, 'FindManyinvoicesArgsFromclients']
    patients: Union[bool, 'FindManypatientsArgsFromclients']


    

class allergiesIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromclientsRecursive1']


class allergiesIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromclientsRecursive2']


class allergiesIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromclientsRecursive3']


class allergiesIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromclientsRecursive4']


class allergiesIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class allergiesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyallergiesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    patients: Union[bool, 'patientsArgsFromclientsRecursive1']


class booster_shotsIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    patients: Union[bool, 'patientsArgsFromclientsRecursive2']


class booster_shotsIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    patients: Union[bool, 'patientsArgsFromclientsRecursive3']


class booster_shotsIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    patients: Union[bool, 'patientsArgsFromclientsRecursive4']


class booster_shotsIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class booster_shotsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManybooster_shotsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    earnings: Union[bool, 'FindManyearningsArgsFromclientsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromclientsRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromclientsRecursive1']


class clientsIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    earnings: Union[bool, 'FindManyearningsArgsFromclientsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromclientsRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromclientsRecursive2']


class clientsIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    earnings: Union[bool, 'FindManyearningsArgsFromclientsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromclientsRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromclientsRecursive3']


class clientsIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    earnings: Union[bool, 'FindManyearningsArgsFromclientsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromclientsRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromclientsRecursive4']


class clientsIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class clientsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyclientsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromclientsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromclientsRecursive1']


class earningsIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromclientsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromclientsRecursive2']


class earningsIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromclientsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromclientsRecursive3']


class earningsIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromclientsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromclientsRecursive4']


class earningsIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class earningsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyearningsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive1']
    patients: Union[bool, 'patientsArgsFromclientsRecursive1']
    users: Union[bool, 'usersArgsFromclientsRecursive1']


class eventsIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive2']
    patients: Union[bool, 'patientsArgsFromclientsRecursive2']
    users: Union[bool, 'usersArgsFromclientsRecursive2']


class eventsIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive3']
    patients: Union[bool, 'patientsArgsFromclientsRecursive3']
    users: Union[bool, 'usersArgsFromclientsRecursive3']


class eventsIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive4']
    patients: Union[bool, 'patientsArgsFromclientsRecursive4']
    users: Union[bool, 'usersArgsFromclientsRecursive4']


class eventsIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class eventsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyeventsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromclientsRecursive1']


class expensesIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromclientsRecursive2']


class expensesIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromclientsRecursive3']


class expensesIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromclientsRecursive4']


class expensesIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class expensesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyexpensesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive1']
    earnings: Union[bool, 'earningsArgsFromclientsRecursive1']


class invoicesIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive2']
    earnings: Union[bool, 'earningsArgsFromclientsRecursive2']


class invoicesIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive3']
    earnings: Union[bool, 'earningsArgsFromclientsRecursive3']


class invoicesIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    clients: Union[bool, 'clientsArgsFromclientsRecursive4']
    earnings: Union[bool, 'earningsArgsFromclientsRecursive4']


class invoicesIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class invoicesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyinvoicesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    expense: Union[bool, 'expensesArgsFromclientsRecursive1']
    product: Union[bool, 'productsArgsFromclientsRecursive1']


class items_boughtIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    expense: Union[bool, 'expensesArgsFromclientsRecursive2']
    product: Union[bool, 'productsArgsFromclientsRecursive2']


class items_boughtIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    expense: Union[bool, 'expensesArgsFromclientsRecursive3']
    product: Union[bool, 'productsArgsFromclientsRecursive3']


class items_boughtIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    expense: Union[bool, 'expensesArgsFromclientsRecursive4']
    product: Union[bool, 'productsArgsFromclientsRecursive4']


class items_boughtIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class items_boughtArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyitems_boughtArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    earning: Union[bool, 'earningsArgsFromclientsRecursive1']
    product: Union[bool, 'productsArgsFromclientsRecursive1']


class items_soldIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    earning: Union[bool, 'earningsArgsFromclientsRecursive2']
    product: Union[bool, 'productsArgsFromclientsRecursive2']


class items_soldIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    earning: Union[bool, 'earningsArgsFromclientsRecursive3']
    product: Union[bool, 'productsArgsFromclientsRecursive3']


class items_soldIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    earning: Union[bool, 'earningsArgsFromclientsRecursive4']
    product: Union[bool, 'productsArgsFromclientsRecursive4']


class items_soldIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class items_soldArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyitems_soldArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromclientsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive1']
    clients: Union[bool, 'clientsArgsFromclientsRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromclientsRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromclientsRecursive1']


class patientsIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromclientsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive2']
    clients: Union[bool, 'clientsArgsFromclientsRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromclientsRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromclientsRecursive2']


class patientsIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromclientsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive3']
    clients: Union[bool, 'clientsArgsFromclientsRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromclientsRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromclientsRecursive3']


class patientsIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromclientsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive4']
    clients: Union[bool, 'clientsArgsFromclientsRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromclientsRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromclientsRecursive4']


class patientsIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class patientsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManypatientsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    allergies: Union[bool, 'allergiesArgsFromclientsRecursive1']
    patients: Union[bool, 'patientsArgsFromclientsRecursive1']


class patients_allergiesIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    allergies: Union[bool, 'allergiesArgsFromclientsRecursive2']
    patients: Union[bool, 'patientsArgsFromclientsRecursive2']


class patients_allergiesIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    allergies: Union[bool, 'allergiesArgsFromclientsRecursive3']
    patients: Union[bool, 'patientsArgsFromclientsRecursive3']


class patients_allergiesIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    allergies: Union[bool, 'allergiesArgsFromclientsRecursive4']
    patients: Union[bool, 'patientsArgsFromclientsRecursive4']


class patients_allergiesIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class patients_allergiesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManypatients_allergiesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    patients: Union[bool, 'patientsArgsFromclientsRecursive1']


class prescriptionsIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    patients: Union[bool, 'patientsArgsFromclientsRecursive2']


class prescriptionsIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    patients: Union[bool, 'patientsArgsFromclientsRecursive3']


class prescriptionsIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    patients: Union[bool, 'patientsArgsFromclientsRecursive4']


class prescriptionsIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class prescriptionsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyprescriptionsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    products: Union[bool, 'FindManyproductsArgsFromclientsRecursive1']


class product_typesIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    products: Union[bool, 'FindManyproductsArgsFromclientsRecursive2']


class product_typesIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    products: Union[bool, 'FindManyproductsArgsFromclientsRecursive3']


class product_typesIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    products: Union[bool, 'FindManyproductsArgsFromclientsRecursive4']


class product_typesIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class product_typesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyproduct_typesArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    product_types: Union[bool, 'product_typesArgsFromclientsRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromclientsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromclientsRecursive1']


class productsIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    product_types: Union[bool, 'product_typesArgsFromclientsRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromclientsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromclientsRecursive2']


class productsIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    product_types: Union[bool, 'product_typesArgsFromclientsRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromclientsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromclientsRecursive3']


class productsIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    product_types: Union[bool, 'product_typesArgsFromclientsRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromclientsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromclientsRecursive4']


class productsIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class productsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyproductsArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromclients(TypedDict, total=False):
    """Relational arguments for clients"""
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive1']


class usersIncludeFromclientsRecursive1(TypedDict, total=False):
    """Relational arguments for clients"""
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive2']


class usersIncludeFromclientsRecursive2(TypedDict, total=False):
    """Relational arguments for clients"""
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive3']


class usersIncludeFromclientsRecursive3(TypedDict, total=False):
    """Relational arguments for clients"""
    events: Union[bool, 'FindManyeventsArgsFromclientsRecursive4']


class usersIncludeFromclientsRecursive4(TypedDict, total=False):
    """Relational arguments for clients"""

    

class usersArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    
    

class FindManyusersArgsFromclients(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromclientsRecursive1(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromclientsRecursive2(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromclientsRecursive3(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromclientsRecursive4(TypedDict, total=False):
    """Arguments for clients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyclientsArgs = FindManyclientsArgsFromclients
FindFirstclientsArgs = FindManyclientsArgsFromclients


    

class clientsWhereInput(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntFilter']
    lastname: Union[_str, 'types.StringFilter']
    firstname: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    zipcode: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    earnings: 'earningsListRelationFilter'
    events: 'eventsListRelationFilter'
    invoices: 'invoicesListRelationFilter'
    patients: 'patientsListRelationFilter'

    # should be noted that AND and NOT should be Union['clientsWhereInputRecursive1', List['clientsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['clientsWhereInputRecursive1']
    OR: List['clientsWhereInputRecursive1']
    NOT: List['clientsWhereInputRecursive1']


class clientsWhereInputRecursive1(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntFilter']
    lastname: Union[_str, 'types.StringFilter']
    firstname: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    zipcode: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    earnings: 'earningsListRelationFilter'
    events: 'eventsListRelationFilter'
    invoices: 'invoicesListRelationFilter'
    patients: 'patientsListRelationFilter'

    # should be noted that AND and NOT should be Union['clientsWhereInputRecursive2', List['clientsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['clientsWhereInputRecursive2']
    OR: List['clientsWhereInputRecursive2']
    NOT: List['clientsWhereInputRecursive2']


class clientsWhereInputRecursive2(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntFilter']
    lastname: Union[_str, 'types.StringFilter']
    firstname: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    zipcode: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    earnings: 'earningsListRelationFilter'
    events: 'eventsListRelationFilter'
    invoices: 'invoicesListRelationFilter'
    patients: 'patientsListRelationFilter'

    # should be noted that AND and NOT should be Union['clientsWhereInputRecursive3', List['clientsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['clientsWhereInputRecursive3']
    OR: List['clientsWhereInputRecursive3']
    NOT: List['clientsWhereInputRecursive3']


class clientsWhereInputRecursive3(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntFilter']
    lastname: Union[_str, 'types.StringFilter']
    firstname: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    zipcode: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    earnings: 'earningsListRelationFilter'
    events: 'eventsListRelationFilter'
    invoices: 'invoicesListRelationFilter'
    patients: 'patientsListRelationFilter'

    # should be noted that AND and NOT should be Union['clientsWhereInputRecursive4', List['clientsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['clientsWhereInputRecursive4']
    OR: List['clientsWhereInputRecursive4']
    NOT: List['clientsWhereInputRecursive4']


class clientsWhereInputRecursive4(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntFilter']
    lastname: Union[_str, 'types.StringFilter']
    firstname: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringFilter']
    email: Union[None, _str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    zipcode: Union[None, _str, 'types.StringFilter']
    city: Union[None, _str, 'types.StringFilter']
    earnings: 'earningsListRelationFilter'
    events: 'eventsListRelationFilter'
    invoices: 'invoicesListRelationFilter'
    patients: 'patientsListRelationFilter'



# aggregate clients types


    

class clientsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    lastname: Union[_str, 'types.StringWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    zipcode: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['clientsScalarWhereWithAggregatesInputRecursive1']
    OR: List['clientsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['clientsScalarWhereWithAggregatesInputRecursive1']


class clientsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    lastname: Union[_str, 'types.StringWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    zipcode: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['clientsScalarWhereWithAggregatesInputRecursive2']
    OR: List['clientsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['clientsScalarWhereWithAggregatesInputRecursive2']


class clientsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    lastname: Union[_str, 'types.StringWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    zipcode: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['clientsScalarWhereWithAggregatesInputRecursive3']
    OR: List['clientsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['clientsScalarWhereWithAggregatesInputRecursive3']


class clientsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    lastname: Union[_str, 'types.StringWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    zipcode: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['clientsScalarWhereWithAggregatesInputRecursive4']
    OR: List['clientsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['clientsScalarWhereWithAggregatesInputRecursive4']


class clientsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """clients arguments for searching"""
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    lastname: Union[_str, 'types.StringWithAggregatesFilter']
    firstname: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    phonenumber: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    zipcode: Union[_str, 'types.StringWithAggregatesFilter']
    city: Union[_str, 'types.StringWithAggregatesFilter']



class clientsGroupByOutput(TypedDict, total=False):
    clientid: _int
    lastname: _str
    firstname: _str
    gender: 'enums.genders'
    phonenumber: _str
    email: _str
    address: _str
    zipcode: _str
    city: _str
    _sum: 'clientsSumAggregateOutput'
    _avg: 'clientsAvgAggregateOutput'
    _min: 'clientsMinAggregateOutput'
    _max: 'clientsMaxAggregateOutput'
    _count: 'clientsCountAggregateOutput'


class clientsAvgAggregateOutput(TypedDict, total=False):
    """clients output for aggregating averages"""
    clientid: float


class clientsSumAggregateOutput(TypedDict, total=False):
    """clients output for aggregating sums"""
    clientid: _int


class clientsScalarAggregateOutput(TypedDict, total=False):
    """clients output including scalar fields"""
    clientid: _int
    lastname: _str
    firstname: _str
    gender: 'enums.genders'
    phonenumber: _str
    email: _str
    address: _str
    zipcode: _str
    city: _str


clientsMinAggregateOutput = clientsScalarAggregateOutput
clientsMaxAggregateOutput = clientsScalarAggregateOutput


class clientsMaxAggregateInput(TypedDict, total=False):
    """clients input for aggregating by max"""
    clientid: bool
    lastname: bool
    firstname: bool
    gender: bool
    phonenumber: bool
    email: bool
    address: bool
    zipcode: bool
    city: bool


class clientsMinAggregateInput(TypedDict, total=False):
    """clients input for aggregating by min"""
    clientid: bool
    lastname: bool
    firstname: bool
    gender: bool
    phonenumber: bool
    email: bool
    address: bool
    zipcode: bool
    city: bool


class clientsNumberAggregateInput(TypedDict, total=False):
    """clients input for aggregating numbers"""
    clientid: bool


clientsAvgAggregateInput = clientsNumberAggregateInput
clientsSumAggregateInput = clientsNumberAggregateInput


clientsCountAggregateInput = TypedDict(
    'clientsCountAggregateInput',
    {
        'clientid': bool,
        'lastname': bool,
        'firstname': bool,
        'gender': bool,
        'phonenumber': bool,
        'email': bool,
        'address': bool,
        'zipcode': bool,
        'city': bool,
        '_all': bool,
    },
    total=False,
)

clientsCountAggregateOutput = TypedDict(
    'clientsCountAggregateOutput',
    {
        'clientid': int,
        'lastname': int,
        'firstname': int,
        'gender': int,
        'phonenumber': int,
        'email': int,
        'address': int,
        'zipcode': int,
        'city': int,
        '_all': int,
    },
    total=False,
)


clientsKeys = Literal[
    'clientid',
    'lastname',
    'firstname',
    'gender',
    'phonenumber',
    'email',
    'address',
    'zipcode',
    'city',
    'earnings',
    'events',
    'invoices',
    'patients',
]
clientsScalarFieldKeys = Literal[
    'clientid',
    'lastname',
    'firstname',
    'gender',
    'phonenumber',
    'email',
    'address',
    'zipcode',
    'city',
]
clientsScalarFieldKeysT = TypeVar('clientsScalarFieldKeysT', bound=clientsScalarFieldKeys)

clientsRelationalFieldKeys = Literal[
        'earnings',
        'events',
        'invoices',
        'patients',
    ]

# earnings types

class earningsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the earnings create method"""
    earningid: _int
    description: Optional[_str]
    created_at: datetime.datetime
    paymentstatus: Optional['enums.payment']
    clientid: _int
    clients: 'clientsCreateNestedWithoutRelationsInput'
    invoices: 'invoicesCreateManyNestedWithoutRelationsInput'
    items_sold: 'items_soldCreateManyNestedWithoutRelationsInput'


class earningsCreateInput(earningsOptionalCreateInput):
    """Required arguments to the earnings create method"""
    amount: decimal.Decimal


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class earningsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the earnings create method, without relations"""
    earningid: _int
    description: Optional[_str]
    created_at: datetime.datetime
    paymentstatus: Optional['enums.payment']
    clientid: _int


class earningsCreateWithoutRelationsInput(earningsOptionalCreateWithoutRelationsInput):
    """Required arguments to the earnings create method, without relations"""
    amount: decimal.Decimal

class earningsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'earningsCreateWithoutRelationsInput'
    where: 'earningsWhereUniqueInput'

class earningsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'earningsCreateWithoutRelationsInput'
    connect: 'earningsWhereUniqueInput'
    connect_or_create: 'earningsConnectOrCreateWithoutRelationsInput'


class earningsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['earningsCreateWithoutRelationsInput', List['earningsCreateWithoutRelationsInput']]
    connect: Union['earningsWhereUniqueInput', List['earningsWhereUniqueInput']]
    connect_or_create: Union['earningsConnectOrCreateWithoutRelationsInput', List['earningsConnectOrCreateWithoutRelationsInput']]

_earningsWhereUnique_earningid_Input = TypedDict(
    '_earningsWhereUnique_earningid_Input',
    {
        'earningid': '_int',
    },
    total=True
)

earningsWhereUniqueInput = _earningsWhereUnique_earningid_Input


class earningsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    earningid: Union[AtomicIntInput, _int]
    amount: decimal.Decimal
    description: Optional[_str]
    created_at: datetime.datetime
    paymentstatus: Optional['enums.payment']
    clients: 'clientsUpdateOneWithoutRelationsInput'
    invoices: 'invoicesUpdateManyWithoutRelationsInput'
    items_sold: 'items_soldUpdateManyWithoutRelationsInput'


class earningsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    earningid: Union[AtomicIntInput, _int]
    amount: decimal.Decimal
    description: Optional[_str]
    created_at: datetime.datetime
    paymentstatus: Optional['enums.payment']


class earningsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['earningsCreateWithoutRelationsInput']
    connect: List['earningsWhereUniqueInput']
    connect_or_create: List['earningsConnectOrCreateWithoutRelationsInput']
    set: List['earningsWhereUniqueInput']
    disconnect: List['earningsWhereUniqueInput']
    delete: List['earningsWhereUniqueInput']

    # TODO
    # update: List['earningsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['earningsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['earningsScalarWhereInput']
    # upsert: List['earningsUpserteWithWhereUniqueWithoutRelationsInput']


class earningsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'earningsCreateWithoutRelationsInput'
    connect: 'earningsWhereUniqueInput'
    connect_or_create: 'earningsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'earningsUpdateInput'
    # upsert: 'earningsUpsertWithoutRelationsInput'


class earningsUpsertInput(TypedDict):
    create: 'earningsCreateInput'
    update: 'earningsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_earnings_earningid_OrderByInput = TypedDict(
    '_earnings_earningid_OrderByInput',
    {
        'earningid': 'SortOrder',
    },
    total=True
)

_earnings_amount_OrderByInput = TypedDict(
    '_earnings_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_earnings_description_OrderByInput = TypedDict(
    '_earnings_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_earnings_created_at_OrderByInput = TypedDict(
    '_earnings_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_earnings_paymentstatus_OrderByInput = TypedDict(
    '_earnings_paymentstatus_OrderByInput',
    {
        'paymentstatus': 'SortOrder',
    },
    total=True
)

_earnings_clientid_OrderByInput = TypedDict(
    '_earnings_clientid_OrderByInput',
    {
        'clientid': 'SortOrder',
    },
    total=True
)

_earnings_RelevanceInner = TypedDict(
    '_earnings_RelevanceInner',
    {
        'fields': 'List[earningsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_earnings_RelevanceOrderByInput = TypedDict(
    '_earnings_RelevanceOrderByInput',
    {
        '_relevance': '_earnings_RelevanceInner',
    },
    total=True
)

earningsOrderByInput = Union[
    '_earnings_earningid_OrderByInput',
    '_earnings_amount_OrderByInput',
    '_earnings_description_OrderByInput',
    '_earnings_created_at_OrderByInput',
    '_earnings_paymentstatus_OrderByInput',
    '_earnings_clientid_OrderByInput',
    '_earnings_RelevanceOrderByInput',
]



# recursive earnings types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

earningsRelationFilter = TypedDict(
    'earningsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class earningsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class earningsInclude(TypedDict, total=False):
    """earnings relational arguments"""
    clients: Union[bool, 'clientsArgsFromearnings']
    invoices: Union[bool, 'FindManyinvoicesArgsFromearnings']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromearnings']


    

class allergiesIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromearningsRecursive1']


class allergiesIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromearningsRecursive2']


class allergiesIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromearningsRecursive3']


class allergiesIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromearningsRecursive4']


class allergiesIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class allergiesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyallergiesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients: Union[bool, 'patientsArgsFromearningsRecursive1']


class booster_shotsIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients: Union[bool, 'patientsArgsFromearningsRecursive2']


class booster_shotsIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients: Union[bool, 'patientsArgsFromearningsRecursive3']


class booster_shotsIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients: Union[bool, 'patientsArgsFromearningsRecursive4']


class booster_shotsIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class booster_shotsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManybooster_shotsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    earnings: Union[bool, 'FindManyearningsArgsFromearningsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromearningsRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromearningsRecursive1']


class clientsIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    earnings: Union[bool, 'FindManyearningsArgsFromearningsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromearningsRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromearningsRecursive2']


class clientsIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    earnings: Union[bool, 'FindManyearningsArgsFromearningsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromearningsRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromearningsRecursive3']


class clientsIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    earnings: Union[bool, 'FindManyearningsArgsFromearningsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromearningsRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromearningsRecursive4']


class clientsIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class clientsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyclientsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromearningsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromearningsRecursive1']


class earningsIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromearningsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromearningsRecursive2']


class earningsIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromearningsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromearningsRecursive3']


class earningsIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromearningsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromearningsRecursive4']


class earningsIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class earningsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyearningsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive1']
    patients: Union[bool, 'patientsArgsFromearningsRecursive1']
    users: Union[bool, 'usersArgsFromearningsRecursive1']


class eventsIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive2']
    patients: Union[bool, 'patientsArgsFromearningsRecursive2']
    users: Union[bool, 'usersArgsFromearningsRecursive2']


class eventsIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive3']
    patients: Union[bool, 'patientsArgsFromearningsRecursive3']
    users: Union[bool, 'usersArgsFromearningsRecursive3']


class eventsIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive4']
    patients: Union[bool, 'patientsArgsFromearningsRecursive4']
    users: Union[bool, 'usersArgsFromearningsRecursive4']


class eventsIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class eventsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyeventsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromearningsRecursive1']


class expensesIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromearningsRecursive2']


class expensesIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromearningsRecursive3']


class expensesIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromearningsRecursive4']


class expensesIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class expensesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyexpensesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive1']
    earnings: Union[bool, 'earningsArgsFromearningsRecursive1']


class invoicesIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive2']
    earnings: Union[bool, 'earningsArgsFromearningsRecursive2']


class invoicesIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive3']
    earnings: Union[bool, 'earningsArgsFromearningsRecursive3']


class invoicesIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    clients: Union[bool, 'clientsArgsFromearningsRecursive4']
    earnings: Union[bool, 'earningsArgsFromearningsRecursive4']


class invoicesIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class invoicesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyinvoicesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    expense: Union[bool, 'expensesArgsFromearningsRecursive1']
    product: Union[bool, 'productsArgsFromearningsRecursive1']


class items_boughtIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    expense: Union[bool, 'expensesArgsFromearningsRecursive2']
    product: Union[bool, 'productsArgsFromearningsRecursive2']


class items_boughtIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    expense: Union[bool, 'expensesArgsFromearningsRecursive3']
    product: Union[bool, 'productsArgsFromearningsRecursive3']


class items_boughtIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    expense: Union[bool, 'expensesArgsFromearningsRecursive4']
    product: Union[bool, 'productsArgsFromearningsRecursive4']


class items_boughtIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class items_boughtArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyitems_boughtArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    earning: Union[bool, 'earningsArgsFromearningsRecursive1']
    product: Union[bool, 'productsArgsFromearningsRecursive1']


class items_soldIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    earning: Union[bool, 'earningsArgsFromearningsRecursive2']
    product: Union[bool, 'productsArgsFromearningsRecursive2']


class items_soldIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    earning: Union[bool, 'earningsArgsFromearningsRecursive3']
    product: Union[bool, 'productsArgsFromearningsRecursive3']


class items_soldIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    earning: Union[bool, 'earningsArgsFromearningsRecursive4']
    product: Union[bool, 'productsArgsFromearningsRecursive4']


class items_soldIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class items_soldArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyitems_soldArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromearningsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive1']
    clients: Union[bool, 'clientsArgsFromearningsRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromearningsRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromearningsRecursive1']


class patientsIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromearningsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive2']
    clients: Union[bool, 'clientsArgsFromearningsRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromearningsRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromearningsRecursive2']


class patientsIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromearningsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive3']
    clients: Union[bool, 'clientsArgsFromearningsRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromearningsRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromearningsRecursive3']


class patientsIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromearningsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive4']
    clients: Union[bool, 'clientsArgsFromearningsRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromearningsRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromearningsRecursive4']


class patientsIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class patientsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManypatientsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    allergies: Union[bool, 'allergiesArgsFromearningsRecursive1']
    patients: Union[bool, 'patientsArgsFromearningsRecursive1']


class patients_allergiesIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    allergies: Union[bool, 'allergiesArgsFromearningsRecursive2']
    patients: Union[bool, 'patientsArgsFromearningsRecursive2']


class patients_allergiesIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    allergies: Union[bool, 'allergiesArgsFromearningsRecursive3']
    patients: Union[bool, 'patientsArgsFromearningsRecursive3']


class patients_allergiesIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    allergies: Union[bool, 'allergiesArgsFromearningsRecursive4']
    patients: Union[bool, 'patientsArgsFromearningsRecursive4']


class patients_allergiesIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class patients_allergiesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManypatients_allergiesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients: Union[bool, 'patientsArgsFromearningsRecursive1']


class prescriptionsIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients: Union[bool, 'patientsArgsFromearningsRecursive2']


class prescriptionsIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients: Union[bool, 'patientsArgsFromearningsRecursive3']


class prescriptionsIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    patients: Union[bool, 'patientsArgsFromearningsRecursive4']


class prescriptionsIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class prescriptionsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyprescriptionsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    products: Union[bool, 'FindManyproductsArgsFromearningsRecursive1']


class product_typesIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    products: Union[bool, 'FindManyproductsArgsFromearningsRecursive2']


class product_typesIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    products: Union[bool, 'FindManyproductsArgsFromearningsRecursive3']


class product_typesIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    products: Union[bool, 'FindManyproductsArgsFromearningsRecursive4']


class product_typesIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class product_typesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyproduct_typesArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    product_types: Union[bool, 'product_typesArgsFromearningsRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromearningsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromearningsRecursive1']


class productsIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    product_types: Union[bool, 'product_typesArgsFromearningsRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromearningsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromearningsRecursive2']


class productsIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    product_types: Union[bool, 'product_typesArgsFromearningsRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromearningsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromearningsRecursive3']


class productsIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    product_types: Union[bool, 'product_typesArgsFromearningsRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromearningsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromearningsRecursive4']


class productsIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class productsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyproductsArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromearnings(TypedDict, total=False):
    """Relational arguments for earnings"""
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive1']


class usersIncludeFromearningsRecursive1(TypedDict, total=False):
    """Relational arguments for earnings"""
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive2']


class usersIncludeFromearningsRecursive2(TypedDict, total=False):
    """Relational arguments for earnings"""
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive3']


class usersIncludeFromearningsRecursive3(TypedDict, total=False):
    """Relational arguments for earnings"""
    events: Union[bool, 'FindManyeventsArgsFromearningsRecursive4']


class usersIncludeFromearningsRecursive4(TypedDict, total=False):
    """Relational arguments for earnings"""

    

class usersArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    
    

class FindManyusersArgsFromearnings(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromearningsRecursive1(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromearningsRecursive2(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromearningsRecursive3(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromearningsRecursive4(TypedDict, total=False):
    """Arguments for earnings"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyearningsArgs = FindManyearningsArgsFromearnings
FindFirstearningsArgs = FindManyearningsArgsFromearnings


    

class earningsWhereInput(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    invoices: 'invoicesListRelationFilter'
    items_sold: 'items_soldListRelationFilter'

    # should be noted that AND and NOT should be Union['earningsWhereInputRecursive1', List['earningsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['earningsWhereInputRecursive1']
    OR: List['earningsWhereInputRecursive1']
    NOT: List['earningsWhereInputRecursive1']


class earningsWhereInputRecursive1(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    invoices: 'invoicesListRelationFilter'
    items_sold: 'items_soldListRelationFilter'

    # should be noted that AND and NOT should be Union['earningsWhereInputRecursive2', List['earningsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['earningsWhereInputRecursive2']
    OR: List['earningsWhereInputRecursive2']
    NOT: List['earningsWhereInputRecursive2']


class earningsWhereInputRecursive2(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    invoices: 'invoicesListRelationFilter'
    items_sold: 'items_soldListRelationFilter'

    # should be noted that AND and NOT should be Union['earningsWhereInputRecursive3', List['earningsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['earningsWhereInputRecursive3']
    OR: List['earningsWhereInputRecursive3']
    NOT: List['earningsWhereInputRecursive3']


class earningsWhereInputRecursive3(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    invoices: 'invoicesListRelationFilter'
    items_sold: 'items_soldListRelationFilter'

    # should be noted that AND and NOT should be Union['earningsWhereInputRecursive4', List['earningsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['earningsWhereInputRecursive4']
    OR: List['earningsWhereInputRecursive4']
    NOT: List['earningsWhereInputRecursive4']


class earningsWhereInputRecursive4(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    invoices: 'invoicesListRelationFilter'
    items_sold: 'items_soldListRelationFilter'



# aggregate earnings types


    

class earningsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['earningsScalarWhereWithAggregatesInputRecursive1']
    OR: List['earningsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['earningsScalarWhereWithAggregatesInputRecursive1']


class earningsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['earningsScalarWhereWithAggregatesInputRecursive2']
    OR: List['earningsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['earningsScalarWhereWithAggregatesInputRecursive2']


class earningsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['earningsScalarWhereWithAggregatesInputRecursive3']
    OR: List['earningsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['earningsScalarWhereWithAggregatesInputRecursive3']


class earningsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['earningsScalarWhereWithAggregatesInputRecursive4']
    OR: List['earningsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['earningsScalarWhereWithAggregatesInputRecursive4']


class earningsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """earnings arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    paymentstatus: 'enums.payment'
    clientid: Union[_int, 'types.IntWithAggregatesFilter']



class earningsGroupByOutput(TypedDict, total=False):
    earningid: _int
    amount: decimal.Decimal
    description: _str
    created_at: datetime.datetime
    paymentstatus: 'enums.payment'
    clientid: _int
    _sum: 'earningsSumAggregateOutput'
    _avg: 'earningsAvgAggregateOutput'
    _min: 'earningsMinAggregateOutput'
    _max: 'earningsMaxAggregateOutput'
    _count: 'earningsCountAggregateOutput'


class earningsAvgAggregateOutput(TypedDict, total=False):
    """earnings output for aggregating averages"""
    earningid: float
    clientid: float


class earningsSumAggregateOutput(TypedDict, total=False):
    """earnings output for aggregating sums"""
    earningid: _int
    clientid: _int


class earningsScalarAggregateOutput(TypedDict, total=False):
    """earnings output including scalar fields"""
    earningid: _int
    amount: decimal.Decimal
    description: _str
    created_at: datetime.datetime
    paymentstatus: 'enums.payment'
    clientid: _int


earningsMinAggregateOutput = earningsScalarAggregateOutput
earningsMaxAggregateOutput = earningsScalarAggregateOutput


class earningsMaxAggregateInput(TypedDict, total=False):
    """earnings input for aggregating by max"""
    earningid: bool
    amount: bool
    description: bool
    created_at: bool
    paymentstatus: bool
    clientid: bool


class earningsMinAggregateInput(TypedDict, total=False):
    """earnings input for aggregating by min"""
    earningid: bool
    amount: bool
    description: bool
    created_at: bool
    paymentstatus: bool
    clientid: bool


class earningsNumberAggregateInput(TypedDict, total=False):
    """earnings input for aggregating numbers"""
    earningid: bool
    clientid: bool


earningsAvgAggregateInput = earningsNumberAggregateInput
earningsSumAggregateInput = earningsNumberAggregateInput


earningsCountAggregateInput = TypedDict(
    'earningsCountAggregateInput',
    {
        'earningid': bool,
        'amount': bool,
        'description': bool,
        'created_at': bool,
        'paymentstatus': bool,
        'clientid': bool,
        '_all': bool,
    },
    total=False,
)

earningsCountAggregateOutput = TypedDict(
    'earningsCountAggregateOutput',
    {
        'earningid': int,
        'amount': int,
        'description': int,
        'created_at': int,
        'paymentstatus': int,
        'clientid': int,
        '_all': int,
    },
    total=False,
)


earningsKeys = Literal[
    'earningid',
    'amount',
    'description',
    'created_at',
    'paymentstatus',
    'clientid',
    'clients',
    'invoices',
    'items_sold',
]
earningsScalarFieldKeys = Literal[
    'earningid',
    'amount',
    'description',
    'created_at',
    'paymentstatus',
    'clientid',
]
earningsScalarFieldKeysT = TypeVar('earningsScalarFieldKeysT', bound=earningsScalarFieldKeys)

earningsRelationalFieldKeys = Literal[
        'clients',
        'invoices',
        'items_sold',
    ]

# events types

class eventsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the events create method"""
    eventid: _int
    description: Optional[_str]
    userid: _int
    patientid: Optional[_int]
    clientid: Optional[_int]
    clients: 'clientsCreateNestedWithoutRelationsInput'
    patients: 'patientsCreateNestedWithoutRelationsInput'
    users: 'usersCreateNestedWithoutRelationsInput'


class eventsCreateInput(eventsOptionalCreateInput):
    """Required arguments to the events create method"""
    title: _str
    type: 'enums.event_type'
    eventdate: datetime.datetime
    starthour: datetime.datetime
    endhour: datetime.datetime
    status: 'enums.statuts'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class eventsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the events create method, without relations"""
    eventid: _int
    description: Optional[_str]
    userid: _int
    patientid: Optional[_int]
    clientid: Optional[_int]


class eventsCreateWithoutRelationsInput(eventsOptionalCreateWithoutRelationsInput):
    """Required arguments to the events create method, without relations"""
    title: _str
    type: 'enums.event_type'
    eventdate: datetime.datetime
    starthour: datetime.datetime
    endhour: datetime.datetime
    status: 'enums.statuts'

class eventsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'eventsCreateWithoutRelationsInput'
    where: 'eventsWhereUniqueInput'

class eventsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'eventsCreateWithoutRelationsInput'
    connect: 'eventsWhereUniqueInput'
    connect_or_create: 'eventsConnectOrCreateWithoutRelationsInput'


class eventsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['eventsCreateWithoutRelationsInput', List['eventsCreateWithoutRelationsInput']]
    connect: Union['eventsWhereUniqueInput', List['eventsWhereUniqueInput']]
    connect_or_create: Union['eventsConnectOrCreateWithoutRelationsInput', List['eventsConnectOrCreateWithoutRelationsInput']]

_eventsWhereUnique_eventid_Input = TypedDict(
    '_eventsWhereUnique_eventid_Input',
    {
        'eventid': '_int',
    },
    total=True
)

eventsWhereUniqueInput = _eventsWhereUnique_eventid_Input


class eventsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    eventid: Union[AtomicIntInput, _int]
    title: _str
    description: Optional[_str]
    type: 'enums.event_type'
    eventdate: datetime.datetime
    starthour: datetime.datetime
    endhour: datetime.datetime
    status: 'enums.statuts'
    clients: 'clientsUpdateOneWithoutRelationsInput'
    patients: 'patientsUpdateOneWithoutRelationsInput'
    users: 'usersUpdateOneWithoutRelationsInput'


class eventsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    eventid: Union[AtomicIntInput, _int]
    title: _str
    description: Optional[_str]
    type: 'enums.event_type'
    eventdate: datetime.datetime
    starthour: datetime.datetime
    endhour: datetime.datetime
    status: 'enums.statuts'


class eventsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['eventsCreateWithoutRelationsInput']
    connect: List['eventsWhereUniqueInput']
    connect_or_create: List['eventsConnectOrCreateWithoutRelationsInput']
    set: List['eventsWhereUniqueInput']
    disconnect: List['eventsWhereUniqueInput']
    delete: List['eventsWhereUniqueInput']

    # TODO
    # update: List['eventsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['eventsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['eventsScalarWhereInput']
    # upsert: List['eventsUpserteWithWhereUniqueWithoutRelationsInput']


class eventsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'eventsCreateWithoutRelationsInput'
    connect: 'eventsWhereUniqueInput'
    connect_or_create: 'eventsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'eventsUpdateInput'
    # upsert: 'eventsUpsertWithoutRelationsInput'


class eventsUpsertInput(TypedDict):
    create: 'eventsCreateInput'
    update: 'eventsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_events_eventid_OrderByInput = TypedDict(
    '_events_eventid_OrderByInput',
    {
        'eventid': 'SortOrder',
    },
    total=True
)

_events_title_OrderByInput = TypedDict(
    '_events_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_events_description_OrderByInput = TypedDict(
    '_events_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_events_type_OrderByInput = TypedDict(
    '_events_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_events_eventdate_OrderByInput = TypedDict(
    '_events_eventdate_OrderByInput',
    {
        'eventdate': 'SortOrder',
    },
    total=True
)

_events_starthour_OrderByInput = TypedDict(
    '_events_starthour_OrderByInput',
    {
        'starthour': 'SortOrder',
    },
    total=True
)

_events_endhour_OrderByInput = TypedDict(
    '_events_endhour_OrderByInput',
    {
        'endhour': 'SortOrder',
    },
    total=True
)

_events_status_OrderByInput = TypedDict(
    '_events_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_events_userid_OrderByInput = TypedDict(
    '_events_userid_OrderByInput',
    {
        'userid': 'SortOrder',
    },
    total=True
)

_events_patientid_OrderByInput = TypedDict(
    '_events_patientid_OrderByInput',
    {
        'patientid': 'SortOrder',
    },
    total=True
)

_events_clientid_OrderByInput = TypedDict(
    '_events_clientid_OrderByInput',
    {
        'clientid': 'SortOrder',
    },
    total=True
)

_events_RelevanceInner = TypedDict(
    '_events_RelevanceInner',
    {
        'fields': 'List[eventsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_events_RelevanceOrderByInput = TypedDict(
    '_events_RelevanceOrderByInput',
    {
        '_relevance': '_events_RelevanceInner',
    },
    total=True
)

eventsOrderByInput = Union[
    '_events_eventid_OrderByInput',
    '_events_title_OrderByInput',
    '_events_description_OrderByInput',
    '_events_type_OrderByInput',
    '_events_eventdate_OrderByInput',
    '_events_starthour_OrderByInput',
    '_events_endhour_OrderByInput',
    '_events_status_OrderByInput',
    '_events_userid_OrderByInput',
    '_events_patientid_OrderByInput',
    '_events_clientid_OrderByInput',
    '_events_RelevanceOrderByInput',
]



# recursive events types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

eventsRelationFilter = TypedDict(
    'eventsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class eventsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class eventsInclude(TypedDict, total=False):
    """events relational arguments"""
    clients: Union[bool, 'clientsArgsFromevents']
    patients: Union[bool, 'patientsArgsFromevents']
    users: Union[bool, 'usersArgsFromevents']


    

class allergiesIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromeventsRecursive1']


class allergiesIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromeventsRecursive2']


class allergiesIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromeventsRecursive3']


class allergiesIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromeventsRecursive4']


class allergiesIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class allergiesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyallergiesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    patients: Union[bool, 'patientsArgsFromeventsRecursive1']


class booster_shotsIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    patients: Union[bool, 'patientsArgsFromeventsRecursive2']


class booster_shotsIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    patients: Union[bool, 'patientsArgsFromeventsRecursive3']


class booster_shotsIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    patients: Union[bool, 'patientsArgsFromeventsRecursive4']


class booster_shotsIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class booster_shotsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManybooster_shotsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    earnings: Union[bool, 'FindManyearningsArgsFromeventsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromeventsRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromeventsRecursive1']


class clientsIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    earnings: Union[bool, 'FindManyearningsArgsFromeventsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromeventsRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromeventsRecursive2']


class clientsIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    earnings: Union[bool, 'FindManyearningsArgsFromeventsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromeventsRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromeventsRecursive3']


class clientsIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    earnings: Union[bool, 'FindManyearningsArgsFromeventsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromeventsRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromeventsRecursive4']


class clientsIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class clientsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyclientsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromeventsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromeventsRecursive1']


class earningsIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromeventsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromeventsRecursive2']


class earningsIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromeventsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromeventsRecursive3']


class earningsIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromeventsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromeventsRecursive4']


class earningsIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class earningsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyearningsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive1']
    patients: Union[bool, 'patientsArgsFromeventsRecursive1']
    users: Union[bool, 'usersArgsFromeventsRecursive1']


class eventsIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive2']
    patients: Union[bool, 'patientsArgsFromeventsRecursive2']
    users: Union[bool, 'usersArgsFromeventsRecursive2']


class eventsIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive3']
    patients: Union[bool, 'patientsArgsFromeventsRecursive3']
    users: Union[bool, 'usersArgsFromeventsRecursive3']


class eventsIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive4']
    patients: Union[bool, 'patientsArgsFromeventsRecursive4']
    users: Union[bool, 'usersArgsFromeventsRecursive4']


class eventsIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class eventsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyeventsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromeventsRecursive1']


class expensesIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromeventsRecursive2']


class expensesIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromeventsRecursive3']


class expensesIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromeventsRecursive4']


class expensesIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class expensesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyexpensesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive1']
    earnings: Union[bool, 'earningsArgsFromeventsRecursive1']


class invoicesIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive2']
    earnings: Union[bool, 'earningsArgsFromeventsRecursive2']


class invoicesIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive3']
    earnings: Union[bool, 'earningsArgsFromeventsRecursive3']


class invoicesIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    clients: Union[bool, 'clientsArgsFromeventsRecursive4']
    earnings: Union[bool, 'earningsArgsFromeventsRecursive4']


class invoicesIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class invoicesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyinvoicesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    expense: Union[bool, 'expensesArgsFromeventsRecursive1']
    product: Union[bool, 'productsArgsFromeventsRecursive1']


class items_boughtIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    expense: Union[bool, 'expensesArgsFromeventsRecursive2']
    product: Union[bool, 'productsArgsFromeventsRecursive2']


class items_boughtIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    expense: Union[bool, 'expensesArgsFromeventsRecursive3']
    product: Union[bool, 'productsArgsFromeventsRecursive3']


class items_boughtIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    expense: Union[bool, 'expensesArgsFromeventsRecursive4']
    product: Union[bool, 'productsArgsFromeventsRecursive4']


class items_boughtIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class items_boughtArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyitems_boughtArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    earning: Union[bool, 'earningsArgsFromeventsRecursive1']
    product: Union[bool, 'productsArgsFromeventsRecursive1']


class items_soldIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    earning: Union[bool, 'earningsArgsFromeventsRecursive2']
    product: Union[bool, 'productsArgsFromeventsRecursive2']


class items_soldIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    earning: Union[bool, 'earningsArgsFromeventsRecursive3']
    product: Union[bool, 'productsArgsFromeventsRecursive3']


class items_soldIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    earning: Union[bool, 'earningsArgsFromeventsRecursive4']
    product: Union[bool, 'productsArgsFromeventsRecursive4']


class items_soldIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class items_soldArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyitems_soldArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromeventsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive1']
    clients: Union[bool, 'clientsArgsFromeventsRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromeventsRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromeventsRecursive1']


class patientsIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromeventsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive2']
    clients: Union[bool, 'clientsArgsFromeventsRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromeventsRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromeventsRecursive2']


class patientsIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromeventsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive3']
    clients: Union[bool, 'clientsArgsFromeventsRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromeventsRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromeventsRecursive3']


class patientsIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromeventsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive4']
    clients: Union[bool, 'clientsArgsFromeventsRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromeventsRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromeventsRecursive4']


class patientsIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class patientsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManypatientsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    allergies: Union[bool, 'allergiesArgsFromeventsRecursive1']
    patients: Union[bool, 'patientsArgsFromeventsRecursive1']


class patients_allergiesIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    allergies: Union[bool, 'allergiesArgsFromeventsRecursive2']
    patients: Union[bool, 'patientsArgsFromeventsRecursive2']


class patients_allergiesIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    allergies: Union[bool, 'allergiesArgsFromeventsRecursive3']
    patients: Union[bool, 'patientsArgsFromeventsRecursive3']


class patients_allergiesIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    allergies: Union[bool, 'allergiesArgsFromeventsRecursive4']
    patients: Union[bool, 'patientsArgsFromeventsRecursive4']


class patients_allergiesIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class patients_allergiesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManypatients_allergiesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    patients: Union[bool, 'patientsArgsFromeventsRecursive1']


class prescriptionsIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    patients: Union[bool, 'patientsArgsFromeventsRecursive2']


class prescriptionsIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    patients: Union[bool, 'patientsArgsFromeventsRecursive3']


class prescriptionsIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    patients: Union[bool, 'patientsArgsFromeventsRecursive4']


class prescriptionsIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class prescriptionsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyprescriptionsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    products: Union[bool, 'FindManyproductsArgsFromeventsRecursive1']


class product_typesIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    products: Union[bool, 'FindManyproductsArgsFromeventsRecursive2']


class product_typesIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    products: Union[bool, 'FindManyproductsArgsFromeventsRecursive3']


class product_typesIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    products: Union[bool, 'FindManyproductsArgsFromeventsRecursive4']


class product_typesIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class product_typesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyproduct_typesArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    product_types: Union[bool, 'product_typesArgsFromeventsRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromeventsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromeventsRecursive1']


class productsIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    product_types: Union[bool, 'product_typesArgsFromeventsRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromeventsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromeventsRecursive2']


class productsIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    product_types: Union[bool, 'product_typesArgsFromeventsRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromeventsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromeventsRecursive3']


class productsIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    product_types: Union[bool, 'product_typesArgsFromeventsRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromeventsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromeventsRecursive4']


class productsIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class productsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyproductsArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromevents(TypedDict, total=False):
    """Relational arguments for events"""
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive1']


class usersIncludeFromeventsRecursive1(TypedDict, total=False):
    """Relational arguments for events"""
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive2']


class usersIncludeFromeventsRecursive2(TypedDict, total=False):
    """Relational arguments for events"""
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive3']


class usersIncludeFromeventsRecursive3(TypedDict, total=False):
    """Relational arguments for events"""
    events: Union[bool, 'FindManyeventsArgsFromeventsRecursive4']


class usersIncludeFromeventsRecursive4(TypedDict, total=False):
    """Relational arguments for events"""

    

class usersArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    
    

class FindManyusersArgsFromevents(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromeventsRecursive1(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromeventsRecursive2(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromeventsRecursive3(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromeventsRecursive4(TypedDict, total=False):
    """Arguments for events"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyeventsArgs = FindManyeventsArgsFromevents
FindFirsteventsArgs = FindManyeventsArgsFromevents


    

class eventsWhereInput(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntFilter']
    patientid: Union[None, _int, 'types.IntFilter']
    clientid: Union[None, _int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    patients: 'patientsRelationFilter'
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['eventsWhereInputRecursive1', List['eventsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['eventsWhereInputRecursive1']
    OR: List['eventsWhereInputRecursive1']
    NOT: List['eventsWhereInputRecursive1']


class eventsWhereInputRecursive1(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntFilter']
    patientid: Union[None, _int, 'types.IntFilter']
    clientid: Union[None, _int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    patients: 'patientsRelationFilter'
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['eventsWhereInputRecursive2', List['eventsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['eventsWhereInputRecursive2']
    OR: List['eventsWhereInputRecursive2']
    NOT: List['eventsWhereInputRecursive2']


class eventsWhereInputRecursive2(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntFilter']
    patientid: Union[None, _int, 'types.IntFilter']
    clientid: Union[None, _int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    patients: 'patientsRelationFilter'
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['eventsWhereInputRecursive3', List['eventsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['eventsWhereInputRecursive3']
    OR: List['eventsWhereInputRecursive3']
    NOT: List['eventsWhereInputRecursive3']


class eventsWhereInputRecursive3(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntFilter']
    patientid: Union[None, _int, 'types.IntFilter']
    clientid: Union[None, _int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    patients: 'patientsRelationFilter'
    users: 'usersRelationFilter'

    # should be noted that AND and NOT should be Union['eventsWhereInputRecursive4', List['eventsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['eventsWhereInputRecursive4']
    OR: List['eventsWhereInputRecursive4']
    NOT: List['eventsWhereInputRecursive4']


class eventsWhereInputRecursive4(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntFilter']
    title: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntFilter']
    patientid: Union[None, _int, 'types.IntFilter']
    clientid: Union[None, _int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    patients: 'patientsRelationFilter'
    users: 'usersRelationFilter'



# aggregate events types


    

class eventsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['eventsScalarWhereWithAggregatesInputRecursive1']
    OR: List['eventsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['eventsScalarWhereWithAggregatesInputRecursive1']


class eventsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['eventsScalarWhereWithAggregatesInputRecursive2']
    OR: List['eventsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['eventsScalarWhereWithAggregatesInputRecursive2']


class eventsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['eventsScalarWhereWithAggregatesInputRecursive3']
    OR: List['eventsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['eventsScalarWhereWithAggregatesInputRecursive3']


class eventsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['eventsScalarWhereWithAggregatesInputRecursive4']
    OR: List['eventsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['eventsScalarWhereWithAggregatesInputRecursive4']


class eventsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """events arguments for searching"""
    eventid: Union[_int, 'types.IntWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.event_type'
    eventdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    starthour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endhour: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    status: 'enums.statuts'
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']



class eventsGroupByOutput(TypedDict, total=False):
    eventid: _int
    title: _str
    description: _str
    type: 'enums.event_type'
    eventdate: datetime.datetime
    starthour: datetime.datetime
    endhour: datetime.datetime
    status: 'enums.statuts'
    userid: _int
    patientid: _int
    clientid: _int
    _sum: 'eventsSumAggregateOutput'
    _avg: 'eventsAvgAggregateOutput'
    _min: 'eventsMinAggregateOutput'
    _max: 'eventsMaxAggregateOutput'
    _count: 'eventsCountAggregateOutput'


class eventsAvgAggregateOutput(TypedDict, total=False):
    """events output for aggregating averages"""
    eventid: float
    userid: float
    patientid: float
    clientid: float


class eventsSumAggregateOutput(TypedDict, total=False):
    """events output for aggregating sums"""
    eventid: _int
    userid: _int
    patientid: _int
    clientid: _int


class eventsScalarAggregateOutput(TypedDict, total=False):
    """events output including scalar fields"""
    eventid: _int
    title: _str
    description: _str
    type: 'enums.event_type'
    eventdate: datetime.datetime
    starthour: datetime.datetime
    endhour: datetime.datetime
    status: 'enums.statuts'
    userid: _int
    patientid: _int
    clientid: _int


eventsMinAggregateOutput = eventsScalarAggregateOutput
eventsMaxAggregateOutput = eventsScalarAggregateOutput


class eventsMaxAggregateInput(TypedDict, total=False):
    """events input for aggregating by max"""
    eventid: bool
    title: bool
    description: bool
    type: bool
    eventdate: bool
    starthour: bool
    endhour: bool
    status: bool
    userid: bool
    patientid: bool
    clientid: bool


class eventsMinAggregateInput(TypedDict, total=False):
    """events input for aggregating by min"""
    eventid: bool
    title: bool
    description: bool
    type: bool
    eventdate: bool
    starthour: bool
    endhour: bool
    status: bool
    userid: bool
    patientid: bool
    clientid: bool


class eventsNumberAggregateInput(TypedDict, total=False):
    """events input for aggregating numbers"""
    eventid: bool
    userid: bool
    patientid: bool
    clientid: bool


eventsAvgAggregateInput = eventsNumberAggregateInput
eventsSumAggregateInput = eventsNumberAggregateInput


eventsCountAggregateInput = TypedDict(
    'eventsCountAggregateInput',
    {
        'eventid': bool,
        'title': bool,
        'description': bool,
        'type': bool,
        'eventdate': bool,
        'starthour': bool,
        'endhour': bool,
        'status': bool,
        'userid': bool,
        'patientid': bool,
        'clientid': bool,
        '_all': bool,
    },
    total=False,
)

eventsCountAggregateOutput = TypedDict(
    'eventsCountAggregateOutput',
    {
        'eventid': int,
        'title': int,
        'description': int,
        'type': int,
        'eventdate': int,
        'starthour': int,
        'endhour': int,
        'status': int,
        'userid': int,
        'patientid': int,
        'clientid': int,
        '_all': int,
    },
    total=False,
)


eventsKeys = Literal[
    'eventid',
    'title',
    'description',
    'type',
    'eventdate',
    'starthour',
    'endhour',
    'status',
    'userid',
    'patientid',
    'clientid',
    'clients',
    'patients',
    'users',
]
eventsScalarFieldKeys = Literal[
    'eventid',
    'title',
    'description',
    'type',
    'eventdate',
    'starthour',
    'endhour',
    'status',
    'userid',
    'patientid',
    'clientid',
]
eventsScalarFieldKeysT = TypeVar('eventsScalarFieldKeysT', bound=eventsScalarFieldKeys)

eventsRelationalFieldKeys = Literal[
        'clients',
        'patients',
        'users',
    ]

# expenses types

class expensesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the expenses create method"""
    expenseid: _int
    description: Optional[_str]
    created_at: datetime.datetime
    items_bought: 'items_boughtCreateManyNestedWithoutRelationsInput'


class expensesCreateInput(expensesOptionalCreateInput):
    """Required arguments to the expenses create method"""
    amount: decimal.Decimal


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class expensesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the expenses create method, without relations"""
    expenseid: _int
    description: Optional[_str]
    created_at: datetime.datetime


class expensesCreateWithoutRelationsInput(expensesOptionalCreateWithoutRelationsInput):
    """Required arguments to the expenses create method, without relations"""
    amount: decimal.Decimal

class expensesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'expensesCreateWithoutRelationsInput'
    where: 'expensesWhereUniqueInput'

class expensesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'expensesCreateWithoutRelationsInput'
    connect: 'expensesWhereUniqueInput'
    connect_or_create: 'expensesConnectOrCreateWithoutRelationsInput'


class expensesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['expensesCreateWithoutRelationsInput', List['expensesCreateWithoutRelationsInput']]
    connect: Union['expensesWhereUniqueInput', List['expensesWhereUniqueInput']]
    connect_or_create: Union['expensesConnectOrCreateWithoutRelationsInput', List['expensesConnectOrCreateWithoutRelationsInput']]

_expensesWhereUnique_expenseid_Input = TypedDict(
    '_expensesWhereUnique_expenseid_Input',
    {
        'expenseid': '_int',
    },
    total=True
)

expensesWhereUniqueInput = _expensesWhereUnique_expenseid_Input


class expensesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    expenseid: Union[AtomicIntInput, _int]
    amount: decimal.Decimal
    description: Optional[_str]
    created_at: datetime.datetime
    items_bought: 'items_boughtUpdateManyWithoutRelationsInput'


class expensesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    expenseid: Union[AtomicIntInput, _int]
    amount: decimal.Decimal
    description: Optional[_str]
    created_at: datetime.datetime


class expensesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['expensesCreateWithoutRelationsInput']
    connect: List['expensesWhereUniqueInput']
    connect_or_create: List['expensesConnectOrCreateWithoutRelationsInput']
    set: List['expensesWhereUniqueInput']
    disconnect: List['expensesWhereUniqueInput']
    delete: List['expensesWhereUniqueInput']

    # TODO
    # update: List['expensesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['expensesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['expensesScalarWhereInput']
    # upsert: List['expensesUpserteWithWhereUniqueWithoutRelationsInput']


class expensesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'expensesCreateWithoutRelationsInput'
    connect: 'expensesWhereUniqueInput'
    connect_or_create: 'expensesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'expensesUpdateInput'
    # upsert: 'expensesUpsertWithoutRelationsInput'


class expensesUpsertInput(TypedDict):
    create: 'expensesCreateInput'
    update: 'expensesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_expenses_expenseid_OrderByInput = TypedDict(
    '_expenses_expenseid_OrderByInput',
    {
        'expenseid': 'SortOrder',
    },
    total=True
)

_expenses_amount_OrderByInput = TypedDict(
    '_expenses_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_expenses_description_OrderByInput = TypedDict(
    '_expenses_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_expenses_created_at_OrderByInput = TypedDict(
    '_expenses_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_expenses_RelevanceInner = TypedDict(
    '_expenses_RelevanceInner',
    {
        'fields': 'List[expensesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_expenses_RelevanceOrderByInput = TypedDict(
    '_expenses_RelevanceOrderByInput',
    {
        '_relevance': '_expenses_RelevanceInner',
    },
    total=True
)

expensesOrderByInput = Union[
    '_expenses_expenseid_OrderByInput',
    '_expenses_amount_OrderByInput',
    '_expenses_description_OrderByInput',
    '_expenses_created_at_OrderByInput',
    '_expenses_RelevanceOrderByInput',
]



# recursive expenses types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

expensesRelationFilter = TypedDict(
    'expensesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class expensesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class expensesInclude(TypedDict, total=False):
    """expenses relational arguments"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromexpenses']


    

class allergiesIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromexpensesRecursive1']


class allergiesIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromexpensesRecursive2']


class allergiesIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromexpensesRecursive3']


class allergiesIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromexpensesRecursive4']


class allergiesIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class allergiesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyallergiesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients: Union[bool, 'patientsArgsFromexpensesRecursive1']


class booster_shotsIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients: Union[bool, 'patientsArgsFromexpensesRecursive2']


class booster_shotsIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients: Union[bool, 'patientsArgsFromexpensesRecursive3']


class booster_shotsIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients: Union[bool, 'patientsArgsFromexpensesRecursive4']


class booster_shotsIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class booster_shotsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManybooster_shotsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    earnings: Union[bool, 'FindManyearningsArgsFromexpensesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromexpensesRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromexpensesRecursive1']


class clientsIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    earnings: Union[bool, 'FindManyearningsArgsFromexpensesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromexpensesRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromexpensesRecursive2']


class clientsIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    earnings: Union[bool, 'FindManyearningsArgsFromexpensesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromexpensesRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromexpensesRecursive3']


class clientsIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    earnings: Union[bool, 'FindManyearningsArgsFromexpensesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromexpensesRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromexpensesRecursive4']


class clientsIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class clientsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyclientsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromexpensesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromexpensesRecursive1']


class earningsIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromexpensesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromexpensesRecursive2']


class earningsIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromexpensesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromexpensesRecursive3']


class earningsIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromexpensesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromexpensesRecursive4']


class earningsIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class earningsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyearningsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive1']
    patients: Union[bool, 'patientsArgsFromexpensesRecursive1']
    users: Union[bool, 'usersArgsFromexpensesRecursive1']


class eventsIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive2']
    patients: Union[bool, 'patientsArgsFromexpensesRecursive2']
    users: Union[bool, 'usersArgsFromexpensesRecursive2']


class eventsIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive3']
    patients: Union[bool, 'patientsArgsFromexpensesRecursive3']
    users: Union[bool, 'usersArgsFromexpensesRecursive3']


class eventsIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive4']
    patients: Union[bool, 'patientsArgsFromexpensesRecursive4']
    users: Union[bool, 'usersArgsFromexpensesRecursive4']


class eventsIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class eventsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyeventsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromexpensesRecursive1']


class expensesIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromexpensesRecursive2']


class expensesIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromexpensesRecursive3']


class expensesIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromexpensesRecursive4']


class expensesIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class expensesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyexpensesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive1']
    earnings: Union[bool, 'earningsArgsFromexpensesRecursive1']


class invoicesIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive2']
    earnings: Union[bool, 'earningsArgsFromexpensesRecursive2']


class invoicesIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive3']
    earnings: Union[bool, 'earningsArgsFromexpensesRecursive3']


class invoicesIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    clients: Union[bool, 'clientsArgsFromexpensesRecursive4']
    earnings: Union[bool, 'earningsArgsFromexpensesRecursive4']


class invoicesIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class invoicesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyinvoicesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    expense: Union[bool, 'expensesArgsFromexpensesRecursive1']
    product: Union[bool, 'productsArgsFromexpensesRecursive1']


class items_boughtIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    expense: Union[bool, 'expensesArgsFromexpensesRecursive2']
    product: Union[bool, 'productsArgsFromexpensesRecursive2']


class items_boughtIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    expense: Union[bool, 'expensesArgsFromexpensesRecursive3']
    product: Union[bool, 'productsArgsFromexpensesRecursive3']


class items_boughtIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    expense: Union[bool, 'expensesArgsFromexpensesRecursive4']
    product: Union[bool, 'productsArgsFromexpensesRecursive4']


class items_boughtIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class items_boughtArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyitems_boughtArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    earning: Union[bool, 'earningsArgsFromexpensesRecursive1']
    product: Union[bool, 'productsArgsFromexpensesRecursive1']


class items_soldIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    earning: Union[bool, 'earningsArgsFromexpensesRecursive2']
    product: Union[bool, 'productsArgsFromexpensesRecursive2']


class items_soldIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    earning: Union[bool, 'earningsArgsFromexpensesRecursive3']
    product: Union[bool, 'productsArgsFromexpensesRecursive3']


class items_soldIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    earning: Union[bool, 'earningsArgsFromexpensesRecursive4']
    product: Union[bool, 'productsArgsFromexpensesRecursive4']


class items_soldIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class items_soldArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyitems_soldArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromexpensesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive1']
    clients: Union[bool, 'clientsArgsFromexpensesRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromexpensesRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromexpensesRecursive1']


class patientsIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromexpensesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive2']
    clients: Union[bool, 'clientsArgsFromexpensesRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromexpensesRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromexpensesRecursive2']


class patientsIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromexpensesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive3']
    clients: Union[bool, 'clientsArgsFromexpensesRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromexpensesRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromexpensesRecursive3']


class patientsIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromexpensesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive4']
    clients: Union[bool, 'clientsArgsFromexpensesRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromexpensesRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromexpensesRecursive4']


class patientsIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class patientsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManypatientsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    allergies: Union[bool, 'allergiesArgsFromexpensesRecursive1']
    patients: Union[bool, 'patientsArgsFromexpensesRecursive1']


class patients_allergiesIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    allergies: Union[bool, 'allergiesArgsFromexpensesRecursive2']
    patients: Union[bool, 'patientsArgsFromexpensesRecursive2']


class patients_allergiesIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    allergies: Union[bool, 'allergiesArgsFromexpensesRecursive3']
    patients: Union[bool, 'patientsArgsFromexpensesRecursive3']


class patients_allergiesIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    allergies: Union[bool, 'allergiesArgsFromexpensesRecursive4']
    patients: Union[bool, 'patientsArgsFromexpensesRecursive4']


class patients_allergiesIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class patients_allergiesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManypatients_allergiesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients: Union[bool, 'patientsArgsFromexpensesRecursive1']


class prescriptionsIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients: Union[bool, 'patientsArgsFromexpensesRecursive2']


class prescriptionsIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients: Union[bool, 'patientsArgsFromexpensesRecursive3']


class prescriptionsIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    patients: Union[bool, 'patientsArgsFromexpensesRecursive4']


class prescriptionsIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class prescriptionsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyprescriptionsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    products: Union[bool, 'FindManyproductsArgsFromexpensesRecursive1']


class product_typesIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    products: Union[bool, 'FindManyproductsArgsFromexpensesRecursive2']


class product_typesIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    products: Union[bool, 'FindManyproductsArgsFromexpensesRecursive3']


class product_typesIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    products: Union[bool, 'FindManyproductsArgsFromexpensesRecursive4']


class product_typesIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class product_typesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyproduct_typesArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    product_types: Union[bool, 'product_typesArgsFromexpensesRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromexpensesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromexpensesRecursive1']


class productsIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    product_types: Union[bool, 'product_typesArgsFromexpensesRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromexpensesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromexpensesRecursive2']


class productsIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    product_types: Union[bool, 'product_typesArgsFromexpensesRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromexpensesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromexpensesRecursive3']


class productsIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    product_types: Union[bool, 'product_typesArgsFromexpensesRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromexpensesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromexpensesRecursive4']


class productsIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class productsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyproductsArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromexpenses(TypedDict, total=False):
    """Relational arguments for expenses"""
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive1']


class usersIncludeFromexpensesRecursive1(TypedDict, total=False):
    """Relational arguments for expenses"""
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive2']


class usersIncludeFromexpensesRecursive2(TypedDict, total=False):
    """Relational arguments for expenses"""
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive3']


class usersIncludeFromexpensesRecursive3(TypedDict, total=False):
    """Relational arguments for expenses"""
    events: Union[bool, 'FindManyeventsArgsFromexpensesRecursive4']


class usersIncludeFromexpensesRecursive4(TypedDict, total=False):
    """Relational arguments for expenses"""

    

class usersArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    
    

class FindManyusersArgsFromexpenses(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromexpensesRecursive1(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromexpensesRecursive2(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromexpensesRecursive3(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromexpensesRecursive4(TypedDict, total=False):
    """Arguments for expenses"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyexpensesArgs = FindManyexpensesArgsFromexpenses
FindFirstexpensesArgs = FindManyexpensesArgsFromexpenses


    

class expensesWhereInput(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    items_bought: 'items_boughtListRelationFilter'

    # should be noted that AND and NOT should be Union['expensesWhereInputRecursive1', List['expensesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['expensesWhereInputRecursive1']
    OR: List['expensesWhereInputRecursive1']
    NOT: List['expensesWhereInputRecursive1']


class expensesWhereInputRecursive1(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    items_bought: 'items_boughtListRelationFilter'

    # should be noted that AND and NOT should be Union['expensesWhereInputRecursive2', List['expensesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['expensesWhereInputRecursive2']
    OR: List['expensesWhereInputRecursive2']
    NOT: List['expensesWhereInputRecursive2']


class expensesWhereInputRecursive2(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    items_bought: 'items_boughtListRelationFilter'

    # should be noted that AND and NOT should be Union['expensesWhereInputRecursive3', List['expensesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['expensesWhereInputRecursive3']
    OR: List['expensesWhereInputRecursive3']
    NOT: List['expensesWhereInputRecursive3']


class expensesWhereInputRecursive3(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    items_bought: 'items_boughtListRelationFilter'

    # should be noted that AND and NOT should be Union['expensesWhereInputRecursive4', List['expensesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['expensesWhereInputRecursive4']
    OR: List['expensesWhereInputRecursive4']
    NOT: List['expensesWhereInputRecursive4']


class expensesWhereInputRecursive4(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    description: Union[None, _str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    items_bought: 'items_boughtListRelationFilter'



# aggregate expenses types


    

class expensesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['expensesScalarWhereWithAggregatesInputRecursive1']
    OR: List['expensesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['expensesScalarWhereWithAggregatesInputRecursive1']


class expensesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['expensesScalarWhereWithAggregatesInputRecursive2']
    OR: List['expensesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['expensesScalarWhereWithAggregatesInputRecursive2']


class expensesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['expensesScalarWhereWithAggregatesInputRecursive3']
    OR: List['expensesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['expensesScalarWhereWithAggregatesInputRecursive3']


class expensesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['expensesScalarWhereWithAggregatesInputRecursive4']
    OR: List['expensesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['expensesScalarWhereWithAggregatesInputRecursive4']


class expensesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """expenses arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class expensesGroupByOutput(TypedDict, total=False):
    expenseid: _int
    amount: decimal.Decimal
    description: _str
    created_at: datetime.datetime
    _sum: 'expensesSumAggregateOutput'
    _avg: 'expensesAvgAggregateOutput'
    _min: 'expensesMinAggregateOutput'
    _max: 'expensesMaxAggregateOutput'
    _count: 'expensesCountAggregateOutput'


class expensesAvgAggregateOutput(TypedDict, total=False):
    """expenses output for aggregating averages"""
    expenseid: float


class expensesSumAggregateOutput(TypedDict, total=False):
    """expenses output for aggregating sums"""
    expenseid: _int


class expensesScalarAggregateOutput(TypedDict, total=False):
    """expenses output including scalar fields"""
    expenseid: _int
    amount: decimal.Decimal
    description: _str
    created_at: datetime.datetime


expensesMinAggregateOutput = expensesScalarAggregateOutput
expensesMaxAggregateOutput = expensesScalarAggregateOutput


class expensesMaxAggregateInput(TypedDict, total=False):
    """expenses input for aggregating by max"""
    expenseid: bool
    amount: bool
    description: bool
    created_at: bool


class expensesMinAggregateInput(TypedDict, total=False):
    """expenses input for aggregating by min"""
    expenseid: bool
    amount: bool
    description: bool
    created_at: bool


class expensesNumberAggregateInput(TypedDict, total=False):
    """expenses input for aggregating numbers"""
    expenseid: bool


expensesAvgAggregateInput = expensesNumberAggregateInput
expensesSumAggregateInput = expensesNumberAggregateInput


expensesCountAggregateInput = TypedDict(
    'expensesCountAggregateInput',
    {
        'expenseid': bool,
        'amount': bool,
        'description': bool,
        'created_at': bool,
        '_all': bool,
    },
    total=False,
)

expensesCountAggregateOutput = TypedDict(
    'expensesCountAggregateOutput',
    {
        'expenseid': int,
        'amount': int,
        'description': int,
        'created_at': int,
        '_all': int,
    },
    total=False,
)


expensesKeys = Literal[
    'expenseid',
    'amount',
    'description',
    'created_at',
    'items_bought',
]
expensesScalarFieldKeys = Literal[
    'expenseid',
    'amount',
    'description',
    'created_at',
]
expensesScalarFieldKeysT = TypeVar('expensesScalarFieldKeysT', bound=expensesScalarFieldKeys)

expensesRelationalFieldKeys = Literal[
        'items_bought',
    ]

# invoices types

class invoicesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the invoices create method"""
    invoiceid: _int
    created_at: datetime.datetime
    clientid: _int
    earningid: _int
    clients: 'clientsCreateNestedWithoutRelationsInput'
    earnings: 'earningsCreateNestedWithoutRelationsInput'


class invoicesCreateInput(invoicesOptionalCreateInput):
    """Required arguments to the invoices create method"""
    amount: decimal.Decimal
    invoicelink: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class invoicesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the invoices create method, without relations"""
    invoiceid: _int
    created_at: datetime.datetime
    clientid: _int
    earningid: _int


class invoicesCreateWithoutRelationsInput(invoicesOptionalCreateWithoutRelationsInput):
    """Required arguments to the invoices create method, without relations"""
    amount: decimal.Decimal
    invoicelink: _str

class invoicesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'invoicesCreateWithoutRelationsInput'
    where: 'invoicesWhereUniqueInput'

class invoicesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'invoicesCreateWithoutRelationsInput'
    connect: 'invoicesWhereUniqueInput'
    connect_or_create: 'invoicesConnectOrCreateWithoutRelationsInput'


class invoicesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['invoicesCreateWithoutRelationsInput', List['invoicesCreateWithoutRelationsInput']]
    connect: Union['invoicesWhereUniqueInput', List['invoicesWhereUniqueInput']]
    connect_or_create: Union['invoicesConnectOrCreateWithoutRelationsInput', List['invoicesConnectOrCreateWithoutRelationsInput']]

_invoicesWhereUnique_invoiceid_Input = TypedDict(
    '_invoicesWhereUnique_invoiceid_Input',
    {
        'invoiceid': '_int',
    },
    total=True
)

invoicesWhereUniqueInput = _invoicesWhereUnique_invoiceid_Input


class invoicesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    invoiceid: Union[AtomicIntInput, _int]
    amount: decimal.Decimal
    invoicelink: _str
    created_at: datetime.datetime
    clients: 'clientsUpdateOneWithoutRelationsInput'
    earnings: 'earningsUpdateOneWithoutRelationsInput'


class invoicesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    invoiceid: Union[AtomicIntInput, _int]
    amount: decimal.Decimal
    invoicelink: _str
    created_at: datetime.datetime


class invoicesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['invoicesCreateWithoutRelationsInput']
    connect: List['invoicesWhereUniqueInput']
    connect_or_create: List['invoicesConnectOrCreateWithoutRelationsInput']
    set: List['invoicesWhereUniqueInput']
    disconnect: List['invoicesWhereUniqueInput']
    delete: List['invoicesWhereUniqueInput']

    # TODO
    # update: List['invoicesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['invoicesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['invoicesScalarWhereInput']
    # upsert: List['invoicesUpserteWithWhereUniqueWithoutRelationsInput']


class invoicesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'invoicesCreateWithoutRelationsInput'
    connect: 'invoicesWhereUniqueInput'
    connect_or_create: 'invoicesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'invoicesUpdateInput'
    # upsert: 'invoicesUpsertWithoutRelationsInput'


class invoicesUpsertInput(TypedDict):
    create: 'invoicesCreateInput'
    update: 'invoicesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_invoices_invoiceid_OrderByInput = TypedDict(
    '_invoices_invoiceid_OrderByInput',
    {
        'invoiceid': 'SortOrder',
    },
    total=True
)

_invoices_amount_OrderByInput = TypedDict(
    '_invoices_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_invoices_invoicelink_OrderByInput = TypedDict(
    '_invoices_invoicelink_OrderByInput',
    {
        'invoicelink': 'SortOrder',
    },
    total=True
)

_invoices_created_at_OrderByInput = TypedDict(
    '_invoices_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_invoices_clientid_OrderByInput = TypedDict(
    '_invoices_clientid_OrderByInput',
    {
        'clientid': 'SortOrder',
    },
    total=True
)

_invoices_earningid_OrderByInput = TypedDict(
    '_invoices_earningid_OrderByInput',
    {
        'earningid': 'SortOrder',
    },
    total=True
)

_invoices_RelevanceInner = TypedDict(
    '_invoices_RelevanceInner',
    {
        'fields': 'List[invoicesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_invoices_RelevanceOrderByInput = TypedDict(
    '_invoices_RelevanceOrderByInput',
    {
        '_relevance': '_invoices_RelevanceInner',
    },
    total=True
)

invoicesOrderByInput = Union[
    '_invoices_invoiceid_OrderByInput',
    '_invoices_amount_OrderByInput',
    '_invoices_invoicelink_OrderByInput',
    '_invoices_created_at_OrderByInput',
    '_invoices_clientid_OrderByInput',
    '_invoices_earningid_OrderByInput',
    '_invoices_RelevanceOrderByInput',
]



# recursive invoices types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

invoicesRelationFilter = TypedDict(
    'invoicesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class invoicesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class invoicesInclude(TypedDict, total=False):
    """invoices relational arguments"""
    clients: Union[bool, 'clientsArgsFrominvoices']
    earnings: Union[bool, 'earningsArgsFrominvoices']


    

class allergiesIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrominvoicesRecursive1']


class allergiesIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrominvoicesRecursive2']


class allergiesIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrominvoicesRecursive3']


class allergiesIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrominvoicesRecursive4']


class allergiesIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class allergiesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyallergiesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive1']


class booster_shotsIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive2']


class booster_shotsIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive3']


class booster_shotsIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive4']


class booster_shotsIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class booster_shotsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManybooster_shotsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    earnings: Union[bool, 'FindManyearningsArgsFrominvoicesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFrominvoicesRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFrominvoicesRecursive1']


class clientsIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    earnings: Union[bool, 'FindManyearningsArgsFrominvoicesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFrominvoicesRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFrominvoicesRecursive2']


class clientsIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    earnings: Union[bool, 'FindManyearningsArgsFrominvoicesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFrominvoicesRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFrominvoicesRecursive3']


class clientsIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    earnings: Union[bool, 'FindManyearningsArgsFrominvoicesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFrominvoicesRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFrominvoicesRecursive4']


class clientsIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class clientsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyclientsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFrominvoicesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrominvoicesRecursive1']


class earningsIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFrominvoicesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrominvoicesRecursive2']


class earningsIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFrominvoicesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrominvoicesRecursive3']


class earningsIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFrominvoicesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrominvoicesRecursive4']


class earningsIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class earningsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyearningsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive1']
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive1']
    users: Union[bool, 'usersArgsFrominvoicesRecursive1']


class eventsIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive2']
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive2']
    users: Union[bool, 'usersArgsFrominvoicesRecursive2']


class eventsIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive3']
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive3']
    users: Union[bool, 'usersArgsFrominvoicesRecursive3']


class eventsIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive4']
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive4']
    users: Union[bool, 'usersArgsFrominvoicesRecursive4']


class eventsIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class eventsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyeventsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrominvoicesRecursive1']


class expensesIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrominvoicesRecursive2']


class expensesIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrominvoicesRecursive3']


class expensesIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrominvoicesRecursive4']


class expensesIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class expensesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyexpensesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive1']
    earnings: Union[bool, 'earningsArgsFrominvoicesRecursive1']


class invoicesIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive2']
    earnings: Union[bool, 'earningsArgsFrominvoicesRecursive2']


class invoicesIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive3']
    earnings: Union[bool, 'earningsArgsFrominvoicesRecursive3']


class invoicesIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive4']
    earnings: Union[bool, 'earningsArgsFrominvoicesRecursive4']


class invoicesIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class invoicesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyinvoicesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    expense: Union[bool, 'expensesArgsFrominvoicesRecursive1']
    product: Union[bool, 'productsArgsFrominvoicesRecursive1']


class items_boughtIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    expense: Union[bool, 'expensesArgsFrominvoicesRecursive2']
    product: Union[bool, 'productsArgsFrominvoicesRecursive2']


class items_boughtIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    expense: Union[bool, 'expensesArgsFrominvoicesRecursive3']
    product: Union[bool, 'productsArgsFrominvoicesRecursive3']


class items_boughtIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    expense: Union[bool, 'expensesArgsFrominvoicesRecursive4']
    product: Union[bool, 'productsArgsFrominvoicesRecursive4']


class items_boughtIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class items_boughtArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyitems_boughtArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    earning: Union[bool, 'earningsArgsFrominvoicesRecursive1']
    product: Union[bool, 'productsArgsFrominvoicesRecursive1']


class items_soldIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    earning: Union[bool, 'earningsArgsFrominvoicesRecursive2']
    product: Union[bool, 'productsArgsFrominvoicesRecursive2']


class items_soldIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    earning: Union[bool, 'earningsArgsFrominvoicesRecursive3']
    product: Union[bool, 'productsArgsFrominvoicesRecursive3']


class items_soldIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    earning: Union[bool, 'earningsArgsFrominvoicesRecursive4']
    product: Union[bool, 'productsArgsFrominvoicesRecursive4']


class items_soldIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class items_soldArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyitems_soldArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrominvoicesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive1']
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrominvoicesRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrominvoicesRecursive1']


class patientsIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrominvoicesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive2']
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrominvoicesRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrominvoicesRecursive2']


class patientsIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrominvoicesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive3']
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrominvoicesRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrominvoicesRecursive3']


class patientsIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrominvoicesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive4']
    clients: Union[bool, 'clientsArgsFrominvoicesRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrominvoicesRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrominvoicesRecursive4']


class patientsIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class patientsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManypatientsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    allergies: Union[bool, 'allergiesArgsFrominvoicesRecursive1']
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive1']


class patients_allergiesIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    allergies: Union[bool, 'allergiesArgsFrominvoicesRecursive2']
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive2']


class patients_allergiesIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    allergies: Union[bool, 'allergiesArgsFrominvoicesRecursive3']
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive3']


class patients_allergiesIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    allergies: Union[bool, 'allergiesArgsFrominvoicesRecursive4']
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive4']


class patients_allergiesIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class patients_allergiesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManypatients_allergiesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive1']


class prescriptionsIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive2']


class prescriptionsIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive3']


class prescriptionsIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    patients: Union[bool, 'patientsArgsFrominvoicesRecursive4']


class prescriptionsIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class prescriptionsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyprescriptionsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    products: Union[bool, 'FindManyproductsArgsFrominvoicesRecursive1']


class product_typesIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    products: Union[bool, 'FindManyproductsArgsFrominvoicesRecursive2']


class product_typesIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    products: Union[bool, 'FindManyproductsArgsFrominvoicesRecursive3']


class product_typesIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    products: Union[bool, 'FindManyproductsArgsFrominvoicesRecursive4']


class product_typesIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class product_typesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyproduct_typesArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    product_types: Union[bool, 'product_typesArgsFrominvoicesRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrominvoicesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrominvoicesRecursive1']


class productsIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    product_types: Union[bool, 'product_typesArgsFrominvoicesRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrominvoicesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrominvoicesRecursive2']


class productsIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    product_types: Union[bool, 'product_typesArgsFrominvoicesRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrominvoicesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrominvoicesRecursive3']


class productsIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    product_types: Union[bool, 'product_typesArgsFrominvoicesRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrominvoicesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrominvoicesRecursive4']


class productsIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class productsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyproductsArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFrominvoices(TypedDict, total=False):
    """Relational arguments for invoices"""
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive1']


class usersIncludeFrominvoicesRecursive1(TypedDict, total=False):
    """Relational arguments for invoices"""
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive2']


class usersIncludeFrominvoicesRecursive2(TypedDict, total=False):
    """Relational arguments for invoices"""
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive3']


class usersIncludeFrominvoicesRecursive3(TypedDict, total=False):
    """Relational arguments for invoices"""
    events: Union[bool, 'FindManyeventsArgsFrominvoicesRecursive4']


class usersIncludeFrominvoicesRecursive4(TypedDict, total=False):
    """Relational arguments for invoices"""

    

class usersArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    
    

class FindManyusersArgsFrominvoices(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFrominvoicesRecursive1(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFrominvoicesRecursive2(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFrominvoicesRecursive3(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFrominvoicesRecursive4(TypedDict, total=False):
    """Arguments for invoices"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyinvoicesArgs = FindManyinvoicesArgsFrominvoices
FindFirstinvoicesArgs = FindManyinvoicesArgsFrominvoices


    

class invoicesWhereInput(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    invoicelink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    clientid: Union[_int, 'types.IntFilter']
    earningid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    earnings: 'earningsRelationFilter'

    # should be noted that AND and NOT should be Union['invoicesWhereInputRecursive1', List['invoicesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['invoicesWhereInputRecursive1']
    OR: List['invoicesWhereInputRecursive1']
    NOT: List['invoicesWhereInputRecursive1']


class invoicesWhereInputRecursive1(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    invoicelink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    clientid: Union[_int, 'types.IntFilter']
    earningid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    earnings: 'earningsRelationFilter'

    # should be noted that AND and NOT should be Union['invoicesWhereInputRecursive2', List['invoicesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['invoicesWhereInputRecursive2']
    OR: List['invoicesWhereInputRecursive2']
    NOT: List['invoicesWhereInputRecursive2']


class invoicesWhereInputRecursive2(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    invoicelink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    clientid: Union[_int, 'types.IntFilter']
    earningid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    earnings: 'earningsRelationFilter'

    # should be noted that AND and NOT should be Union['invoicesWhereInputRecursive3', List['invoicesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['invoicesWhereInputRecursive3']
    OR: List['invoicesWhereInputRecursive3']
    NOT: List['invoicesWhereInputRecursive3']


class invoicesWhereInputRecursive3(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    invoicelink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    clientid: Union[_int, 'types.IntFilter']
    earningid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    earnings: 'earningsRelationFilter'

    # should be noted that AND and NOT should be Union['invoicesWhereInputRecursive4', List['invoicesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['invoicesWhereInputRecursive4']
    OR: List['invoicesWhereInputRecursive4']
    NOT: List['invoicesWhereInputRecursive4']


class invoicesWhereInputRecursive4(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntFilter']
    amount: Union[decimal.Decimal, 'types.DecimalFilter']
    invoicelink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    clientid: Union[_int, 'types.IntFilter']
    earningid: Union[_int, 'types.IntFilter']
    clients: 'clientsRelationFilter'
    earnings: 'earningsRelationFilter'



# aggregate invoices types


    

class invoicesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    invoicelink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    earningid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['invoicesScalarWhereWithAggregatesInputRecursive1']
    OR: List['invoicesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['invoicesScalarWhereWithAggregatesInputRecursive1']


class invoicesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    invoicelink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    earningid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['invoicesScalarWhereWithAggregatesInputRecursive2']
    OR: List['invoicesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['invoicesScalarWhereWithAggregatesInputRecursive2']


class invoicesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    invoicelink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    earningid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['invoicesScalarWhereWithAggregatesInputRecursive3']
    OR: List['invoicesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['invoicesScalarWhereWithAggregatesInputRecursive3']


class invoicesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    invoicelink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    earningid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['invoicesScalarWhereWithAggregatesInputRecursive4']
    OR: List['invoicesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['invoicesScalarWhereWithAggregatesInputRecursive4']


class invoicesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """invoices arguments for searching"""
    invoiceid: Union[_int, 'types.IntWithAggregatesFilter']
    amount: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    invoicelink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']
    earningid: Union[_int, 'types.IntWithAggregatesFilter']



class invoicesGroupByOutput(TypedDict, total=False):
    invoiceid: _int
    amount: decimal.Decimal
    invoicelink: _str
    created_at: datetime.datetime
    clientid: _int
    earningid: _int
    _sum: 'invoicesSumAggregateOutput'
    _avg: 'invoicesAvgAggregateOutput'
    _min: 'invoicesMinAggregateOutput'
    _max: 'invoicesMaxAggregateOutput'
    _count: 'invoicesCountAggregateOutput'


class invoicesAvgAggregateOutput(TypedDict, total=False):
    """invoices output for aggregating averages"""
    invoiceid: float
    clientid: float
    earningid: float


class invoicesSumAggregateOutput(TypedDict, total=False):
    """invoices output for aggregating sums"""
    invoiceid: _int
    clientid: _int
    earningid: _int


class invoicesScalarAggregateOutput(TypedDict, total=False):
    """invoices output including scalar fields"""
    invoiceid: _int
    amount: decimal.Decimal
    invoicelink: _str
    created_at: datetime.datetime
    clientid: _int
    earningid: _int


invoicesMinAggregateOutput = invoicesScalarAggregateOutput
invoicesMaxAggregateOutput = invoicesScalarAggregateOutput


class invoicesMaxAggregateInput(TypedDict, total=False):
    """invoices input for aggregating by max"""
    invoiceid: bool
    amount: bool
    invoicelink: bool
    created_at: bool
    clientid: bool
    earningid: bool


class invoicesMinAggregateInput(TypedDict, total=False):
    """invoices input for aggregating by min"""
    invoiceid: bool
    amount: bool
    invoicelink: bool
    created_at: bool
    clientid: bool
    earningid: bool


class invoicesNumberAggregateInput(TypedDict, total=False):
    """invoices input for aggregating numbers"""
    invoiceid: bool
    clientid: bool
    earningid: bool


invoicesAvgAggregateInput = invoicesNumberAggregateInput
invoicesSumAggregateInput = invoicesNumberAggregateInput


invoicesCountAggregateInput = TypedDict(
    'invoicesCountAggregateInput',
    {
        'invoiceid': bool,
        'amount': bool,
        'invoicelink': bool,
        'created_at': bool,
        'clientid': bool,
        'earningid': bool,
        '_all': bool,
    },
    total=False,
)

invoicesCountAggregateOutput = TypedDict(
    'invoicesCountAggregateOutput',
    {
        'invoiceid': int,
        'amount': int,
        'invoicelink': int,
        'created_at': int,
        'clientid': int,
        'earningid': int,
        '_all': int,
    },
    total=False,
)


invoicesKeys = Literal[
    'invoiceid',
    'amount',
    'invoicelink',
    'created_at',
    'clientid',
    'earningid',
    'clients',
    'earnings',
]
invoicesScalarFieldKeys = Literal[
    'invoiceid',
    'amount',
    'invoicelink',
    'created_at',
    'clientid',
    'earningid',
]
invoicesScalarFieldKeysT = TypeVar('invoicesScalarFieldKeysT', bound=invoicesScalarFieldKeys)

invoicesRelationalFieldKeys = Literal[
        'clients',
        'earnings',
    ]

# items_bought types

class items_boughtOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the items_bought create method"""
    expenseid: _int
    productid: _int
    expense: 'expensesCreateNestedWithoutRelationsInput'
    product: 'productsCreateNestedWithoutRelationsInput'


class items_boughtCreateInput(items_boughtOptionalCreateInput):
    """Required arguments to the items_bought create method"""
    quantity: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class items_boughtOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the items_bought create method, without relations"""
    expenseid: _int
    productid: _int


class items_boughtCreateWithoutRelationsInput(items_boughtOptionalCreateWithoutRelationsInput):
    """Required arguments to the items_bought create method, without relations"""
    quantity: _int

class items_boughtConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'items_boughtCreateWithoutRelationsInput'
    where: 'items_boughtWhereUniqueInput'

class items_boughtCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'items_boughtCreateWithoutRelationsInput'
    connect: 'items_boughtWhereUniqueInput'
    connect_or_create: 'items_boughtConnectOrCreateWithoutRelationsInput'


class items_boughtCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['items_boughtCreateWithoutRelationsInput', List['items_boughtCreateWithoutRelationsInput']]
    connect: Union['items_boughtWhereUniqueInput', List['items_boughtWhereUniqueInput']]
    connect_or_create: Union['items_boughtConnectOrCreateWithoutRelationsInput', List['items_boughtConnectOrCreateWithoutRelationsInput']]

_items_boughtCompoundPrimaryKeyInner = TypedDict(
    '_items_boughtCompoundPrimaryKeyInner',
    {
        'expenseid': '_int',
        'productid': '_int',
    },
    total=True
)

_items_boughtCompoundPrimaryKey = TypedDict(
    '_items_boughtCompoundPrimaryKey',
    {
        'expenseid_productid': '_items_boughtCompoundPrimaryKeyInner',
    },
    total=True
)

items_boughtWhereUniqueInput = _items_boughtCompoundPrimaryKey


class items_boughtUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    quantity: Union[AtomicIntInput, _int]
    expense: 'expensesUpdateOneWithoutRelationsInput'
    product: 'productsUpdateOneWithoutRelationsInput'


class items_boughtUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    quantity: Union[AtomicIntInput, _int]


class items_boughtUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['items_boughtCreateWithoutRelationsInput']
    connect: List['items_boughtWhereUniqueInput']
    connect_or_create: List['items_boughtConnectOrCreateWithoutRelationsInput']
    set: List['items_boughtWhereUniqueInput']
    disconnect: List['items_boughtWhereUniqueInput']
    delete: List['items_boughtWhereUniqueInput']

    # TODO
    # update: List['items_boughtUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['items_boughtUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['items_boughtScalarWhereInput']
    # upsert: List['items_boughtUpserteWithWhereUniqueWithoutRelationsInput']


class items_boughtUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'items_boughtCreateWithoutRelationsInput'
    connect: 'items_boughtWhereUniqueInput'
    connect_or_create: 'items_boughtConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'items_boughtUpdateInput'
    # upsert: 'items_boughtUpsertWithoutRelationsInput'


class items_boughtUpsertInput(TypedDict):
    create: 'items_boughtCreateInput'
    update: 'items_boughtUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_items_bought_expenseid_OrderByInput = TypedDict(
    '_items_bought_expenseid_OrderByInput',
    {
        'expenseid': 'SortOrder',
    },
    total=True
)

_items_bought_productid_OrderByInput = TypedDict(
    '_items_bought_productid_OrderByInput',
    {
        'productid': 'SortOrder',
    },
    total=True
)

_items_bought_quantity_OrderByInput = TypedDict(
    '_items_bought_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

_items_bought_RelevanceInner = TypedDict(
    '_items_bought_RelevanceInner',
    {
        'fields': 'List[items_boughtScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_items_bought_RelevanceOrderByInput = TypedDict(
    '_items_bought_RelevanceOrderByInput',
    {
        '_relevance': '_items_bought_RelevanceInner',
    },
    total=True
)

items_boughtOrderByInput = Union[
    '_items_bought_expenseid_OrderByInput',
    '_items_bought_productid_OrderByInput',
    '_items_bought_quantity_OrderByInput',
    '_items_bought_RelevanceOrderByInput',
]



# recursive items_bought types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

items_boughtRelationFilter = TypedDict(
    'items_boughtRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class items_boughtListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class items_boughtInclude(TypedDict, total=False):
    """items_bought relational arguments"""
    expense: Union[bool, 'expensesArgsFromitems_bought']
    product: Union[bool, 'productsArgsFromitems_bought']


    

class allergiesIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_boughtRecursive1']


class allergiesIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_boughtRecursive2']


class allergiesIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_boughtRecursive3']


class allergiesIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_boughtRecursive4']


class allergiesIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class allergiesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyallergiesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive1']


class booster_shotsIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive2']


class booster_shotsIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive3']


class booster_shotsIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive4']


class booster_shotsIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class booster_shotsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManybooster_shotsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    earnings: Union[bool, 'FindManyearningsArgsFromitems_boughtRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_boughtRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromitems_boughtRecursive1']


class clientsIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    earnings: Union[bool, 'FindManyearningsArgsFromitems_boughtRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_boughtRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromitems_boughtRecursive2']


class clientsIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    earnings: Union[bool, 'FindManyearningsArgsFromitems_boughtRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_boughtRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromitems_boughtRecursive3']


class clientsIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    earnings: Union[bool, 'FindManyearningsArgsFromitems_boughtRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_boughtRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromitems_boughtRecursive4']


class clientsIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class clientsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyclientsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_boughtRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_boughtRecursive1']


class earningsIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_boughtRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_boughtRecursive2']


class earningsIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_boughtRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_boughtRecursive3']


class earningsIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_boughtRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_boughtRecursive4']


class earningsIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class earningsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyearningsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive1']
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive1']
    users: Union[bool, 'usersArgsFromitems_boughtRecursive1']


class eventsIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive2']
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive2']
    users: Union[bool, 'usersArgsFromitems_boughtRecursive2']


class eventsIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive3']
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive3']
    users: Union[bool, 'usersArgsFromitems_boughtRecursive3']


class eventsIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive4']
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive4']
    users: Union[bool, 'usersArgsFromitems_boughtRecursive4']


class eventsIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class eventsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyeventsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_boughtRecursive1']


class expensesIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_boughtRecursive2']


class expensesIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_boughtRecursive3']


class expensesIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_boughtRecursive4']


class expensesIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class expensesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyexpensesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive1']
    earnings: Union[bool, 'earningsArgsFromitems_boughtRecursive1']


class invoicesIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive2']
    earnings: Union[bool, 'earningsArgsFromitems_boughtRecursive2']


class invoicesIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive3']
    earnings: Union[bool, 'earningsArgsFromitems_boughtRecursive3']


class invoicesIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive4']
    earnings: Union[bool, 'earningsArgsFromitems_boughtRecursive4']


class invoicesIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class invoicesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyinvoicesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    expense: Union[bool, 'expensesArgsFromitems_boughtRecursive1']
    product: Union[bool, 'productsArgsFromitems_boughtRecursive1']


class items_boughtIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    expense: Union[bool, 'expensesArgsFromitems_boughtRecursive2']
    product: Union[bool, 'productsArgsFromitems_boughtRecursive2']


class items_boughtIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    expense: Union[bool, 'expensesArgsFromitems_boughtRecursive3']
    product: Union[bool, 'productsArgsFromitems_boughtRecursive3']


class items_boughtIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    expense: Union[bool, 'expensesArgsFromitems_boughtRecursive4']
    product: Union[bool, 'productsArgsFromitems_boughtRecursive4']


class items_boughtIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class items_boughtArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyitems_boughtArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    earning: Union[bool, 'earningsArgsFromitems_boughtRecursive1']
    product: Union[bool, 'productsArgsFromitems_boughtRecursive1']


class items_soldIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    earning: Union[bool, 'earningsArgsFromitems_boughtRecursive2']
    product: Union[bool, 'productsArgsFromitems_boughtRecursive2']


class items_soldIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    earning: Union[bool, 'earningsArgsFromitems_boughtRecursive3']
    product: Union[bool, 'productsArgsFromitems_boughtRecursive3']


class items_soldIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    earning: Union[bool, 'earningsArgsFromitems_boughtRecursive4']
    product: Union[bool, 'productsArgsFromitems_boughtRecursive4']


class items_soldIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class items_soldArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyitems_soldArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromitems_boughtRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive1']
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_boughtRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromitems_boughtRecursive1']


class patientsIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromitems_boughtRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive2']
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_boughtRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromitems_boughtRecursive2']


class patientsIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromitems_boughtRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive3']
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_boughtRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromitems_boughtRecursive3']


class patientsIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromitems_boughtRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive4']
    clients: Union[bool, 'clientsArgsFromitems_boughtRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_boughtRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromitems_boughtRecursive4']


class patientsIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class patientsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManypatientsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    allergies: Union[bool, 'allergiesArgsFromitems_boughtRecursive1']
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive1']


class patients_allergiesIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    allergies: Union[bool, 'allergiesArgsFromitems_boughtRecursive2']
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive2']


class patients_allergiesIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    allergies: Union[bool, 'allergiesArgsFromitems_boughtRecursive3']
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive3']


class patients_allergiesIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    allergies: Union[bool, 'allergiesArgsFromitems_boughtRecursive4']
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive4']


class patients_allergiesIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class patients_allergiesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManypatients_allergiesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive1']


class prescriptionsIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive2']


class prescriptionsIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive3']


class prescriptionsIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    patients: Union[bool, 'patientsArgsFromitems_boughtRecursive4']


class prescriptionsIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class prescriptionsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyprescriptionsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    products: Union[bool, 'FindManyproductsArgsFromitems_boughtRecursive1']


class product_typesIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    products: Union[bool, 'FindManyproductsArgsFromitems_boughtRecursive2']


class product_typesIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    products: Union[bool, 'FindManyproductsArgsFromitems_boughtRecursive3']


class product_typesIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    products: Union[bool, 'FindManyproductsArgsFromitems_boughtRecursive4']


class product_typesIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class product_typesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyproduct_typesArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    product_types: Union[bool, 'product_typesArgsFromitems_boughtRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_boughtRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_boughtRecursive1']


class productsIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    product_types: Union[bool, 'product_typesArgsFromitems_boughtRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_boughtRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_boughtRecursive2']


class productsIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    product_types: Union[bool, 'product_typesArgsFromitems_boughtRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_boughtRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_boughtRecursive3']


class productsIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    product_types: Union[bool, 'product_typesArgsFromitems_boughtRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_boughtRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_boughtRecursive4']


class productsIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class productsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyproductsArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromitems_bought(TypedDict, total=False):
    """Relational arguments for items_bought"""
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive1']


class usersIncludeFromitems_boughtRecursive1(TypedDict, total=False):
    """Relational arguments for items_bought"""
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive2']


class usersIncludeFromitems_boughtRecursive2(TypedDict, total=False):
    """Relational arguments for items_bought"""
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive3']


class usersIncludeFromitems_boughtRecursive3(TypedDict, total=False):
    """Relational arguments for items_bought"""
    events: Union[bool, 'FindManyeventsArgsFromitems_boughtRecursive4']


class usersIncludeFromitems_boughtRecursive4(TypedDict, total=False):
    """Relational arguments for items_bought"""

    

class usersArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    
    

class FindManyusersArgsFromitems_bought(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromitems_boughtRecursive1(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromitems_boughtRecursive2(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromitems_boughtRecursive3(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromitems_boughtRecursive4(TypedDict, total=False):
    """Arguments for items_bought"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyitems_boughtArgs = FindManyitems_boughtArgsFromitems_bought
FindFirstitems_boughtArgs = FindManyitems_boughtArgsFromitems_bought


    

class items_boughtWhereInput(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    expense: 'expensesRelationFilter'
    product: 'productsRelationFilter'

    # should be noted that AND and NOT should be Union['items_boughtWhereInputRecursive1', List['items_boughtWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['items_boughtWhereInputRecursive1']
    OR: List['items_boughtWhereInputRecursive1']
    NOT: List['items_boughtWhereInputRecursive1']


class items_boughtWhereInputRecursive1(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    expense: 'expensesRelationFilter'
    product: 'productsRelationFilter'

    # should be noted that AND and NOT should be Union['items_boughtWhereInputRecursive2', List['items_boughtWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['items_boughtWhereInputRecursive2']
    OR: List['items_boughtWhereInputRecursive2']
    NOT: List['items_boughtWhereInputRecursive2']


class items_boughtWhereInputRecursive2(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    expense: 'expensesRelationFilter'
    product: 'productsRelationFilter'

    # should be noted that AND and NOT should be Union['items_boughtWhereInputRecursive3', List['items_boughtWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['items_boughtWhereInputRecursive3']
    OR: List['items_boughtWhereInputRecursive3']
    NOT: List['items_boughtWhereInputRecursive3']


class items_boughtWhereInputRecursive3(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    expense: 'expensesRelationFilter'
    product: 'productsRelationFilter'

    # should be noted that AND and NOT should be Union['items_boughtWhereInputRecursive4', List['items_boughtWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['items_boughtWhereInputRecursive4']
    OR: List['items_boughtWhereInputRecursive4']
    NOT: List['items_boughtWhereInputRecursive4']


class items_boughtWhereInputRecursive4(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    expense: 'expensesRelationFilter'
    product: 'productsRelationFilter'



# aggregate items_bought types


    

class items_boughtScalarWhereWithAggregatesInput(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['items_boughtScalarWhereWithAggregatesInputRecursive1']
    OR: List['items_boughtScalarWhereWithAggregatesInputRecursive1']
    NOT: List['items_boughtScalarWhereWithAggregatesInputRecursive1']


class items_boughtScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['items_boughtScalarWhereWithAggregatesInputRecursive2']
    OR: List['items_boughtScalarWhereWithAggregatesInputRecursive2']
    NOT: List['items_boughtScalarWhereWithAggregatesInputRecursive2']


class items_boughtScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['items_boughtScalarWhereWithAggregatesInputRecursive3']
    OR: List['items_boughtScalarWhereWithAggregatesInputRecursive3']
    NOT: List['items_boughtScalarWhereWithAggregatesInputRecursive3']


class items_boughtScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['items_boughtScalarWhereWithAggregatesInputRecursive4']
    OR: List['items_boughtScalarWhereWithAggregatesInputRecursive4']
    NOT: List['items_boughtScalarWhereWithAggregatesInputRecursive4']


class items_boughtScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """items_bought arguments for searching"""
    expenseid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']



class items_boughtGroupByOutput(TypedDict, total=False):
    expenseid: _int
    productid: _int
    quantity: _int
    _sum: 'items_boughtSumAggregateOutput'
    _avg: 'items_boughtAvgAggregateOutput'
    _min: 'items_boughtMinAggregateOutput'
    _max: 'items_boughtMaxAggregateOutput'
    _count: 'items_boughtCountAggregateOutput'


class items_boughtAvgAggregateOutput(TypedDict, total=False):
    """items_bought output for aggregating averages"""
    expenseid: float
    productid: float
    quantity: float


class items_boughtSumAggregateOutput(TypedDict, total=False):
    """items_bought output for aggregating sums"""
    expenseid: _int
    productid: _int
    quantity: _int


class items_boughtScalarAggregateOutput(TypedDict, total=False):
    """items_bought output including scalar fields"""
    expenseid: _int
    productid: _int
    quantity: _int


items_boughtMinAggregateOutput = items_boughtScalarAggregateOutput
items_boughtMaxAggregateOutput = items_boughtScalarAggregateOutput


class items_boughtMaxAggregateInput(TypedDict, total=False):
    """items_bought input for aggregating by max"""
    expenseid: bool
    productid: bool
    quantity: bool


class items_boughtMinAggregateInput(TypedDict, total=False):
    """items_bought input for aggregating by min"""
    expenseid: bool
    productid: bool
    quantity: bool


class items_boughtNumberAggregateInput(TypedDict, total=False):
    """items_bought input for aggregating numbers"""
    expenseid: bool
    productid: bool
    quantity: bool


items_boughtAvgAggregateInput = items_boughtNumberAggregateInput
items_boughtSumAggregateInput = items_boughtNumberAggregateInput


items_boughtCountAggregateInput = TypedDict(
    'items_boughtCountAggregateInput',
    {
        'expenseid': bool,
        'productid': bool,
        'quantity': bool,
        '_all': bool,
    },
    total=False,
)

items_boughtCountAggregateOutput = TypedDict(
    'items_boughtCountAggregateOutput',
    {
        'expenseid': int,
        'productid': int,
        'quantity': int,
        '_all': int,
    },
    total=False,
)


items_boughtKeys = Literal[
    'expenseid',
    'productid',
    'quantity',
    'expense',
    'product',
]
items_boughtScalarFieldKeys = Literal[
    'expenseid',
    'productid',
    'quantity',
]
items_boughtScalarFieldKeysT = TypeVar('items_boughtScalarFieldKeysT', bound=items_boughtScalarFieldKeys)

items_boughtRelationalFieldKeys = Literal[
        'expense',
        'product',
    ]

# items_sold types

class items_soldOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the items_sold create method"""
    earningid: _int
    productid: _int
    earning: 'earningsCreateNestedWithoutRelationsInput'
    product: 'productsCreateNestedWithoutRelationsInput'


class items_soldCreateInput(items_soldOptionalCreateInput):
    """Required arguments to the items_sold create method"""
    quantity: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class items_soldOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the items_sold create method, without relations"""
    earningid: _int
    productid: _int


class items_soldCreateWithoutRelationsInput(items_soldOptionalCreateWithoutRelationsInput):
    """Required arguments to the items_sold create method, without relations"""
    quantity: _int

class items_soldConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'items_soldCreateWithoutRelationsInput'
    where: 'items_soldWhereUniqueInput'

class items_soldCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'items_soldCreateWithoutRelationsInput'
    connect: 'items_soldWhereUniqueInput'
    connect_or_create: 'items_soldConnectOrCreateWithoutRelationsInput'


class items_soldCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['items_soldCreateWithoutRelationsInput', List['items_soldCreateWithoutRelationsInput']]
    connect: Union['items_soldWhereUniqueInput', List['items_soldWhereUniqueInput']]
    connect_or_create: Union['items_soldConnectOrCreateWithoutRelationsInput', List['items_soldConnectOrCreateWithoutRelationsInput']]

_items_soldCompoundPrimaryKeyInner = TypedDict(
    '_items_soldCompoundPrimaryKeyInner',
    {
        'earningid': '_int',
        'productid': '_int',
    },
    total=True
)

_items_soldCompoundPrimaryKey = TypedDict(
    '_items_soldCompoundPrimaryKey',
    {
        'earningid_productid': '_items_soldCompoundPrimaryKeyInner',
    },
    total=True
)

items_soldWhereUniqueInput = _items_soldCompoundPrimaryKey


class items_soldUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    quantity: Union[AtomicIntInput, _int]
    earning: 'earningsUpdateOneWithoutRelationsInput'
    product: 'productsUpdateOneWithoutRelationsInput'


class items_soldUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    quantity: Union[AtomicIntInput, _int]


class items_soldUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['items_soldCreateWithoutRelationsInput']
    connect: List['items_soldWhereUniqueInput']
    connect_or_create: List['items_soldConnectOrCreateWithoutRelationsInput']
    set: List['items_soldWhereUniqueInput']
    disconnect: List['items_soldWhereUniqueInput']
    delete: List['items_soldWhereUniqueInput']

    # TODO
    # update: List['items_soldUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['items_soldUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['items_soldScalarWhereInput']
    # upsert: List['items_soldUpserteWithWhereUniqueWithoutRelationsInput']


class items_soldUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'items_soldCreateWithoutRelationsInput'
    connect: 'items_soldWhereUniqueInput'
    connect_or_create: 'items_soldConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'items_soldUpdateInput'
    # upsert: 'items_soldUpsertWithoutRelationsInput'


class items_soldUpsertInput(TypedDict):
    create: 'items_soldCreateInput'
    update: 'items_soldUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_items_sold_earningid_OrderByInput = TypedDict(
    '_items_sold_earningid_OrderByInput',
    {
        'earningid': 'SortOrder',
    },
    total=True
)

_items_sold_productid_OrderByInput = TypedDict(
    '_items_sold_productid_OrderByInput',
    {
        'productid': 'SortOrder',
    },
    total=True
)

_items_sold_quantity_OrderByInput = TypedDict(
    '_items_sold_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

_items_sold_RelevanceInner = TypedDict(
    '_items_sold_RelevanceInner',
    {
        'fields': 'List[items_soldScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_items_sold_RelevanceOrderByInput = TypedDict(
    '_items_sold_RelevanceOrderByInput',
    {
        '_relevance': '_items_sold_RelevanceInner',
    },
    total=True
)

items_soldOrderByInput = Union[
    '_items_sold_earningid_OrderByInput',
    '_items_sold_productid_OrderByInput',
    '_items_sold_quantity_OrderByInput',
    '_items_sold_RelevanceOrderByInput',
]



# recursive items_sold types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

items_soldRelationFilter = TypedDict(
    'items_soldRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class items_soldListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class items_soldInclude(TypedDict, total=False):
    """items_sold relational arguments"""
    earning: Union[bool, 'earningsArgsFromitems_sold']
    product: Union[bool, 'productsArgsFromitems_sold']


    

class allergiesIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_soldRecursive1']


class allergiesIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_soldRecursive2']


class allergiesIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_soldRecursive3']


class allergiesIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_soldRecursive4']


class allergiesIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class allergiesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyallergiesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive1']


class booster_shotsIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive2']


class booster_shotsIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive3']


class booster_shotsIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive4']


class booster_shotsIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class booster_shotsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManybooster_shotsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    earnings: Union[bool, 'FindManyearningsArgsFromitems_soldRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_soldRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromitems_soldRecursive1']


class clientsIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    earnings: Union[bool, 'FindManyearningsArgsFromitems_soldRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_soldRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromitems_soldRecursive2']


class clientsIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    earnings: Union[bool, 'FindManyearningsArgsFromitems_soldRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_soldRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromitems_soldRecursive3']


class clientsIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    earnings: Union[bool, 'FindManyearningsArgsFromitems_soldRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_soldRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromitems_soldRecursive4']


class clientsIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class clientsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyclientsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_soldRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_soldRecursive1']


class earningsIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_soldRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_soldRecursive2']


class earningsIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_soldRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_soldRecursive3']


class earningsIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromitems_soldRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_soldRecursive4']


class earningsIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class earningsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyearningsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive1']
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive1']
    users: Union[bool, 'usersArgsFromitems_soldRecursive1']


class eventsIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive2']
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive2']
    users: Union[bool, 'usersArgsFromitems_soldRecursive2']


class eventsIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive3']
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive3']
    users: Union[bool, 'usersArgsFromitems_soldRecursive3']


class eventsIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive4']
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive4']
    users: Union[bool, 'usersArgsFromitems_soldRecursive4']


class eventsIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class eventsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyeventsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_soldRecursive1']


class expensesIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_soldRecursive2']


class expensesIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_soldRecursive3']


class expensesIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_soldRecursive4']


class expensesIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class expensesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyexpensesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive1']
    earnings: Union[bool, 'earningsArgsFromitems_soldRecursive1']


class invoicesIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive2']
    earnings: Union[bool, 'earningsArgsFromitems_soldRecursive2']


class invoicesIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive3']
    earnings: Union[bool, 'earningsArgsFromitems_soldRecursive3']


class invoicesIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive4']
    earnings: Union[bool, 'earningsArgsFromitems_soldRecursive4']


class invoicesIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class invoicesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyinvoicesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    expense: Union[bool, 'expensesArgsFromitems_soldRecursive1']
    product: Union[bool, 'productsArgsFromitems_soldRecursive1']


class items_boughtIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    expense: Union[bool, 'expensesArgsFromitems_soldRecursive2']
    product: Union[bool, 'productsArgsFromitems_soldRecursive2']


class items_boughtIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    expense: Union[bool, 'expensesArgsFromitems_soldRecursive3']
    product: Union[bool, 'productsArgsFromitems_soldRecursive3']


class items_boughtIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    expense: Union[bool, 'expensesArgsFromitems_soldRecursive4']
    product: Union[bool, 'productsArgsFromitems_soldRecursive4']


class items_boughtIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class items_boughtArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyitems_boughtArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    earning: Union[bool, 'earningsArgsFromitems_soldRecursive1']
    product: Union[bool, 'productsArgsFromitems_soldRecursive1']


class items_soldIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    earning: Union[bool, 'earningsArgsFromitems_soldRecursive2']
    product: Union[bool, 'productsArgsFromitems_soldRecursive2']


class items_soldIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    earning: Union[bool, 'earningsArgsFromitems_soldRecursive3']
    product: Union[bool, 'productsArgsFromitems_soldRecursive3']


class items_soldIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    earning: Union[bool, 'earningsArgsFromitems_soldRecursive4']
    product: Union[bool, 'productsArgsFromitems_soldRecursive4']


class items_soldIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class items_soldArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyitems_soldArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromitems_soldRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive1']
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_soldRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromitems_soldRecursive1']


class patientsIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromitems_soldRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive2']
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_soldRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromitems_soldRecursive2']


class patientsIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromitems_soldRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive3']
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_soldRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromitems_soldRecursive3']


class patientsIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromitems_soldRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive4']
    clients: Union[bool, 'clientsArgsFromitems_soldRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromitems_soldRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromitems_soldRecursive4']


class patientsIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class patientsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManypatientsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    allergies: Union[bool, 'allergiesArgsFromitems_soldRecursive1']
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive1']


class patients_allergiesIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    allergies: Union[bool, 'allergiesArgsFromitems_soldRecursive2']
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive2']


class patients_allergiesIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    allergies: Union[bool, 'allergiesArgsFromitems_soldRecursive3']
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive3']


class patients_allergiesIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    allergies: Union[bool, 'allergiesArgsFromitems_soldRecursive4']
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive4']


class patients_allergiesIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class patients_allergiesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManypatients_allergiesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive1']


class prescriptionsIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive2']


class prescriptionsIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive3']


class prescriptionsIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    patients: Union[bool, 'patientsArgsFromitems_soldRecursive4']


class prescriptionsIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class prescriptionsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyprescriptionsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    products: Union[bool, 'FindManyproductsArgsFromitems_soldRecursive1']


class product_typesIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    products: Union[bool, 'FindManyproductsArgsFromitems_soldRecursive2']


class product_typesIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    products: Union[bool, 'FindManyproductsArgsFromitems_soldRecursive3']


class product_typesIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    products: Union[bool, 'FindManyproductsArgsFromitems_soldRecursive4']


class product_typesIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class product_typesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyproduct_typesArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    product_types: Union[bool, 'product_typesArgsFromitems_soldRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_soldRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_soldRecursive1']


class productsIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    product_types: Union[bool, 'product_typesArgsFromitems_soldRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_soldRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_soldRecursive2']


class productsIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    product_types: Union[bool, 'product_typesArgsFromitems_soldRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_soldRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_soldRecursive3']


class productsIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    product_types: Union[bool, 'product_typesArgsFromitems_soldRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromitems_soldRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromitems_soldRecursive4']


class productsIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class productsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyproductsArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromitems_sold(TypedDict, total=False):
    """Relational arguments for items_sold"""
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive1']


class usersIncludeFromitems_soldRecursive1(TypedDict, total=False):
    """Relational arguments for items_sold"""
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive2']


class usersIncludeFromitems_soldRecursive2(TypedDict, total=False):
    """Relational arguments for items_sold"""
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive3']


class usersIncludeFromitems_soldRecursive3(TypedDict, total=False):
    """Relational arguments for items_sold"""
    events: Union[bool, 'FindManyeventsArgsFromitems_soldRecursive4']


class usersIncludeFromitems_soldRecursive4(TypedDict, total=False):
    """Relational arguments for items_sold"""

    

class usersArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    
    

class FindManyusersArgsFromitems_sold(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromitems_soldRecursive1(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromitems_soldRecursive2(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromitems_soldRecursive3(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromitems_soldRecursive4(TypedDict, total=False):
    """Arguments for items_sold"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyitems_soldArgs = FindManyitems_soldArgsFromitems_sold
FindFirstitems_soldArgs = FindManyitems_soldArgsFromitems_sold


    

class items_soldWhereInput(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    earning: 'earningsRelationFilter'
    product: 'productsRelationFilter'

    # should be noted that AND and NOT should be Union['items_soldWhereInputRecursive1', List['items_soldWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['items_soldWhereInputRecursive1']
    OR: List['items_soldWhereInputRecursive1']
    NOT: List['items_soldWhereInputRecursive1']


class items_soldWhereInputRecursive1(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    earning: 'earningsRelationFilter'
    product: 'productsRelationFilter'

    # should be noted that AND and NOT should be Union['items_soldWhereInputRecursive2', List['items_soldWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['items_soldWhereInputRecursive2']
    OR: List['items_soldWhereInputRecursive2']
    NOT: List['items_soldWhereInputRecursive2']


class items_soldWhereInputRecursive2(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    earning: 'earningsRelationFilter'
    product: 'productsRelationFilter'

    # should be noted that AND and NOT should be Union['items_soldWhereInputRecursive3', List['items_soldWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['items_soldWhereInputRecursive3']
    OR: List['items_soldWhereInputRecursive3']
    NOT: List['items_soldWhereInputRecursive3']


class items_soldWhereInputRecursive3(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    earning: 'earningsRelationFilter'
    product: 'productsRelationFilter'

    # should be noted that AND and NOT should be Union['items_soldWhereInputRecursive4', List['items_soldWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['items_soldWhereInputRecursive4']
    OR: List['items_soldWhereInputRecursive4']
    NOT: List['items_soldWhereInputRecursive4']


class items_soldWhereInputRecursive4(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntFilter']
    productid: Union[_int, 'types.IntFilter']
    quantity: Union[_int, 'types.IntFilter']
    earning: 'earningsRelationFilter'
    product: 'productsRelationFilter'



# aggregate items_sold types


    

class items_soldScalarWhereWithAggregatesInput(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['items_soldScalarWhereWithAggregatesInputRecursive1']
    OR: List['items_soldScalarWhereWithAggregatesInputRecursive1']
    NOT: List['items_soldScalarWhereWithAggregatesInputRecursive1']


class items_soldScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['items_soldScalarWhereWithAggregatesInputRecursive2']
    OR: List['items_soldScalarWhereWithAggregatesInputRecursive2']
    NOT: List['items_soldScalarWhereWithAggregatesInputRecursive2']


class items_soldScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['items_soldScalarWhereWithAggregatesInputRecursive3']
    OR: List['items_soldScalarWhereWithAggregatesInputRecursive3']
    NOT: List['items_soldScalarWhereWithAggregatesInputRecursive3']


class items_soldScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['items_soldScalarWhereWithAggregatesInputRecursive4']
    OR: List['items_soldScalarWhereWithAggregatesInputRecursive4']
    NOT: List['items_soldScalarWhereWithAggregatesInputRecursive4']


class items_soldScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """items_sold arguments for searching"""
    earningid: Union[_int, 'types.IntWithAggregatesFilter']
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']



class items_soldGroupByOutput(TypedDict, total=False):
    earningid: _int
    productid: _int
    quantity: _int
    _sum: 'items_soldSumAggregateOutput'
    _avg: 'items_soldAvgAggregateOutput'
    _min: 'items_soldMinAggregateOutput'
    _max: 'items_soldMaxAggregateOutput'
    _count: 'items_soldCountAggregateOutput'


class items_soldAvgAggregateOutput(TypedDict, total=False):
    """items_sold output for aggregating averages"""
    earningid: float
    productid: float
    quantity: float


class items_soldSumAggregateOutput(TypedDict, total=False):
    """items_sold output for aggregating sums"""
    earningid: _int
    productid: _int
    quantity: _int


class items_soldScalarAggregateOutput(TypedDict, total=False):
    """items_sold output including scalar fields"""
    earningid: _int
    productid: _int
    quantity: _int


items_soldMinAggregateOutput = items_soldScalarAggregateOutput
items_soldMaxAggregateOutput = items_soldScalarAggregateOutput


class items_soldMaxAggregateInput(TypedDict, total=False):
    """items_sold input for aggregating by max"""
    earningid: bool
    productid: bool
    quantity: bool


class items_soldMinAggregateInput(TypedDict, total=False):
    """items_sold input for aggregating by min"""
    earningid: bool
    productid: bool
    quantity: bool


class items_soldNumberAggregateInput(TypedDict, total=False):
    """items_sold input for aggregating numbers"""
    earningid: bool
    productid: bool
    quantity: bool


items_soldAvgAggregateInput = items_soldNumberAggregateInput
items_soldSumAggregateInput = items_soldNumberAggregateInput


items_soldCountAggregateInput = TypedDict(
    'items_soldCountAggregateInput',
    {
        'earningid': bool,
        'productid': bool,
        'quantity': bool,
        '_all': bool,
    },
    total=False,
)

items_soldCountAggregateOutput = TypedDict(
    'items_soldCountAggregateOutput',
    {
        'earningid': int,
        'productid': int,
        'quantity': int,
        '_all': int,
    },
    total=False,
)


items_soldKeys = Literal[
    'earningid',
    'productid',
    'quantity',
    'earning',
    'product',
]
items_soldScalarFieldKeys = Literal[
    'earningid',
    'productid',
    'quantity',
]
items_soldScalarFieldKeysT = TypeVar('items_soldScalarFieldKeysT', bound=items_soldScalarFieldKeys)

items_soldRelationalFieldKeys = Literal[
        'earning',
        'product',
    ]

# patients types

class patientsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the patients create method"""
    patientid: _int
    species: Optional[_str]
    birthdate: Optional[datetime.datetime]
    numberid: Optional[_int]
    color: Optional[_str]
    clientid: _int
    booster_shots: 'booster_shotsCreateManyNestedWithoutRelationsInput'
    events: 'eventsCreateManyNestedWithoutRelationsInput'
    clients: 'clientsCreateNestedWithoutRelationsInput'
    patients_allergies: 'patients_allergiesCreateManyNestedWithoutRelationsInput'
    prescriptions: 'prescriptionsCreateManyNestedWithoutRelationsInput'


class patientsCreateInput(patientsOptionalCreateInput):
    """Required arguments to the patients create method"""
    name: _str
    gender: 'enums.genders'
    type: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class patientsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the patients create method, without relations"""
    patientid: _int
    species: Optional[_str]
    birthdate: Optional[datetime.datetime]
    numberid: Optional[_int]
    color: Optional[_str]
    clientid: _int


class patientsCreateWithoutRelationsInput(patientsOptionalCreateWithoutRelationsInput):
    """Required arguments to the patients create method, without relations"""
    name: _str
    gender: 'enums.genders'
    type: _str

class patientsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'patientsCreateWithoutRelationsInput'
    where: 'patientsWhereUniqueInput'

class patientsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'patientsCreateWithoutRelationsInput'
    connect: 'patientsWhereUniqueInput'
    connect_or_create: 'patientsConnectOrCreateWithoutRelationsInput'


class patientsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['patientsCreateWithoutRelationsInput', List['patientsCreateWithoutRelationsInput']]
    connect: Union['patientsWhereUniqueInput', List['patientsWhereUniqueInput']]
    connect_or_create: Union['patientsConnectOrCreateWithoutRelationsInput', List['patientsConnectOrCreateWithoutRelationsInput']]

_patientsWhereUnique_patientid_Input = TypedDict(
    '_patientsWhereUnique_patientid_Input',
    {
        'patientid': '_int',
    },
    total=True
)

patientsWhereUniqueInput = _patientsWhereUnique_patientid_Input


class patientsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    patientid: Union[AtomicIntInput, _int]
    name: _str
    gender: 'enums.genders'
    type: _str
    species: Optional[_str]
    birthdate: Optional[datetime.datetime]
    numberid: Optional[Union[AtomicIntInput, _int]]
    color: Optional[_str]
    booster_shots: 'booster_shotsUpdateManyWithoutRelationsInput'
    events: 'eventsUpdateManyWithoutRelationsInput'
    clients: 'clientsUpdateOneWithoutRelationsInput'
    patients_allergies: 'patients_allergiesUpdateManyWithoutRelationsInput'
    prescriptions: 'prescriptionsUpdateManyWithoutRelationsInput'


class patientsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    patientid: Union[AtomicIntInput, _int]
    name: _str
    gender: 'enums.genders'
    type: _str
    species: Optional[_str]
    birthdate: Optional[datetime.datetime]
    numberid: Optional[Union[AtomicIntInput, _int]]
    color: Optional[_str]


class patientsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['patientsCreateWithoutRelationsInput']
    connect: List['patientsWhereUniqueInput']
    connect_or_create: List['patientsConnectOrCreateWithoutRelationsInput']
    set: List['patientsWhereUniqueInput']
    disconnect: List['patientsWhereUniqueInput']
    delete: List['patientsWhereUniqueInput']

    # TODO
    # update: List['patientsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['patientsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['patientsScalarWhereInput']
    # upsert: List['patientsUpserteWithWhereUniqueWithoutRelationsInput']


class patientsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'patientsCreateWithoutRelationsInput'
    connect: 'patientsWhereUniqueInput'
    connect_or_create: 'patientsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'patientsUpdateInput'
    # upsert: 'patientsUpsertWithoutRelationsInput'


class patientsUpsertInput(TypedDict):
    create: 'patientsCreateInput'
    update: 'patientsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_patients_patientid_OrderByInput = TypedDict(
    '_patients_patientid_OrderByInput',
    {
        'patientid': 'SortOrder',
    },
    total=True
)

_patients_name_OrderByInput = TypedDict(
    '_patients_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_patients_gender_OrderByInput = TypedDict(
    '_patients_gender_OrderByInput',
    {
        'gender': 'SortOrder',
    },
    total=True
)

_patients_type_OrderByInput = TypedDict(
    '_patients_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_patients_species_OrderByInput = TypedDict(
    '_patients_species_OrderByInput',
    {
        'species': 'SortOrder',
    },
    total=True
)

_patients_birthdate_OrderByInput = TypedDict(
    '_patients_birthdate_OrderByInput',
    {
        'birthdate': 'SortOrder',
    },
    total=True
)

_patients_numberid_OrderByInput = TypedDict(
    '_patients_numberid_OrderByInput',
    {
        'numberid': 'SortOrder',
    },
    total=True
)

_patients_color_OrderByInput = TypedDict(
    '_patients_color_OrderByInput',
    {
        'color': 'SortOrder',
    },
    total=True
)

_patients_clientid_OrderByInput = TypedDict(
    '_patients_clientid_OrderByInput',
    {
        'clientid': 'SortOrder',
    },
    total=True
)

_patients_RelevanceInner = TypedDict(
    '_patients_RelevanceInner',
    {
        'fields': 'List[patientsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_patients_RelevanceOrderByInput = TypedDict(
    '_patients_RelevanceOrderByInput',
    {
        '_relevance': '_patients_RelevanceInner',
    },
    total=True
)

patientsOrderByInput = Union[
    '_patients_patientid_OrderByInput',
    '_patients_name_OrderByInput',
    '_patients_gender_OrderByInput',
    '_patients_type_OrderByInput',
    '_patients_species_OrderByInput',
    '_patients_birthdate_OrderByInput',
    '_patients_numberid_OrderByInput',
    '_patients_color_OrderByInput',
    '_patients_clientid_OrderByInput',
    '_patients_RelevanceOrderByInput',
]



# recursive patients types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

patientsRelationFilter = TypedDict(
    'patientsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class patientsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class patientsInclude(TypedDict, total=False):
    """patients relational arguments"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrompatients']
    events: Union[bool, 'FindManyeventsArgsFrompatients']
    clients: Union[bool, 'clientsArgsFrompatients']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatients']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrompatients']


    

class allergiesIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatientsRecursive1']


class allergiesIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatientsRecursive2']


class allergiesIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatientsRecursive3']


class allergiesIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatientsRecursive4']


class allergiesIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class allergiesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyallergiesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    patients: Union[bool, 'patientsArgsFrompatientsRecursive1']


class booster_shotsIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    patients: Union[bool, 'patientsArgsFrompatientsRecursive2']


class booster_shotsIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    patients: Union[bool, 'patientsArgsFrompatientsRecursive3']


class booster_shotsIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    patients: Union[bool, 'patientsArgsFrompatientsRecursive4']


class booster_shotsIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class booster_shotsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManybooster_shotsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    earnings: Union[bool, 'FindManyearningsArgsFrompatientsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatientsRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFrompatientsRecursive1']


class clientsIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    earnings: Union[bool, 'FindManyearningsArgsFrompatientsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatientsRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFrompatientsRecursive2']


class clientsIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    earnings: Union[bool, 'FindManyearningsArgsFrompatientsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatientsRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFrompatientsRecursive3']


class clientsIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    earnings: Union[bool, 'FindManyearningsArgsFrompatientsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatientsRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFrompatientsRecursive4']


class clientsIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class clientsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyclientsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatientsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatientsRecursive1']


class earningsIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatientsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatientsRecursive2']


class earningsIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatientsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatientsRecursive3']


class earningsIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatientsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatientsRecursive4']


class earningsIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class earningsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyearningsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive1']
    patients: Union[bool, 'patientsArgsFrompatientsRecursive1']
    users: Union[bool, 'usersArgsFrompatientsRecursive1']


class eventsIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive2']
    patients: Union[bool, 'patientsArgsFrompatientsRecursive2']
    users: Union[bool, 'usersArgsFrompatientsRecursive2']


class eventsIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive3']
    patients: Union[bool, 'patientsArgsFrompatientsRecursive3']
    users: Union[bool, 'usersArgsFrompatientsRecursive3']


class eventsIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive4']
    patients: Union[bool, 'patientsArgsFrompatientsRecursive4']
    users: Union[bool, 'usersArgsFrompatientsRecursive4']


class eventsIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class eventsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyeventsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatientsRecursive1']


class expensesIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatientsRecursive2']


class expensesIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatientsRecursive3']


class expensesIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatientsRecursive4']


class expensesIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class expensesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyexpensesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive1']
    earnings: Union[bool, 'earningsArgsFrompatientsRecursive1']


class invoicesIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive2']
    earnings: Union[bool, 'earningsArgsFrompatientsRecursive2']


class invoicesIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive3']
    earnings: Union[bool, 'earningsArgsFrompatientsRecursive3']


class invoicesIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    clients: Union[bool, 'clientsArgsFrompatientsRecursive4']
    earnings: Union[bool, 'earningsArgsFrompatientsRecursive4']


class invoicesIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class invoicesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyinvoicesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    expense: Union[bool, 'expensesArgsFrompatientsRecursive1']
    product: Union[bool, 'productsArgsFrompatientsRecursive1']


class items_boughtIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    expense: Union[bool, 'expensesArgsFrompatientsRecursive2']
    product: Union[bool, 'productsArgsFrompatientsRecursive2']


class items_boughtIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    expense: Union[bool, 'expensesArgsFrompatientsRecursive3']
    product: Union[bool, 'productsArgsFrompatientsRecursive3']


class items_boughtIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    expense: Union[bool, 'expensesArgsFrompatientsRecursive4']
    product: Union[bool, 'productsArgsFrompatientsRecursive4']


class items_boughtIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class items_boughtArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyitems_boughtArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    earning: Union[bool, 'earningsArgsFrompatientsRecursive1']
    product: Union[bool, 'productsArgsFrompatientsRecursive1']


class items_soldIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    earning: Union[bool, 'earningsArgsFrompatientsRecursive2']
    product: Union[bool, 'productsArgsFrompatientsRecursive2']


class items_soldIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    earning: Union[bool, 'earningsArgsFrompatientsRecursive3']
    product: Union[bool, 'productsArgsFrompatientsRecursive3']


class items_soldIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    earning: Union[bool, 'earningsArgsFrompatientsRecursive4']
    product: Union[bool, 'productsArgsFrompatientsRecursive4']


class items_soldIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class items_soldArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyitems_soldArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrompatientsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive1']
    clients: Union[bool, 'clientsArgsFrompatientsRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatientsRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrompatientsRecursive1']


class patientsIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrompatientsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive2']
    clients: Union[bool, 'clientsArgsFrompatientsRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatientsRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrompatientsRecursive2']


class patientsIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrompatientsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive3']
    clients: Union[bool, 'clientsArgsFrompatientsRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatientsRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrompatientsRecursive3']


class patientsIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrompatientsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive4']
    clients: Union[bool, 'clientsArgsFrompatientsRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatientsRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrompatientsRecursive4']


class patientsIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class patientsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManypatientsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    allergies: Union[bool, 'allergiesArgsFrompatientsRecursive1']
    patients: Union[bool, 'patientsArgsFrompatientsRecursive1']


class patients_allergiesIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    allergies: Union[bool, 'allergiesArgsFrompatientsRecursive2']
    patients: Union[bool, 'patientsArgsFrompatientsRecursive2']


class patients_allergiesIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    allergies: Union[bool, 'allergiesArgsFrompatientsRecursive3']
    patients: Union[bool, 'patientsArgsFrompatientsRecursive3']


class patients_allergiesIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    allergies: Union[bool, 'allergiesArgsFrompatientsRecursive4']
    patients: Union[bool, 'patientsArgsFrompatientsRecursive4']


class patients_allergiesIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class patients_allergiesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManypatients_allergiesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    patients: Union[bool, 'patientsArgsFrompatientsRecursive1']


class prescriptionsIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    patients: Union[bool, 'patientsArgsFrompatientsRecursive2']


class prescriptionsIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    patients: Union[bool, 'patientsArgsFrompatientsRecursive3']


class prescriptionsIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    patients: Union[bool, 'patientsArgsFrompatientsRecursive4']


class prescriptionsIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class prescriptionsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyprescriptionsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    products: Union[bool, 'FindManyproductsArgsFrompatientsRecursive1']


class product_typesIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    products: Union[bool, 'FindManyproductsArgsFrompatientsRecursive2']


class product_typesIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    products: Union[bool, 'FindManyproductsArgsFrompatientsRecursive3']


class product_typesIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    products: Union[bool, 'FindManyproductsArgsFrompatientsRecursive4']


class product_typesIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class product_typesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyproduct_typesArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    product_types: Union[bool, 'product_typesArgsFrompatientsRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatientsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatientsRecursive1']


class productsIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    product_types: Union[bool, 'product_typesArgsFrompatientsRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatientsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatientsRecursive2']


class productsIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    product_types: Union[bool, 'product_typesArgsFrompatientsRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatientsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatientsRecursive3']


class productsIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    product_types: Union[bool, 'product_typesArgsFrompatientsRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatientsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatientsRecursive4']


class productsIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class productsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyproductsArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFrompatients(TypedDict, total=False):
    """Relational arguments for patients"""
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive1']


class usersIncludeFrompatientsRecursive1(TypedDict, total=False):
    """Relational arguments for patients"""
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive2']


class usersIncludeFrompatientsRecursive2(TypedDict, total=False):
    """Relational arguments for patients"""
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive3']


class usersIncludeFrompatientsRecursive3(TypedDict, total=False):
    """Relational arguments for patients"""
    events: Union[bool, 'FindManyeventsArgsFrompatientsRecursive4']


class usersIncludeFrompatientsRecursive4(TypedDict, total=False):
    """Relational arguments for patients"""

    

class usersArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    
    

class FindManyusersArgsFrompatients(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFrompatientsRecursive1(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFrompatientsRecursive2(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFrompatientsRecursive3(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFrompatientsRecursive4(TypedDict, total=False):
    """Arguments for patients"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManypatientsArgs = FindManypatientsArgsFrompatients
FindFirstpatientsArgs = FindManypatientsArgsFrompatients


    

class patientsWhereInput(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringFilter']
    species: Union[None, _str, 'types.StringFilter']
    birthdate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    numberid: Union[None, _int, 'types.IntFilter']
    color: Union[None, _str, 'types.StringFilter']
    clientid: Union[_int, 'types.IntFilter']
    booster_shots: 'booster_shotsListRelationFilter'
    events: 'eventsListRelationFilter'
    clients: 'clientsRelationFilter'
    patients_allergies: 'patients_allergiesListRelationFilter'
    prescriptions: 'prescriptionsListRelationFilter'

    # should be noted that AND and NOT should be Union['patientsWhereInputRecursive1', List['patientsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['patientsWhereInputRecursive1']
    OR: List['patientsWhereInputRecursive1']
    NOT: List['patientsWhereInputRecursive1']


class patientsWhereInputRecursive1(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringFilter']
    species: Union[None, _str, 'types.StringFilter']
    birthdate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    numberid: Union[None, _int, 'types.IntFilter']
    color: Union[None, _str, 'types.StringFilter']
    clientid: Union[_int, 'types.IntFilter']
    booster_shots: 'booster_shotsListRelationFilter'
    events: 'eventsListRelationFilter'
    clients: 'clientsRelationFilter'
    patients_allergies: 'patients_allergiesListRelationFilter'
    prescriptions: 'prescriptionsListRelationFilter'

    # should be noted that AND and NOT should be Union['patientsWhereInputRecursive2', List['patientsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['patientsWhereInputRecursive2']
    OR: List['patientsWhereInputRecursive2']
    NOT: List['patientsWhereInputRecursive2']


class patientsWhereInputRecursive2(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringFilter']
    species: Union[None, _str, 'types.StringFilter']
    birthdate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    numberid: Union[None, _int, 'types.IntFilter']
    color: Union[None, _str, 'types.StringFilter']
    clientid: Union[_int, 'types.IntFilter']
    booster_shots: 'booster_shotsListRelationFilter'
    events: 'eventsListRelationFilter'
    clients: 'clientsRelationFilter'
    patients_allergies: 'patients_allergiesListRelationFilter'
    prescriptions: 'prescriptionsListRelationFilter'

    # should be noted that AND and NOT should be Union['patientsWhereInputRecursive3', List['patientsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['patientsWhereInputRecursive3']
    OR: List['patientsWhereInputRecursive3']
    NOT: List['patientsWhereInputRecursive3']


class patientsWhereInputRecursive3(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringFilter']
    species: Union[None, _str, 'types.StringFilter']
    birthdate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    numberid: Union[None, _int, 'types.IntFilter']
    color: Union[None, _str, 'types.StringFilter']
    clientid: Union[_int, 'types.IntFilter']
    booster_shots: 'booster_shotsListRelationFilter'
    events: 'eventsListRelationFilter'
    clients: 'clientsRelationFilter'
    patients_allergies: 'patients_allergiesListRelationFilter'
    prescriptions: 'prescriptionsListRelationFilter'

    # should be noted that AND and NOT should be Union['patientsWhereInputRecursive4', List['patientsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['patientsWhereInputRecursive4']
    OR: List['patientsWhereInputRecursive4']
    NOT: List['patientsWhereInputRecursive4']


class patientsWhereInputRecursive4(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringFilter']
    species: Union[None, _str, 'types.StringFilter']
    birthdate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    numberid: Union[None, _int, 'types.IntFilter']
    color: Union[None, _str, 'types.StringFilter']
    clientid: Union[_int, 'types.IntFilter']
    booster_shots: 'booster_shotsListRelationFilter'
    events: 'eventsListRelationFilter'
    clients: 'clientsRelationFilter'
    patients_allergies: 'patients_allergiesListRelationFilter'
    prescriptions: 'prescriptionsListRelationFilter'



# aggregate patients types


    

class patientsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringWithAggregatesFilter']
    species: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    numberid: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['patientsScalarWhereWithAggregatesInputRecursive1']
    OR: List['patientsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['patientsScalarWhereWithAggregatesInputRecursive1']


class patientsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringWithAggregatesFilter']
    species: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    numberid: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['patientsScalarWhereWithAggregatesInputRecursive2']
    OR: List['patientsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['patientsScalarWhereWithAggregatesInputRecursive2']


class patientsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringWithAggregatesFilter']
    species: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    numberid: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['patientsScalarWhereWithAggregatesInputRecursive3']
    OR: List['patientsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['patientsScalarWhereWithAggregatesInputRecursive3']


class patientsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringWithAggregatesFilter']
    species: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    numberid: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['patientsScalarWhereWithAggregatesInputRecursive4']
    OR: List['patientsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['patientsScalarWhereWithAggregatesInputRecursive4']


class patientsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """patients arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    gender: 'enums.genders'
    type: Union[_str, 'types.StringWithAggregatesFilter']
    species: Union[_str, 'types.StringWithAggregatesFilter']
    birthdate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    numberid: Union[_int, 'types.IntWithAggregatesFilter']
    color: Union[_str, 'types.StringWithAggregatesFilter']
    clientid: Union[_int, 'types.IntWithAggregatesFilter']



class patientsGroupByOutput(TypedDict, total=False):
    patientid: _int
    name: _str
    gender: 'enums.genders'
    type: _str
    species: _str
    birthdate: datetime.datetime
    numberid: _int
    color: _str
    clientid: _int
    _sum: 'patientsSumAggregateOutput'
    _avg: 'patientsAvgAggregateOutput'
    _min: 'patientsMinAggregateOutput'
    _max: 'patientsMaxAggregateOutput'
    _count: 'patientsCountAggregateOutput'


class patientsAvgAggregateOutput(TypedDict, total=False):
    """patients output for aggregating averages"""
    patientid: float
    numberid: float
    clientid: float


class patientsSumAggregateOutput(TypedDict, total=False):
    """patients output for aggregating sums"""
    patientid: _int
    numberid: _int
    clientid: _int


class patientsScalarAggregateOutput(TypedDict, total=False):
    """patients output including scalar fields"""
    patientid: _int
    name: _str
    gender: 'enums.genders'
    type: _str
    species: _str
    birthdate: datetime.datetime
    numberid: _int
    color: _str
    clientid: _int


patientsMinAggregateOutput = patientsScalarAggregateOutput
patientsMaxAggregateOutput = patientsScalarAggregateOutput


class patientsMaxAggregateInput(TypedDict, total=False):
    """patients input for aggregating by max"""
    patientid: bool
    name: bool
    gender: bool
    type: bool
    species: bool
    birthdate: bool
    numberid: bool
    color: bool
    clientid: bool


class patientsMinAggregateInput(TypedDict, total=False):
    """patients input for aggregating by min"""
    patientid: bool
    name: bool
    gender: bool
    type: bool
    species: bool
    birthdate: bool
    numberid: bool
    color: bool
    clientid: bool


class patientsNumberAggregateInput(TypedDict, total=False):
    """patients input for aggregating numbers"""
    patientid: bool
    numberid: bool
    clientid: bool


patientsAvgAggregateInput = patientsNumberAggregateInput
patientsSumAggregateInput = patientsNumberAggregateInput


patientsCountAggregateInput = TypedDict(
    'patientsCountAggregateInput',
    {
        'patientid': bool,
        'name': bool,
        'gender': bool,
        'type': bool,
        'species': bool,
        'birthdate': bool,
        'numberid': bool,
        'color': bool,
        'clientid': bool,
        '_all': bool,
    },
    total=False,
)

patientsCountAggregateOutput = TypedDict(
    'patientsCountAggregateOutput',
    {
        'patientid': int,
        'name': int,
        'gender': int,
        'type': int,
        'species': int,
        'birthdate': int,
        'numberid': int,
        'color': int,
        'clientid': int,
        '_all': int,
    },
    total=False,
)


patientsKeys = Literal[
    'patientid',
    'name',
    'gender',
    'type',
    'species',
    'birthdate',
    'numberid',
    'color',
    'clientid',
    'booster_shots',
    'events',
    'clients',
    'patients_allergies',
    'prescriptions',
]
patientsScalarFieldKeys = Literal[
    'patientid',
    'name',
    'gender',
    'type',
    'species',
    'birthdate',
    'numberid',
    'color',
    'clientid',
]
patientsScalarFieldKeysT = TypeVar('patientsScalarFieldKeysT', bound=patientsScalarFieldKeys)

patientsRelationalFieldKeys = Literal[
        'booster_shots',
        'events',
        'clients',
        'patients_allergies',
        'prescriptions',
    ]

# patients_allergies types

class patients_allergiesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the patients_allergies create method"""
    patientid: _int
    allergyid: _int
    allergies: 'allergiesCreateNestedWithoutRelationsInput'
    patients: 'patientsCreateNestedWithoutRelationsInput'


class patients_allergiesCreateInput(patients_allergiesOptionalCreateInput):
    """Required arguments to the patients_allergies create method"""
    status: 'enums.statuses'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class patients_allergiesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the patients_allergies create method, without relations"""
    patientid: _int
    allergyid: _int


class patients_allergiesCreateWithoutRelationsInput(patients_allergiesOptionalCreateWithoutRelationsInput):
    """Required arguments to the patients_allergies create method, without relations"""
    status: 'enums.statuses'

class patients_allergiesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'patients_allergiesCreateWithoutRelationsInput'
    where: 'patients_allergiesWhereUniqueInput'

class patients_allergiesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'patients_allergiesCreateWithoutRelationsInput'
    connect: 'patients_allergiesWhereUniqueInput'
    connect_or_create: 'patients_allergiesConnectOrCreateWithoutRelationsInput'


class patients_allergiesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['patients_allergiesCreateWithoutRelationsInput', List['patients_allergiesCreateWithoutRelationsInput']]
    connect: Union['patients_allergiesWhereUniqueInput', List['patients_allergiesWhereUniqueInput']]
    connect_or_create: Union['patients_allergiesConnectOrCreateWithoutRelationsInput', List['patients_allergiesConnectOrCreateWithoutRelationsInput']]

_patients_allergiesCompoundPrimaryKeyInner = TypedDict(
    '_patients_allergiesCompoundPrimaryKeyInner',
    {
        'patientid': '_int',
        'allergyid': '_int',
    },
    total=True
)

_patients_allergiesCompoundPrimaryKey = TypedDict(
    '_patients_allergiesCompoundPrimaryKey',
    {
        'patientid_allergyid': '_patients_allergiesCompoundPrimaryKeyInner',
    },
    total=True
)

patients_allergiesWhereUniqueInput = _patients_allergiesCompoundPrimaryKey


class patients_allergiesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    status: 'enums.statuses'
    allergies: 'allergiesUpdateOneWithoutRelationsInput'
    patients: 'patientsUpdateOneWithoutRelationsInput'


class patients_allergiesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    status: 'enums.statuses'


class patients_allergiesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['patients_allergiesCreateWithoutRelationsInput']
    connect: List['patients_allergiesWhereUniqueInput']
    connect_or_create: List['patients_allergiesConnectOrCreateWithoutRelationsInput']
    set: List['patients_allergiesWhereUniqueInput']
    disconnect: List['patients_allergiesWhereUniqueInput']
    delete: List['patients_allergiesWhereUniqueInput']

    # TODO
    # update: List['patients_allergiesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['patients_allergiesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['patients_allergiesScalarWhereInput']
    # upsert: List['patients_allergiesUpserteWithWhereUniqueWithoutRelationsInput']


class patients_allergiesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'patients_allergiesCreateWithoutRelationsInput'
    connect: 'patients_allergiesWhereUniqueInput'
    connect_or_create: 'patients_allergiesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'patients_allergiesUpdateInput'
    # upsert: 'patients_allergiesUpsertWithoutRelationsInput'


class patients_allergiesUpsertInput(TypedDict):
    create: 'patients_allergiesCreateInput'
    update: 'patients_allergiesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_patients_allergies_patientid_OrderByInput = TypedDict(
    '_patients_allergies_patientid_OrderByInput',
    {
        'patientid': 'SortOrder',
    },
    total=True
)

_patients_allergies_allergyid_OrderByInput = TypedDict(
    '_patients_allergies_allergyid_OrderByInput',
    {
        'allergyid': 'SortOrder',
    },
    total=True
)

_patients_allergies_status_OrderByInput = TypedDict(
    '_patients_allergies_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_patients_allergies_RelevanceInner = TypedDict(
    '_patients_allergies_RelevanceInner',
    {
        'fields': 'List[patients_allergiesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_patients_allergies_RelevanceOrderByInput = TypedDict(
    '_patients_allergies_RelevanceOrderByInput',
    {
        '_relevance': '_patients_allergies_RelevanceInner',
    },
    total=True
)

patients_allergiesOrderByInput = Union[
    '_patients_allergies_patientid_OrderByInput',
    '_patients_allergies_allergyid_OrderByInput',
    '_patients_allergies_status_OrderByInput',
    '_patients_allergies_RelevanceOrderByInput',
]



# recursive patients_allergies types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

patients_allergiesRelationFilter = TypedDict(
    'patients_allergiesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class patients_allergiesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class patients_allergiesInclude(TypedDict, total=False):
    """patients_allergies relational arguments"""
    allergies: Union[bool, 'allergiesArgsFrompatients_allergies']
    patients: Union[bool, 'patientsArgsFrompatients_allergies']


    

class allergiesIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatients_allergiesRecursive1']


class allergiesIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatients_allergiesRecursive2']


class allergiesIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatients_allergiesRecursive3']


class allergiesIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatients_allergiesRecursive4']


class allergiesIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class allergiesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyallergiesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive1']


class booster_shotsIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive2']


class booster_shotsIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive3']


class booster_shotsIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive4']


class booster_shotsIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class booster_shotsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManybooster_shotsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    earnings: Union[bool, 'FindManyearningsArgsFrompatients_allergiesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatients_allergiesRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFrompatients_allergiesRecursive1']


class clientsIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    earnings: Union[bool, 'FindManyearningsArgsFrompatients_allergiesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatients_allergiesRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFrompatients_allergiesRecursive2']


class clientsIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    earnings: Union[bool, 'FindManyearningsArgsFrompatients_allergiesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatients_allergiesRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFrompatients_allergiesRecursive3']


class clientsIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    earnings: Union[bool, 'FindManyearningsArgsFrompatients_allergiesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatients_allergiesRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFrompatients_allergiesRecursive4']


class clientsIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class clientsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyclientsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatients_allergiesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatients_allergiesRecursive1']


class earningsIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatients_allergiesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatients_allergiesRecursive2']


class earningsIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatients_allergiesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatients_allergiesRecursive3']


class earningsIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFrompatients_allergiesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatients_allergiesRecursive4']


class earningsIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class earningsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyearningsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive1']
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive1']
    users: Union[bool, 'usersArgsFrompatients_allergiesRecursive1']


class eventsIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive2']
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive2']
    users: Union[bool, 'usersArgsFrompatients_allergiesRecursive2']


class eventsIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive3']
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive3']
    users: Union[bool, 'usersArgsFrompatients_allergiesRecursive3']


class eventsIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive4']
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive4']
    users: Union[bool, 'usersArgsFrompatients_allergiesRecursive4']


class eventsIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class eventsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyeventsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatients_allergiesRecursive1']


class expensesIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatients_allergiesRecursive2']


class expensesIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatients_allergiesRecursive3']


class expensesIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatients_allergiesRecursive4']


class expensesIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class expensesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyexpensesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive1']
    earnings: Union[bool, 'earningsArgsFrompatients_allergiesRecursive1']


class invoicesIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive2']
    earnings: Union[bool, 'earningsArgsFrompatients_allergiesRecursive2']


class invoicesIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive3']
    earnings: Union[bool, 'earningsArgsFrompatients_allergiesRecursive3']


class invoicesIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive4']
    earnings: Union[bool, 'earningsArgsFrompatients_allergiesRecursive4']


class invoicesIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class invoicesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyinvoicesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    expense: Union[bool, 'expensesArgsFrompatients_allergiesRecursive1']
    product: Union[bool, 'productsArgsFrompatients_allergiesRecursive1']


class items_boughtIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    expense: Union[bool, 'expensesArgsFrompatients_allergiesRecursive2']
    product: Union[bool, 'productsArgsFrompatients_allergiesRecursive2']


class items_boughtIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    expense: Union[bool, 'expensesArgsFrompatients_allergiesRecursive3']
    product: Union[bool, 'productsArgsFrompatients_allergiesRecursive3']


class items_boughtIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    expense: Union[bool, 'expensesArgsFrompatients_allergiesRecursive4']
    product: Union[bool, 'productsArgsFrompatients_allergiesRecursive4']


class items_boughtIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class items_boughtArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyitems_boughtArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    earning: Union[bool, 'earningsArgsFrompatients_allergiesRecursive1']
    product: Union[bool, 'productsArgsFrompatients_allergiesRecursive1']


class items_soldIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    earning: Union[bool, 'earningsArgsFrompatients_allergiesRecursive2']
    product: Union[bool, 'productsArgsFrompatients_allergiesRecursive2']


class items_soldIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    earning: Union[bool, 'earningsArgsFrompatients_allergiesRecursive3']
    product: Union[bool, 'productsArgsFrompatients_allergiesRecursive3']


class items_soldIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    earning: Union[bool, 'earningsArgsFrompatients_allergiesRecursive4']
    product: Union[bool, 'productsArgsFrompatients_allergiesRecursive4']


class items_soldIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class items_soldArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyitems_soldArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrompatients_allergiesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive1']
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatients_allergiesRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrompatients_allergiesRecursive1']


class patientsIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrompatients_allergiesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive2']
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatients_allergiesRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrompatients_allergiesRecursive2']


class patientsIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrompatients_allergiesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive3']
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatients_allergiesRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrompatients_allergiesRecursive3']


class patientsIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFrompatients_allergiesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive4']
    clients: Union[bool, 'clientsArgsFrompatients_allergiesRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFrompatients_allergiesRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFrompatients_allergiesRecursive4']


class patientsIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class patientsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManypatientsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    allergies: Union[bool, 'allergiesArgsFrompatients_allergiesRecursive1']
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive1']


class patients_allergiesIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    allergies: Union[bool, 'allergiesArgsFrompatients_allergiesRecursive2']
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive2']


class patients_allergiesIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    allergies: Union[bool, 'allergiesArgsFrompatients_allergiesRecursive3']
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive3']


class patients_allergiesIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    allergies: Union[bool, 'allergiesArgsFrompatients_allergiesRecursive4']
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive4']


class patients_allergiesIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class patients_allergiesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManypatients_allergiesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive1']


class prescriptionsIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive2']


class prescriptionsIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive3']


class prescriptionsIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    patients: Union[bool, 'patientsArgsFrompatients_allergiesRecursive4']


class prescriptionsIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class prescriptionsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyprescriptionsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    products: Union[bool, 'FindManyproductsArgsFrompatients_allergiesRecursive1']


class product_typesIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    products: Union[bool, 'FindManyproductsArgsFrompatients_allergiesRecursive2']


class product_typesIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    products: Union[bool, 'FindManyproductsArgsFrompatients_allergiesRecursive3']


class product_typesIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    products: Union[bool, 'FindManyproductsArgsFrompatients_allergiesRecursive4']


class product_typesIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class product_typesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyproduct_typesArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    product_types: Union[bool, 'product_typesArgsFrompatients_allergiesRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatients_allergiesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatients_allergiesRecursive1']


class productsIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    product_types: Union[bool, 'product_typesArgsFrompatients_allergiesRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatients_allergiesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatients_allergiesRecursive2']


class productsIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    product_types: Union[bool, 'product_typesArgsFrompatients_allergiesRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatients_allergiesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatients_allergiesRecursive3']


class productsIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    product_types: Union[bool, 'product_typesArgsFrompatients_allergiesRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFrompatients_allergiesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFrompatients_allergiesRecursive4']


class productsIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class productsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyproductsArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFrompatients_allergies(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive1']


class usersIncludeFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive2']


class usersIncludeFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive3']


class usersIncludeFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Relational arguments for patients_allergies"""
    events: Union[bool, 'FindManyeventsArgsFrompatients_allergiesRecursive4']


class usersIncludeFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Relational arguments for patients_allergies"""

    

class usersArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    
    

class FindManyusersArgsFrompatients_allergies(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFrompatients_allergiesRecursive1(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFrompatients_allergiesRecursive2(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFrompatients_allergiesRecursive3(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFrompatients_allergiesRecursive4(TypedDict, total=False):
    """Arguments for patients_allergies"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManypatients_allergiesArgs = FindManypatients_allergiesArgsFrompatients_allergies
FindFirstpatients_allergiesArgs = FindManypatients_allergiesArgsFrompatients_allergies


    

class patients_allergiesWhereInput(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    allergyid: Union[_int, 'types.IntFilter']
    status: 'enums.statuses'
    allergies: 'allergiesRelationFilter'
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['patients_allergiesWhereInputRecursive1', List['patients_allergiesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['patients_allergiesWhereInputRecursive1']
    OR: List['patients_allergiesWhereInputRecursive1']
    NOT: List['patients_allergiesWhereInputRecursive1']


class patients_allergiesWhereInputRecursive1(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    allergyid: Union[_int, 'types.IntFilter']
    status: 'enums.statuses'
    allergies: 'allergiesRelationFilter'
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['patients_allergiesWhereInputRecursive2', List['patients_allergiesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['patients_allergiesWhereInputRecursive2']
    OR: List['patients_allergiesWhereInputRecursive2']
    NOT: List['patients_allergiesWhereInputRecursive2']


class patients_allergiesWhereInputRecursive2(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    allergyid: Union[_int, 'types.IntFilter']
    status: 'enums.statuses'
    allergies: 'allergiesRelationFilter'
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['patients_allergiesWhereInputRecursive3', List['patients_allergiesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['patients_allergiesWhereInputRecursive3']
    OR: List['patients_allergiesWhereInputRecursive3']
    NOT: List['patients_allergiesWhereInputRecursive3']


class patients_allergiesWhereInputRecursive3(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    allergyid: Union[_int, 'types.IntFilter']
    status: 'enums.statuses'
    allergies: 'allergiesRelationFilter'
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['patients_allergiesWhereInputRecursive4', List['patients_allergiesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['patients_allergiesWhereInputRecursive4']
    OR: List['patients_allergiesWhereInputRecursive4']
    NOT: List['patients_allergiesWhereInputRecursive4']


class patients_allergiesWhereInputRecursive4(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntFilter']
    allergyid: Union[_int, 'types.IntFilter']
    status: 'enums.statuses'
    allergies: 'allergiesRelationFilter'
    patients: 'patientsRelationFilter'



# aggregate patients_allergies types


    

class patients_allergiesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.statuses'

    AND: List['patients_allergiesScalarWhereWithAggregatesInputRecursive1']
    OR: List['patients_allergiesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['patients_allergiesScalarWhereWithAggregatesInputRecursive1']


class patients_allergiesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.statuses'

    AND: List['patients_allergiesScalarWhereWithAggregatesInputRecursive2']
    OR: List['patients_allergiesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['patients_allergiesScalarWhereWithAggregatesInputRecursive2']


class patients_allergiesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.statuses'

    AND: List['patients_allergiesScalarWhereWithAggregatesInputRecursive3']
    OR: List['patients_allergiesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['patients_allergiesScalarWhereWithAggregatesInputRecursive3']


class patients_allergiesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.statuses'

    AND: List['patients_allergiesScalarWhereWithAggregatesInputRecursive4']
    OR: List['patients_allergiesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['patients_allergiesScalarWhereWithAggregatesInputRecursive4']


class patients_allergiesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """patients_allergies arguments for searching"""
    patientid: Union[_int, 'types.IntWithAggregatesFilter']
    allergyid: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.statuses'



class patients_allergiesGroupByOutput(TypedDict, total=False):
    patientid: _int
    allergyid: _int
    status: 'enums.statuses'
    _sum: 'patients_allergiesSumAggregateOutput'
    _avg: 'patients_allergiesAvgAggregateOutput'
    _min: 'patients_allergiesMinAggregateOutput'
    _max: 'patients_allergiesMaxAggregateOutput'
    _count: 'patients_allergiesCountAggregateOutput'


class patients_allergiesAvgAggregateOutput(TypedDict, total=False):
    """patients_allergies output for aggregating averages"""
    patientid: float
    allergyid: float


class patients_allergiesSumAggregateOutput(TypedDict, total=False):
    """patients_allergies output for aggregating sums"""
    patientid: _int
    allergyid: _int


class patients_allergiesScalarAggregateOutput(TypedDict, total=False):
    """patients_allergies output including scalar fields"""
    patientid: _int
    allergyid: _int
    status: 'enums.statuses'


patients_allergiesMinAggregateOutput = patients_allergiesScalarAggregateOutput
patients_allergiesMaxAggregateOutput = patients_allergiesScalarAggregateOutput


class patients_allergiesMaxAggregateInput(TypedDict, total=False):
    """patients_allergies input for aggregating by max"""
    patientid: bool
    allergyid: bool
    status: bool


class patients_allergiesMinAggregateInput(TypedDict, total=False):
    """patients_allergies input for aggregating by min"""
    patientid: bool
    allergyid: bool
    status: bool


class patients_allergiesNumberAggregateInput(TypedDict, total=False):
    """patients_allergies input for aggregating numbers"""
    patientid: bool
    allergyid: bool


patients_allergiesAvgAggregateInput = patients_allergiesNumberAggregateInput
patients_allergiesSumAggregateInput = patients_allergiesNumberAggregateInput


patients_allergiesCountAggregateInput = TypedDict(
    'patients_allergiesCountAggregateInput',
    {
        'patientid': bool,
        'allergyid': bool,
        'status': bool,
        '_all': bool,
    },
    total=False,
)

patients_allergiesCountAggregateOutput = TypedDict(
    'patients_allergiesCountAggregateOutput',
    {
        'patientid': int,
        'allergyid': int,
        'status': int,
        '_all': int,
    },
    total=False,
)


patients_allergiesKeys = Literal[
    'patientid',
    'allergyid',
    'status',
    'allergies',
    'patients',
]
patients_allergiesScalarFieldKeys = Literal[
    'patientid',
    'allergyid',
    'status',
]
patients_allergiesScalarFieldKeysT = TypeVar('patients_allergiesScalarFieldKeysT', bound=patients_allergiesScalarFieldKeys)

patients_allergiesRelationalFieldKeys = Literal[
        'allergies',
        'patients',
    ]

# prescriptions types

class prescriptionsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the prescriptions create method"""
    prescriptionid: _int
    motive: Optional[_str]
    created_at: datetime.datetime
    patientid: _int
    patients: 'patientsCreateNestedWithoutRelationsInput'


class prescriptionsCreateInput(prescriptionsOptionalCreateInput):
    """Required arguments to the prescriptions create method"""
    prescriptionlink: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class prescriptionsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the prescriptions create method, without relations"""
    prescriptionid: _int
    motive: Optional[_str]
    created_at: datetime.datetime
    patientid: _int


class prescriptionsCreateWithoutRelationsInput(prescriptionsOptionalCreateWithoutRelationsInput):
    """Required arguments to the prescriptions create method, without relations"""
    prescriptionlink: _str

class prescriptionsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'prescriptionsCreateWithoutRelationsInput'
    where: 'prescriptionsWhereUniqueInput'

class prescriptionsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'prescriptionsCreateWithoutRelationsInput'
    connect: 'prescriptionsWhereUniqueInput'
    connect_or_create: 'prescriptionsConnectOrCreateWithoutRelationsInput'


class prescriptionsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['prescriptionsCreateWithoutRelationsInput', List['prescriptionsCreateWithoutRelationsInput']]
    connect: Union['prescriptionsWhereUniqueInput', List['prescriptionsWhereUniqueInput']]
    connect_or_create: Union['prescriptionsConnectOrCreateWithoutRelationsInput', List['prescriptionsConnectOrCreateWithoutRelationsInput']]

_prescriptionsWhereUnique_prescriptionid_Input = TypedDict(
    '_prescriptionsWhereUnique_prescriptionid_Input',
    {
        'prescriptionid': '_int',
    },
    total=True
)

prescriptionsWhereUniqueInput = _prescriptionsWhereUnique_prescriptionid_Input


class prescriptionsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    prescriptionid: Union[AtomicIntInput, _int]
    motive: Optional[_str]
    prescriptionlink: _str
    created_at: datetime.datetime
    patients: 'patientsUpdateOneWithoutRelationsInput'


class prescriptionsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    prescriptionid: Union[AtomicIntInput, _int]
    motive: Optional[_str]
    prescriptionlink: _str
    created_at: datetime.datetime


class prescriptionsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['prescriptionsCreateWithoutRelationsInput']
    connect: List['prescriptionsWhereUniqueInput']
    connect_or_create: List['prescriptionsConnectOrCreateWithoutRelationsInput']
    set: List['prescriptionsWhereUniqueInput']
    disconnect: List['prescriptionsWhereUniqueInput']
    delete: List['prescriptionsWhereUniqueInput']

    # TODO
    # update: List['prescriptionsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['prescriptionsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['prescriptionsScalarWhereInput']
    # upsert: List['prescriptionsUpserteWithWhereUniqueWithoutRelationsInput']


class prescriptionsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'prescriptionsCreateWithoutRelationsInput'
    connect: 'prescriptionsWhereUniqueInput'
    connect_or_create: 'prescriptionsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'prescriptionsUpdateInput'
    # upsert: 'prescriptionsUpsertWithoutRelationsInput'


class prescriptionsUpsertInput(TypedDict):
    create: 'prescriptionsCreateInput'
    update: 'prescriptionsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_prescriptions_prescriptionid_OrderByInput = TypedDict(
    '_prescriptions_prescriptionid_OrderByInput',
    {
        'prescriptionid': 'SortOrder',
    },
    total=True
)

_prescriptions_motive_OrderByInput = TypedDict(
    '_prescriptions_motive_OrderByInput',
    {
        'motive': 'SortOrder',
    },
    total=True
)

_prescriptions_prescriptionlink_OrderByInput = TypedDict(
    '_prescriptions_prescriptionlink_OrderByInput',
    {
        'prescriptionlink': 'SortOrder',
    },
    total=True
)

_prescriptions_created_at_OrderByInput = TypedDict(
    '_prescriptions_created_at_OrderByInput',
    {
        'created_at': 'SortOrder',
    },
    total=True
)

_prescriptions_patientid_OrderByInput = TypedDict(
    '_prescriptions_patientid_OrderByInput',
    {
        'patientid': 'SortOrder',
    },
    total=True
)

_prescriptions_RelevanceInner = TypedDict(
    '_prescriptions_RelevanceInner',
    {
        'fields': 'List[prescriptionsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_prescriptions_RelevanceOrderByInput = TypedDict(
    '_prescriptions_RelevanceOrderByInput',
    {
        '_relevance': '_prescriptions_RelevanceInner',
    },
    total=True
)

prescriptionsOrderByInput = Union[
    '_prescriptions_prescriptionid_OrderByInput',
    '_prescriptions_motive_OrderByInput',
    '_prescriptions_prescriptionlink_OrderByInput',
    '_prescriptions_created_at_OrderByInput',
    '_prescriptions_patientid_OrderByInput',
    '_prescriptions_RelevanceOrderByInput',
]



# recursive prescriptions types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

prescriptionsRelationFilter = TypedDict(
    'prescriptionsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class prescriptionsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class prescriptionsInclude(TypedDict, total=False):
    """prescriptions relational arguments"""
    patients: Union[bool, 'patientsArgsFromprescriptions']


    

class allergiesIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromprescriptionsRecursive1']


class allergiesIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromprescriptionsRecursive2']


class allergiesIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromprescriptionsRecursive3']


class allergiesIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromprescriptionsRecursive4']


class allergiesIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class allergiesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyallergiesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive1']


class booster_shotsIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive2']


class booster_shotsIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive3']


class booster_shotsIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive4']


class booster_shotsIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class booster_shotsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManybooster_shotsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    earnings: Union[bool, 'FindManyearningsArgsFromprescriptionsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromprescriptionsRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromprescriptionsRecursive1']


class clientsIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    earnings: Union[bool, 'FindManyearningsArgsFromprescriptionsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromprescriptionsRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromprescriptionsRecursive2']


class clientsIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    earnings: Union[bool, 'FindManyearningsArgsFromprescriptionsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromprescriptionsRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromprescriptionsRecursive3']


class clientsIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    earnings: Union[bool, 'FindManyearningsArgsFromprescriptionsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromprescriptionsRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromprescriptionsRecursive4']


class clientsIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class clientsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyclientsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromprescriptionsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromprescriptionsRecursive1']


class earningsIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromprescriptionsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromprescriptionsRecursive2']


class earningsIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromprescriptionsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromprescriptionsRecursive3']


class earningsIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromprescriptionsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromprescriptionsRecursive4']


class earningsIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class earningsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyearningsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive1']
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive1']
    users: Union[bool, 'usersArgsFromprescriptionsRecursive1']


class eventsIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive2']
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive2']
    users: Union[bool, 'usersArgsFromprescriptionsRecursive2']


class eventsIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive3']
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive3']
    users: Union[bool, 'usersArgsFromprescriptionsRecursive3']


class eventsIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive4']
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive4']
    users: Union[bool, 'usersArgsFromprescriptionsRecursive4']


class eventsIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class eventsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyeventsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromprescriptionsRecursive1']


class expensesIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromprescriptionsRecursive2']


class expensesIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromprescriptionsRecursive3']


class expensesIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromprescriptionsRecursive4']


class expensesIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class expensesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyexpensesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive1']
    earnings: Union[bool, 'earningsArgsFromprescriptionsRecursive1']


class invoicesIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive2']
    earnings: Union[bool, 'earningsArgsFromprescriptionsRecursive2']


class invoicesIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive3']
    earnings: Union[bool, 'earningsArgsFromprescriptionsRecursive3']


class invoicesIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive4']
    earnings: Union[bool, 'earningsArgsFromprescriptionsRecursive4']


class invoicesIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class invoicesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyinvoicesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    expense: Union[bool, 'expensesArgsFromprescriptionsRecursive1']
    product: Union[bool, 'productsArgsFromprescriptionsRecursive1']


class items_boughtIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    expense: Union[bool, 'expensesArgsFromprescriptionsRecursive2']
    product: Union[bool, 'productsArgsFromprescriptionsRecursive2']


class items_boughtIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    expense: Union[bool, 'expensesArgsFromprescriptionsRecursive3']
    product: Union[bool, 'productsArgsFromprescriptionsRecursive3']


class items_boughtIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    expense: Union[bool, 'expensesArgsFromprescriptionsRecursive4']
    product: Union[bool, 'productsArgsFromprescriptionsRecursive4']


class items_boughtIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class items_boughtArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyitems_boughtArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    earning: Union[bool, 'earningsArgsFromprescriptionsRecursive1']
    product: Union[bool, 'productsArgsFromprescriptionsRecursive1']


class items_soldIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    earning: Union[bool, 'earningsArgsFromprescriptionsRecursive2']
    product: Union[bool, 'productsArgsFromprescriptionsRecursive2']


class items_soldIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    earning: Union[bool, 'earningsArgsFromprescriptionsRecursive3']
    product: Union[bool, 'productsArgsFromprescriptionsRecursive3']


class items_soldIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    earning: Union[bool, 'earningsArgsFromprescriptionsRecursive4']
    product: Union[bool, 'productsArgsFromprescriptionsRecursive4']


class items_soldIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class items_soldArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyitems_soldArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromprescriptionsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive1']
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromprescriptionsRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromprescriptionsRecursive1']


class patientsIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromprescriptionsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive2']
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromprescriptionsRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromprescriptionsRecursive2']


class patientsIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromprescriptionsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive3']
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromprescriptionsRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromprescriptionsRecursive3']


class patientsIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromprescriptionsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive4']
    clients: Union[bool, 'clientsArgsFromprescriptionsRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromprescriptionsRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromprescriptionsRecursive4']


class patientsIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class patientsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManypatientsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    allergies: Union[bool, 'allergiesArgsFromprescriptionsRecursive1']
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive1']


class patients_allergiesIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    allergies: Union[bool, 'allergiesArgsFromprescriptionsRecursive2']
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive2']


class patients_allergiesIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    allergies: Union[bool, 'allergiesArgsFromprescriptionsRecursive3']
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive3']


class patients_allergiesIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    allergies: Union[bool, 'allergiesArgsFromprescriptionsRecursive4']
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive4']


class patients_allergiesIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class patients_allergiesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManypatients_allergiesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive1']


class prescriptionsIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive2']


class prescriptionsIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive3']


class prescriptionsIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    patients: Union[bool, 'patientsArgsFromprescriptionsRecursive4']


class prescriptionsIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class prescriptionsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyprescriptionsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    products: Union[bool, 'FindManyproductsArgsFromprescriptionsRecursive1']


class product_typesIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    products: Union[bool, 'FindManyproductsArgsFromprescriptionsRecursive2']


class product_typesIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    products: Union[bool, 'FindManyproductsArgsFromprescriptionsRecursive3']


class product_typesIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    products: Union[bool, 'FindManyproductsArgsFromprescriptionsRecursive4']


class product_typesIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class product_typesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyproduct_typesArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    product_types: Union[bool, 'product_typesArgsFromprescriptionsRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromprescriptionsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromprescriptionsRecursive1']


class productsIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    product_types: Union[bool, 'product_typesArgsFromprescriptionsRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromprescriptionsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromprescriptionsRecursive2']


class productsIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    product_types: Union[bool, 'product_typesArgsFromprescriptionsRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromprescriptionsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromprescriptionsRecursive3']


class productsIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    product_types: Union[bool, 'product_typesArgsFromprescriptionsRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromprescriptionsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromprescriptionsRecursive4']


class productsIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class productsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyproductsArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromprescriptions(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive1']


class usersIncludeFromprescriptionsRecursive1(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive2']


class usersIncludeFromprescriptionsRecursive2(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive3']


class usersIncludeFromprescriptionsRecursive3(TypedDict, total=False):
    """Relational arguments for prescriptions"""
    events: Union[bool, 'FindManyeventsArgsFromprescriptionsRecursive4']


class usersIncludeFromprescriptionsRecursive4(TypedDict, total=False):
    """Relational arguments for prescriptions"""

    

class usersArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    
    

class FindManyusersArgsFromprescriptions(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromprescriptionsRecursive1(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromprescriptionsRecursive2(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromprescriptionsRecursive3(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromprescriptionsRecursive4(TypedDict, total=False):
    """Arguments for prescriptions"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyprescriptionsArgs = FindManyprescriptionsArgsFromprescriptions
FindFirstprescriptionsArgs = FindManyprescriptionsArgsFromprescriptions


    

class prescriptionsWhereInput(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntFilter']
    motive: Union[None, _str, 'types.StringFilter']
    prescriptionlink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['prescriptionsWhereInputRecursive1', List['prescriptionsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['prescriptionsWhereInputRecursive1']
    OR: List['prescriptionsWhereInputRecursive1']
    NOT: List['prescriptionsWhereInputRecursive1']


class prescriptionsWhereInputRecursive1(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntFilter']
    motive: Union[None, _str, 'types.StringFilter']
    prescriptionlink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['prescriptionsWhereInputRecursive2', List['prescriptionsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['prescriptionsWhereInputRecursive2']
    OR: List['prescriptionsWhereInputRecursive2']
    NOT: List['prescriptionsWhereInputRecursive2']


class prescriptionsWhereInputRecursive2(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntFilter']
    motive: Union[None, _str, 'types.StringFilter']
    prescriptionlink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['prescriptionsWhereInputRecursive3', List['prescriptionsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['prescriptionsWhereInputRecursive3']
    OR: List['prescriptionsWhereInputRecursive3']
    NOT: List['prescriptionsWhereInputRecursive3']


class prescriptionsWhereInputRecursive3(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntFilter']
    motive: Union[None, _str, 'types.StringFilter']
    prescriptionlink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'

    # should be noted that AND and NOT should be Union['prescriptionsWhereInputRecursive4', List['prescriptionsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['prescriptionsWhereInputRecursive4']
    OR: List['prescriptionsWhereInputRecursive4']
    NOT: List['prescriptionsWhereInputRecursive4']


class prescriptionsWhereInputRecursive4(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntFilter']
    motive: Union[None, _str, 'types.StringFilter']
    prescriptionlink: Union[_str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    patientid: Union[_int, 'types.IntFilter']
    patients: 'patientsRelationFilter'



# aggregate prescriptions types


    

class prescriptionsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntWithAggregatesFilter']
    motive: Union[_str, 'types.StringWithAggregatesFilter']
    prescriptionlink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['prescriptionsScalarWhereWithAggregatesInputRecursive1']
    OR: List['prescriptionsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['prescriptionsScalarWhereWithAggregatesInputRecursive1']


class prescriptionsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntWithAggregatesFilter']
    motive: Union[_str, 'types.StringWithAggregatesFilter']
    prescriptionlink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['prescriptionsScalarWhereWithAggregatesInputRecursive2']
    OR: List['prescriptionsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['prescriptionsScalarWhereWithAggregatesInputRecursive2']


class prescriptionsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntWithAggregatesFilter']
    motive: Union[_str, 'types.StringWithAggregatesFilter']
    prescriptionlink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['prescriptionsScalarWhereWithAggregatesInputRecursive3']
    OR: List['prescriptionsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['prescriptionsScalarWhereWithAggregatesInputRecursive3']


class prescriptionsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntWithAggregatesFilter']
    motive: Union[_str, 'types.StringWithAggregatesFilter']
    prescriptionlink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['prescriptionsScalarWhereWithAggregatesInputRecursive4']
    OR: List['prescriptionsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['prescriptionsScalarWhereWithAggregatesInputRecursive4']


class prescriptionsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """prescriptions arguments for searching"""
    prescriptionid: Union[_int, 'types.IntWithAggregatesFilter']
    motive: Union[_str, 'types.StringWithAggregatesFilter']
    prescriptionlink: Union[_str, 'types.StringWithAggregatesFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    patientid: Union[_int, 'types.IntWithAggregatesFilter']



class prescriptionsGroupByOutput(TypedDict, total=False):
    prescriptionid: _int
    motive: _str
    prescriptionlink: _str
    created_at: datetime.datetime
    patientid: _int
    _sum: 'prescriptionsSumAggregateOutput'
    _avg: 'prescriptionsAvgAggregateOutput'
    _min: 'prescriptionsMinAggregateOutput'
    _max: 'prescriptionsMaxAggregateOutput'
    _count: 'prescriptionsCountAggregateOutput'


class prescriptionsAvgAggregateOutput(TypedDict, total=False):
    """prescriptions output for aggregating averages"""
    prescriptionid: float
    patientid: float


class prescriptionsSumAggregateOutput(TypedDict, total=False):
    """prescriptions output for aggregating sums"""
    prescriptionid: _int
    patientid: _int


class prescriptionsScalarAggregateOutput(TypedDict, total=False):
    """prescriptions output including scalar fields"""
    prescriptionid: _int
    motive: _str
    prescriptionlink: _str
    created_at: datetime.datetime
    patientid: _int


prescriptionsMinAggregateOutput = prescriptionsScalarAggregateOutput
prescriptionsMaxAggregateOutput = prescriptionsScalarAggregateOutput


class prescriptionsMaxAggregateInput(TypedDict, total=False):
    """prescriptions input for aggregating by max"""
    prescriptionid: bool
    motive: bool
    prescriptionlink: bool
    created_at: bool
    patientid: bool


class prescriptionsMinAggregateInput(TypedDict, total=False):
    """prescriptions input for aggregating by min"""
    prescriptionid: bool
    motive: bool
    prescriptionlink: bool
    created_at: bool
    patientid: bool


class prescriptionsNumberAggregateInput(TypedDict, total=False):
    """prescriptions input for aggregating numbers"""
    prescriptionid: bool
    patientid: bool


prescriptionsAvgAggregateInput = prescriptionsNumberAggregateInput
prescriptionsSumAggregateInput = prescriptionsNumberAggregateInput


prescriptionsCountAggregateInput = TypedDict(
    'prescriptionsCountAggregateInput',
    {
        'prescriptionid': bool,
        'motive': bool,
        'prescriptionlink': bool,
        'created_at': bool,
        'patientid': bool,
        '_all': bool,
    },
    total=False,
)

prescriptionsCountAggregateOutput = TypedDict(
    'prescriptionsCountAggregateOutput',
    {
        'prescriptionid': int,
        'motive': int,
        'prescriptionlink': int,
        'created_at': int,
        'patientid': int,
        '_all': int,
    },
    total=False,
)


prescriptionsKeys = Literal[
    'prescriptionid',
    'motive',
    'prescriptionlink',
    'created_at',
    'patientid',
    'patients',
]
prescriptionsScalarFieldKeys = Literal[
    'prescriptionid',
    'motive',
    'prescriptionlink',
    'created_at',
    'patientid',
]
prescriptionsScalarFieldKeysT = TypeVar('prescriptionsScalarFieldKeysT', bound=prescriptionsScalarFieldKeys)

prescriptionsRelationalFieldKeys = Literal[
        'patients',
    ]

# product_types types

class product_typesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the product_types create method"""
    producttypeid: _int
    products: 'productsCreateManyNestedWithoutRelationsInput'


class product_typesCreateInput(product_typesOptionalCreateInput):
    """Required arguments to the product_types create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class product_typesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the product_types create method, without relations"""
    producttypeid: _int


class product_typesCreateWithoutRelationsInput(product_typesOptionalCreateWithoutRelationsInput):
    """Required arguments to the product_types create method, without relations"""
    name: _str

class product_typesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'product_typesCreateWithoutRelationsInput'
    where: 'product_typesWhereUniqueInput'

class product_typesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'product_typesCreateWithoutRelationsInput'
    connect: 'product_typesWhereUniqueInput'
    connect_or_create: 'product_typesConnectOrCreateWithoutRelationsInput'


class product_typesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['product_typesCreateWithoutRelationsInput', List['product_typesCreateWithoutRelationsInput']]
    connect: Union['product_typesWhereUniqueInput', List['product_typesWhereUniqueInput']]
    connect_or_create: Union['product_typesConnectOrCreateWithoutRelationsInput', List['product_typesConnectOrCreateWithoutRelationsInput']]

_product_typesWhereUnique_producttypeid_Input = TypedDict(
    '_product_typesWhereUnique_producttypeid_Input',
    {
        'producttypeid': '_int',
    },
    total=True
)

product_typesWhereUniqueInput = _product_typesWhereUnique_producttypeid_Input


class product_typesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    producttypeid: Union[AtomicIntInput, _int]
    name: _str
    products: 'productsUpdateManyWithoutRelationsInput'


class product_typesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    producttypeid: Union[AtomicIntInput, _int]
    name: _str


class product_typesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['product_typesCreateWithoutRelationsInput']
    connect: List['product_typesWhereUniqueInput']
    connect_or_create: List['product_typesConnectOrCreateWithoutRelationsInput']
    set: List['product_typesWhereUniqueInput']
    disconnect: List['product_typesWhereUniqueInput']
    delete: List['product_typesWhereUniqueInput']

    # TODO
    # update: List['product_typesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['product_typesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['product_typesScalarWhereInput']
    # upsert: List['product_typesUpserteWithWhereUniqueWithoutRelationsInput']


class product_typesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'product_typesCreateWithoutRelationsInput'
    connect: 'product_typesWhereUniqueInput'
    connect_or_create: 'product_typesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'product_typesUpdateInput'
    # upsert: 'product_typesUpsertWithoutRelationsInput'


class product_typesUpsertInput(TypedDict):
    create: 'product_typesCreateInput'
    update: 'product_typesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_product_types_producttypeid_OrderByInput = TypedDict(
    '_product_types_producttypeid_OrderByInput',
    {
        'producttypeid': 'SortOrder',
    },
    total=True
)

_product_types_name_OrderByInput = TypedDict(
    '_product_types_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_product_types_RelevanceInner = TypedDict(
    '_product_types_RelevanceInner',
    {
        'fields': 'List[product_typesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_product_types_RelevanceOrderByInput = TypedDict(
    '_product_types_RelevanceOrderByInput',
    {
        '_relevance': '_product_types_RelevanceInner',
    },
    total=True
)

product_typesOrderByInput = Union[
    '_product_types_producttypeid_OrderByInput',
    '_product_types_name_OrderByInput',
    '_product_types_RelevanceOrderByInput',
]



# recursive product_types types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

product_typesRelationFilter = TypedDict(
    'product_typesRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class product_typesListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class product_typesInclude(TypedDict, total=False):
    """product_types relational arguments"""
    products: Union[bool, 'FindManyproductsArgsFromproduct_types']


    

class allergiesIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproduct_typesRecursive1']


class allergiesIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproduct_typesRecursive2']


class allergiesIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproduct_typesRecursive3']


class allergiesIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproduct_typesRecursive4']


class allergiesIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class allergiesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyallergiesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive1']


class booster_shotsIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive2']


class booster_shotsIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive3']


class booster_shotsIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive4']


class booster_shotsIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class booster_shotsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManybooster_shotsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    earnings: Union[bool, 'FindManyearningsArgsFromproduct_typesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproduct_typesRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromproduct_typesRecursive1']


class clientsIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    earnings: Union[bool, 'FindManyearningsArgsFromproduct_typesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproduct_typesRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromproduct_typesRecursive2']


class clientsIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    earnings: Union[bool, 'FindManyearningsArgsFromproduct_typesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproduct_typesRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromproduct_typesRecursive3']


class clientsIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    earnings: Union[bool, 'FindManyearningsArgsFromproduct_typesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproduct_typesRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromproduct_typesRecursive4']


class clientsIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class clientsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyclientsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproduct_typesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproduct_typesRecursive1']


class earningsIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproduct_typesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproduct_typesRecursive2']


class earningsIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproduct_typesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproduct_typesRecursive3']


class earningsIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproduct_typesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproduct_typesRecursive4']


class earningsIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class earningsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyearningsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive1']
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive1']
    users: Union[bool, 'usersArgsFromproduct_typesRecursive1']


class eventsIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive2']
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive2']
    users: Union[bool, 'usersArgsFromproduct_typesRecursive2']


class eventsIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive3']
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive3']
    users: Union[bool, 'usersArgsFromproduct_typesRecursive3']


class eventsIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive4']
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive4']
    users: Union[bool, 'usersArgsFromproduct_typesRecursive4']


class eventsIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class eventsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyeventsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproduct_typesRecursive1']


class expensesIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproduct_typesRecursive2']


class expensesIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproduct_typesRecursive3']


class expensesIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproduct_typesRecursive4']


class expensesIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class expensesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyexpensesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive1']
    earnings: Union[bool, 'earningsArgsFromproduct_typesRecursive1']


class invoicesIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive2']
    earnings: Union[bool, 'earningsArgsFromproduct_typesRecursive2']


class invoicesIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive3']
    earnings: Union[bool, 'earningsArgsFromproduct_typesRecursive3']


class invoicesIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive4']
    earnings: Union[bool, 'earningsArgsFromproduct_typesRecursive4']


class invoicesIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class invoicesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyinvoicesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    expense: Union[bool, 'expensesArgsFromproduct_typesRecursive1']
    product: Union[bool, 'productsArgsFromproduct_typesRecursive1']


class items_boughtIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    expense: Union[bool, 'expensesArgsFromproduct_typesRecursive2']
    product: Union[bool, 'productsArgsFromproduct_typesRecursive2']


class items_boughtIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    expense: Union[bool, 'expensesArgsFromproduct_typesRecursive3']
    product: Union[bool, 'productsArgsFromproduct_typesRecursive3']


class items_boughtIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    expense: Union[bool, 'expensesArgsFromproduct_typesRecursive4']
    product: Union[bool, 'productsArgsFromproduct_typesRecursive4']


class items_boughtIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class items_boughtArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyitems_boughtArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    earning: Union[bool, 'earningsArgsFromproduct_typesRecursive1']
    product: Union[bool, 'productsArgsFromproduct_typesRecursive1']


class items_soldIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    earning: Union[bool, 'earningsArgsFromproduct_typesRecursive2']
    product: Union[bool, 'productsArgsFromproduct_typesRecursive2']


class items_soldIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    earning: Union[bool, 'earningsArgsFromproduct_typesRecursive3']
    product: Union[bool, 'productsArgsFromproduct_typesRecursive3']


class items_soldIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    earning: Union[bool, 'earningsArgsFromproduct_typesRecursive4']
    product: Union[bool, 'productsArgsFromproduct_typesRecursive4']


class items_soldIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class items_soldArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyitems_soldArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromproduct_typesRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive1']
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproduct_typesRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromproduct_typesRecursive1']


class patientsIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromproduct_typesRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive2']
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproduct_typesRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromproduct_typesRecursive2']


class patientsIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromproduct_typesRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive3']
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproduct_typesRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromproduct_typesRecursive3']


class patientsIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromproduct_typesRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive4']
    clients: Union[bool, 'clientsArgsFromproduct_typesRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproduct_typesRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromproduct_typesRecursive4']


class patientsIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class patientsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManypatientsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    allergies: Union[bool, 'allergiesArgsFromproduct_typesRecursive1']
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive1']


class patients_allergiesIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    allergies: Union[bool, 'allergiesArgsFromproduct_typesRecursive2']
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive2']


class patients_allergiesIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    allergies: Union[bool, 'allergiesArgsFromproduct_typesRecursive3']
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive3']


class patients_allergiesIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    allergies: Union[bool, 'allergiesArgsFromproduct_typesRecursive4']
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive4']


class patients_allergiesIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class patients_allergiesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManypatients_allergiesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive1']


class prescriptionsIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive2']


class prescriptionsIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive3']


class prescriptionsIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    patients: Union[bool, 'patientsArgsFromproduct_typesRecursive4']


class prescriptionsIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class prescriptionsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyprescriptionsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    products: Union[bool, 'FindManyproductsArgsFromproduct_typesRecursive1']


class product_typesIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    products: Union[bool, 'FindManyproductsArgsFromproduct_typesRecursive2']


class product_typesIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    products: Union[bool, 'FindManyproductsArgsFromproduct_typesRecursive3']


class product_typesIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    products: Union[bool, 'FindManyproductsArgsFromproduct_typesRecursive4']


class product_typesIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class product_typesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyproduct_typesArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    product_types: Union[bool, 'product_typesArgsFromproduct_typesRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproduct_typesRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproduct_typesRecursive1']


class productsIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    product_types: Union[bool, 'product_typesArgsFromproduct_typesRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproduct_typesRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproduct_typesRecursive2']


class productsIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    product_types: Union[bool, 'product_typesArgsFromproduct_typesRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproduct_typesRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproduct_typesRecursive3']


class productsIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    product_types: Union[bool, 'product_typesArgsFromproduct_typesRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproduct_typesRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproduct_typesRecursive4']


class productsIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class productsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyproductsArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromproduct_types(TypedDict, total=False):
    """Relational arguments for product_types"""
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive1']


class usersIncludeFromproduct_typesRecursive1(TypedDict, total=False):
    """Relational arguments for product_types"""
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive2']


class usersIncludeFromproduct_typesRecursive2(TypedDict, total=False):
    """Relational arguments for product_types"""
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive3']


class usersIncludeFromproduct_typesRecursive3(TypedDict, total=False):
    """Relational arguments for product_types"""
    events: Union[bool, 'FindManyeventsArgsFromproduct_typesRecursive4']


class usersIncludeFromproduct_typesRecursive4(TypedDict, total=False):
    """Relational arguments for product_types"""

    

class usersArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    
    

class FindManyusersArgsFromproduct_types(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromproduct_typesRecursive1(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromproduct_typesRecursive2(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromproduct_typesRecursive3(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromproduct_typesRecursive4(TypedDict, total=False):
    """Arguments for product_types"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyproduct_typesArgs = FindManyproduct_typesArgsFromproduct_types
FindFirstproduct_typesArgs = FindManyproduct_typesArgsFromproduct_types


    

class product_typesWhereInput(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'productsListRelationFilter'

    # should be noted that AND and NOT should be Union['product_typesWhereInputRecursive1', List['product_typesWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['product_typesWhereInputRecursive1']
    OR: List['product_typesWhereInputRecursive1']
    NOT: List['product_typesWhereInputRecursive1']


class product_typesWhereInputRecursive1(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'productsListRelationFilter'

    # should be noted that AND and NOT should be Union['product_typesWhereInputRecursive2', List['product_typesWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['product_typesWhereInputRecursive2']
    OR: List['product_typesWhereInputRecursive2']
    NOT: List['product_typesWhereInputRecursive2']


class product_typesWhereInputRecursive2(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'productsListRelationFilter'

    # should be noted that AND and NOT should be Union['product_typesWhereInputRecursive3', List['product_typesWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['product_typesWhereInputRecursive3']
    OR: List['product_typesWhereInputRecursive3']
    NOT: List['product_typesWhereInputRecursive3']


class product_typesWhereInputRecursive3(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'productsListRelationFilter'

    # should be noted that AND and NOT should be Union['product_typesWhereInputRecursive4', List['product_typesWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['product_typesWhereInputRecursive4']
    OR: List['product_typesWhereInputRecursive4']
    NOT: List['product_typesWhereInputRecursive4']


class product_typesWhereInputRecursive4(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    products: 'productsListRelationFilter'



# aggregate product_types types


    

class product_typesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['product_typesScalarWhereWithAggregatesInputRecursive1']
    OR: List['product_typesScalarWhereWithAggregatesInputRecursive1']
    NOT: List['product_typesScalarWhereWithAggregatesInputRecursive1']


class product_typesScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['product_typesScalarWhereWithAggregatesInputRecursive2']
    OR: List['product_typesScalarWhereWithAggregatesInputRecursive2']
    NOT: List['product_typesScalarWhereWithAggregatesInputRecursive2']


class product_typesScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['product_typesScalarWhereWithAggregatesInputRecursive3']
    OR: List['product_typesScalarWhereWithAggregatesInputRecursive3']
    NOT: List['product_typesScalarWhereWithAggregatesInputRecursive3']


class product_typesScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['product_typesScalarWhereWithAggregatesInputRecursive4']
    OR: List['product_typesScalarWhereWithAggregatesInputRecursive4']
    NOT: List['product_typesScalarWhereWithAggregatesInputRecursive4']


class product_typesScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """product_types arguments for searching"""
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']



class product_typesGroupByOutput(TypedDict, total=False):
    producttypeid: _int
    name: _str
    _sum: 'product_typesSumAggregateOutput'
    _avg: 'product_typesAvgAggregateOutput'
    _min: 'product_typesMinAggregateOutput'
    _max: 'product_typesMaxAggregateOutput'
    _count: 'product_typesCountAggregateOutput'


class product_typesAvgAggregateOutput(TypedDict, total=False):
    """product_types output for aggregating averages"""
    producttypeid: float


class product_typesSumAggregateOutput(TypedDict, total=False):
    """product_types output for aggregating sums"""
    producttypeid: _int


class product_typesScalarAggregateOutput(TypedDict, total=False):
    """product_types output including scalar fields"""
    producttypeid: _int
    name: _str


product_typesMinAggregateOutput = product_typesScalarAggregateOutput
product_typesMaxAggregateOutput = product_typesScalarAggregateOutput


class product_typesMaxAggregateInput(TypedDict, total=False):
    """product_types input for aggregating by max"""
    producttypeid: bool
    name: bool


class product_typesMinAggregateInput(TypedDict, total=False):
    """product_types input for aggregating by min"""
    producttypeid: bool
    name: bool


class product_typesNumberAggregateInput(TypedDict, total=False):
    """product_types input for aggregating numbers"""
    producttypeid: bool


product_typesAvgAggregateInput = product_typesNumberAggregateInput
product_typesSumAggregateInput = product_typesNumberAggregateInput


product_typesCountAggregateInput = TypedDict(
    'product_typesCountAggregateInput',
    {
        'producttypeid': bool,
        'name': bool,
        '_all': bool,
    },
    total=False,
)

product_typesCountAggregateOutput = TypedDict(
    'product_typesCountAggregateOutput',
    {
        'producttypeid': int,
        'name': int,
        '_all': int,
    },
    total=False,
)


product_typesKeys = Literal[
    'producttypeid',
    'name',
    'products',
]
product_typesScalarFieldKeys = Literal[
    'producttypeid',
    'name',
]
product_typesScalarFieldKeysT = TypeVar('product_typesScalarFieldKeysT', bound=product_typesScalarFieldKeys)

product_typesRelationalFieldKeys = Literal[
        'products',
    ]

# products types

class productsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the products create method"""
    productid: _int
    description: Optional[_str]
    producttypeid: _int
    product_types: 'product_typesCreateNestedWithoutRelationsInput'
    items_bought: 'items_boughtCreateManyNestedWithoutRelationsInput'
    items_sold: 'items_soldCreateManyNestedWithoutRelationsInput'


class productsCreateInput(productsOptionalCreateInput):
    """Required arguments to the products create method"""
    name: _str
    sellingprice: decimal.Decimal
    cost: decimal.Decimal
    tva: decimal.Decimal
    quantity: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class productsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the products create method, without relations"""
    productid: _int
    description: Optional[_str]
    producttypeid: _int


class productsCreateWithoutRelationsInput(productsOptionalCreateWithoutRelationsInput):
    """Required arguments to the products create method, without relations"""
    name: _str
    sellingprice: decimal.Decimal
    cost: decimal.Decimal
    tva: decimal.Decimal
    quantity: _int

class productsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'productsCreateWithoutRelationsInput'
    where: 'productsWhereUniqueInput'

class productsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'productsCreateWithoutRelationsInput'
    connect: 'productsWhereUniqueInput'
    connect_or_create: 'productsConnectOrCreateWithoutRelationsInput'


class productsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['productsCreateWithoutRelationsInput', List['productsCreateWithoutRelationsInput']]
    connect: Union['productsWhereUniqueInput', List['productsWhereUniqueInput']]
    connect_or_create: Union['productsConnectOrCreateWithoutRelationsInput', List['productsConnectOrCreateWithoutRelationsInput']]

_productsWhereUnique_productid_Input = TypedDict(
    '_productsWhereUnique_productid_Input',
    {
        'productid': '_int',
    },
    total=True
)

productsWhereUniqueInput = _productsWhereUnique_productid_Input


class productsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    productid: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]
    sellingprice: decimal.Decimal
    cost: decimal.Decimal
    tva: decimal.Decimal
    quantity: Union[AtomicIntInput, _int]
    product_types: 'product_typesUpdateOneWithoutRelationsInput'
    items_bought: 'items_boughtUpdateManyWithoutRelationsInput'
    items_sold: 'items_soldUpdateManyWithoutRelationsInput'


class productsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    productid: Union[AtomicIntInput, _int]
    name: _str
    description: Optional[_str]
    sellingprice: decimal.Decimal
    cost: decimal.Decimal
    tva: decimal.Decimal
    quantity: Union[AtomicIntInput, _int]


class productsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['productsCreateWithoutRelationsInput']
    connect: List['productsWhereUniqueInput']
    connect_or_create: List['productsConnectOrCreateWithoutRelationsInput']
    set: List['productsWhereUniqueInput']
    disconnect: List['productsWhereUniqueInput']
    delete: List['productsWhereUniqueInput']

    # TODO
    # update: List['productsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['productsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['productsScalarWhereInput']
    # upsert: List['productsUpserteWithWhereUniqueWithoutRelationsInput']


class productsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'productsCreateWithoutRelationsInput'
    connect: 'productsWhereUniqueInput'
    connect_or_create: 'productsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'productsUpdateInput'
    # upsert: 'productsUpsertWithoutRelationsInput'


class productsUpsertInput(TypedDict):
    create: 'productsCreateInput'
    update: 'productsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_products_productid_OrderByInput = TypedDict(
    '_products_productid_OrderByInput',
    {
        'productid': 'SortOrder',
    },
    total=True
)

_products_name_OrderByInput = TypedDict(
    '_products_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_products_description_OrderByInput = TypedDict(
    '_products_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_products_sellingprice_OrderByInput = TypedDict(
    '_products_sellingprice_OrderByInput',
    {
        'sellingprice': 'SortOrder',
    },
    total=True
)

_products_cost_OrderByInput = TypedDict(
    '_products_cost_OrderByInput',
    {
        'cost': 'SortOrder',
    },
    total=True
)

_products_tva_OrderByInput = TypedDict(
    '_products_tva_OrderByInput',
    {
        'tva': 'SortOrder',
    },
    total=True
)

_products_quantity_OrderByInput = TypedDict(
    '_products_quantity_OrderByInput',
    {
        'quantity': 'SortOrder',
    },
    total=True
)

_products_producttypeid_OrderByInput = TypedDict(
    '_products_producttypeid_OrderByInput',
    {
        'producttypeid': 'SortOrder',
    },
    total=True
)

_products_RelevanceInner = TypedDict(
    '_products_RelevanceInner',
    {
        'fields': 'List[productsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_products_RelevanceOrderByInput = TypedDict(
    '_products_RelevanceOrderByInput',
    {
        '_relevance': '_products_RelevanceInner',
    },
    total=True
)

productsOrderByInput = Union[
    '_products_productid_OrderByInput',
    '_products_name_OrderByInput',
    '_products_description_OrderByInput',
    '_products_sellingprice_OrderByInput',
    '_products_cost_OrderByInput',
    '_products_tva_OrderByInput',
    '_products_quantity_OrderByInput',
    '_products_producttypeid_OrderByInput',
    '_products_RelevanceOrderByInput',
]



# recursive products types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

productsRelationFilter = TypedDict(
    'productsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class productsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class productsInclude(TypedDict, total=False):
    """products relational arguments"""
    product_types: Union[bool, 'product_typesArgsFromproducts']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproducts']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproducts']


    

class allergiesIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproductsRecursive1']


class allergiesIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproductsRecursive2']


class allergiesIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproductsRecursive3']


class allergiesIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproductsRecursive4']


class allergiesIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class allergiesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyallergiesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    patients: Union[bool, 'patientsArgsFromproductsRecursive1']


class booster_shotsIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    patients: Union[bool, 'patientsArgsFromproductsRecursive2']


class booster_shotsIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    patients: Union[bool, 'patientsArgsFromproductsRecursive3']


class booster_shotsIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    patients: Union[bool, 'patientsArgsFromproductsRecursive4']


class booster_shotsIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class booster_shotsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManybooster_shotsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    earnings: Union[bool, 'FindManyearningsArgsFromproductsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproductsRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromproductsRecursive1']


class clientsIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    earnings: Union[bool, 'FindManyearningsArgsFromproductsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproductsRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromproductsRecursive2']


class clientsIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    earnings: Union[bool, 'FindManyearningsArgsFromproductsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproductsRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromproductsRecursive3']


class clientsIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    earnings: Union[bool, 'FindManyearningsArgsFromproductsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproductsRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromproductsRecursive4']


class clientsIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class clientsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyclientsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproductsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproductsRecursive1']


class earningsIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproductsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproductsRecursive2']


class earningsIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproductsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproductsRecursive3']


class earningsIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromproductsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproductsRecursive4']


class earningsIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class earningsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyearningsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive1']
    patients: Union[bool, 'patientsArgsFromproductsRecursive1']
    users: Union[bool, 'usersArgsFromproductsRecursive1']


class eventsIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive2']
    patients: Union[bool, 'patientsArgsFromproductsRecursive2']
    users: Union[bool, 'usersArgsFromproductsRecursive2']


class eventsIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive3']
    patients: Union[bool, 'patientsArgsFromproductsRecursive3']
    users: Union[bool, 'usersArgsFromproductsRecursive3']


class eventsIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive4']
    patients: Union[bool, 'patientsArgsFromproductsRecursive4']
    users: Union[bool, 'usersArgsFromproductsRecursive4']


class eventsIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class eventsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyeventsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproductsRecursive1']


class expensesIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproductsRecursive2']


class expensesIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproductsRecursive3']


class expensesIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproductsRecursive4']


class expensesIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class expensesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyexpensesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive1']
    earnings: Union[bool, 'earningsArgsFromproductsRecursive1']


class invoicesIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive2']
    earnings: Union[bool, 'earningsArgsFromproductsRecursive2']


class invoicesIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive3']
    earnings: Union[bool, 'earningsArgsFromproductsRecursive3']


class invoicesIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    clients: Union[bool, 'clientsArgsFromproductsRecursive4']
    earnings: Union[bool, 'earningsArgsFromproductsRecursive4']


class invoicesIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class invoicesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyinvoicesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    expense: Union[bool, 'expensesArgsFromproductsRecursive1']
    product: Union[bool, 'productsArgsFromproductsRecursive1']


class items_boughtIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    expense: Union[bool, 'expensesArgsFromproductsRecursive2']
    product: Union[bool, 'productsArgsFromproductsRecursive2']


class items_boughtIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    expense: Union[bool, 'expensesArgsFromproductsRecursive3']
    product: Union[bool, 'productsArgsFromproductsRecursive3']


class items_boughtIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    expense: Union[bool, 'expensesArgsFromproductsRecursive4']
    product: Union[bool, 'productsArgsFromproductsRecursive4']


class items_boughtIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class items_boughtArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyitems_boughtArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    earning: Union[bool, 'earningsArgsFromproductsRecursive1']
    product: Union[bool, 'productsArgsFromproductsRecursive1']


class items_soldIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    earning: Union[bool, 'earningsArgsFromproductsRecursive2']
    product: Union[bool, 'productsArgsFromproductsRecursive2']


class items_soldIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    earning: Union[bool, 'earningsArgsFromproductsRecursive3']
    product: Union[bool, 'productsArgsFromproductsRecursive3']


class items_soldIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    earning: Union[bool, 'earningsArgsFromproductsRecursive4']
    product: Union[bool, 'productsArgsFromproductsRecursive4']


class items_soldIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class items_soldArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyitems_soldArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromproductsRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive1']
    clients: Union[bool, 'clientsArgsFromproductsRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproductsRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromproductsRecursive1']


class patientsIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromproductsRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive2']
    clients: Union[bool, 'clientsArgsFromproductsRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproductsRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromproductsRecursive2']


class patientsIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromproductsRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive3']
    clients: Union[bool, 'clientsArgsFromproductsRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproductsRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromproductsRecursive3']


class patientsIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromproductsRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive4']
    clients: Union[bool, 'clientsArgsFromproductsRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromproductsRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromproductsRecursive4']


class patientsIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class patientsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManypatientsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    allergies: Union[bool, 'allergiesArgsFromproductsRecursive1']
    patients: Union[bool, 'patientsArgsFromproductsRecursive1']


class patients_allergiesIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    allergies: Union[bool, 'allergiesArgsFromproductsRecursive2']
    patients: Union[bool, 'patientsArgsFromproductsRecursive2']


class patients_allergiesIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    allergies: Union[bool, 'allergiesArgsFromproductsRecursive3']
    patients: Union[bool, 'patientsArgsFromproductsRecursive3']


class patients_allergiesIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    allergies: Union[bool, 'allergiesArgsFromproductsRecursive4']
    patients: Union[bool, 'patientsArgsFromproductsRecursive4']


class patients_allergiesIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class patients_allergiesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManypatients_allergiesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    patients: Union[bool, 'patientsArgsFromproductsRecursive1']


class prescriptionsIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    patients: Union[bool, 'patientsArgsFromproductsRecursive2']


class prescriptionsIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    patients: Union[bool, 'patientsArgsFromproductsRecursive3']


class prescriptionsIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    patients: Union[bool, 'patientsArgsFromproductsRecursive4']


class prescriptionsIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class prescriptionsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyprescriptionsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    products: Union[bool, 'FindManyproductsArgsFromproductsRecursive1']


class product_typesIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    products: Union[bool, 'FindManyproductsArgsFromproductsRecursive2']


class product_typesIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    products: Union[bool, 'FindManyproductsArgsFromproductsRecursive3']


class product_typesIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    products: Union[bool, 'FindManyproductsArgsFromproductsRecursive4']


class product_typesIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class product_typesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyproduct_typesArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    product_types: Union[bool, 'product_typesArgsFromproductsRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproductsRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproductsRecursive1']


class productsIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    product_types: Union[bool, 'product_typesArgsFromproductsRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproductsRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproductsRecursive2']


class productsIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    product_types: Union[bool, 'product_typesArgsFromproductsRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproductsRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproductsRecursive3']


class productsIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    product_types: Union[bool, 'product_typesArgsFromproductsRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromproductsRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromproductsRecursive4']


class productsIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class productsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyproductsArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromproducts(TypedDict, total=False):
    """Relational arguments for products"""
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive1']


class usersIncludeFromproductsRecursive1(TypedDict, total=False):
    """Relational arguments for products"""
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive2']


class usersIncludeFromproductsRecursive2(TypedDict, total=False):
    """Relational arguments for products"""
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive3']


class usersIncludeFromproductsRecursive3(TypedDict, total=False):
    """Relational arguments for products"""
    events: Union[bool, 'FindManyeventsArgsFromproductsRecursive4']


class usersIncludeFromproductsRecursive4(TypedDict, total=False):
    """Relational arguments for products"""

    

class usersArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    
    

class FindManyusersArgsFromproducts(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromproductsRecursive1(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromproductsRecursive2(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromproductsRecursive3(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromproductsRecursive4(TypedDict, total=False):
    """Arguments for products"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyproductsArgs = FindManyproductsArgsFromproducts
FindFirstproductsArgs = FindManyproductsArgsFromproducts


    

class productsWhereInput(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalFilter']
    cost: Union[decimal.Decimal, 'types.DecimalFilter']
    tva: Union[decimal.Decimal, 'types.DecimalFilter']
    quantity: Union[_int, 'types.IntFilter']
    producttypeid: Union[_int, 'types.IntFilter']
    product_types: 'product_typesRelationFilter'
    items_bought: 'items_boughtListRelationFilter'
    items_sold: 'items_soldListRelationFilter'

    # should be noted that AND and NOT should be Union['productsWhereInputRecursive1', List['productsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['productsWhereInputRecursive1']
    OR: List['productsWhereInputRecursive1']
    NOT: List['productsWhereInputRecursive1']


class productsWhereInputRecursive1(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalFilter']
    cost: Union[decimal.Decimal, 'types.DecimalFilter']
    tva: Union[decimal.Decimal, 'types.DecimalFilter']
    quantity: Union[_int, 'types.IntFilter']
    producttypeid: Union[_int, 'types.IntFilter']
    product_types: 'product_typesRelationFilter'
    items_bought: 'items_boughtListRelationFilter'
    items_sold: 'items_soldListRelationFilter'

    # should be noted that AND and NOT should be Union['productsWhereInputRecursive2', List['productsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['productsWhereInputRecursive2']
    OR: List['productsWhereInputRecursive2']
    NOT: List['productsWhereInputRecursive2']


class productsWhereInputRecursive2(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalFilter']
    cost: Union[decimal.Decimal, 'types.DecimalFilter']
    tva: Union[decimal.Decimal, 'types.DecimalFilter']
    quantity: Union[_int, 'types.IntFilter']
    producttypeid: Union[_int, 'types.IntFilter']
    product_types: 'product_typesRelationFilter'
    items_bought: 'items_boughtListRelationFilter'
    items_sold: 'items_soldListRelationFilter'

    # should be noted that AND and NOT should be Union['productsWhereInputRecursive3', List['productsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['productsWhereInputRecursive3']
    OR: List['productsWhereInputRecursive3']
    NOT: List['productsWhereInputRecursive3']


class productsWhereInputRecursive3(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalFilter']
    cost: Union[decimal.Decimal, 'types.DecimalFilter']
    tva: Union[decimal.Decimal, 'types.DecimalFilter']
    quantity: Union[_int, 'types.IntFilter']
    producttypeid: Union[_int, 'types.IntFilter']
    product_types: 'product_typesRelationFilter'
    items_bought: 'items_boughtListRelationFilter'
    items_sold: 'items_soldListRelationFilter'

    # should be noted that AND and NOT should be Union['productsWhereInputRecursive4', List['productsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['productsWhereInputRecursive4']
    OR: List['productsWhereInputRecursive4']
    NOT: List['productsWhereInputRecursive4']


class productsWhereInputRecursive4(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntFilter']
    name: Union[_str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalFilter']
    cost: Union[decimal.Decimal, 'types.DecimalFilter']
    tva: Union[decimal.Decimal, 'types.DecimalFilter']
    quantity: Union[_int, 'types.IntFilter']
    producttypeid: Union[_int, 'types.IntFilter']
    product_types: 'product_typesRelationFilter'
    items_bought: 'items_boughtListRelationFilter'
    items_sold: 'items_soldListRelationFilter'



# aggregate products types


    

class productsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    cost: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    tva: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['productsScalarWhereWithAggregatesInputRecursive1']
    OR: List['productsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['productsScalarWhereWithAggregatesInputRecursive1']


class productsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    cost: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    tva: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['productsScalarWhereWithAggregatesInputRecursive2']
    OR: List['productsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['productsScalarWhereWithAggregatesInputRecursive2']


class productsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    cost: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    tva: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['productsScalarWhereWithAggregatesInputRecursive3']
    OR: List['productsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['productsScalarWhereWithAggregatesInputRecursive3']


class productsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    cost: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    tva: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['productsScalarWhereWithAggregatesInputRecursive4']
    OR: List['productsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['productsScalarWhereWithAggregatesInputRecursive4']


class productsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """products arguments for searching"""
    productid: Union[_int, 'types.IntWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    sellingprice: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    cost: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    tva: Union[decimal.Decimal, 'types.DecimalWithAggregatesFilter']
    quantity: Union[_int, 'types.IntWithAggregatesFilter']
    producttypeid: Union[_int, 'types.IntWithAggregatesFilter']



class productsGroupByOutput(TypedDict, total=False):
    productid: _int
    name: _str
    description: _str
    sellingprice: decimal.Decimal
    cost: decimal.Decimal
    tva: decimal.Decimal
    quantity: _int
    producttypeid: _int
    _sum: 'productsSumAggregateOutput'
    _avg: 'productsAvgAggregateOutput'
    _min: 'productsMinAggregateOutput'
    _max: 'productsMaxAggregateOutput'
    _count: 'productsCountAggregateOutput'


class productsAvgAggregateOutput(TypedDict, total=False):
    """products output for aggregating averages"""
    productid: float
    quantity: float
    producttypeid: float


class productsSumAggregateOutput(TypedDict, total=False):
    """products output for aggregating sums"""
    productid: _int
    quantity: _int
    producttypeid: _int


class productsScalarAggregateOutput(TypedDict, total=False):
    """products output including scalar fields"""
    productid: _int
    name: _str
    description: _str
    sellingprice: decimal.Decimal
    cost: decimal.Decimal
    tva: decimal.Decimal
    quantity: _int
    producttypeid: _int


productsMinAggregateOutput = productsScalarAggregateOutput
productsMaxAggregateOutput = productsScalarAggregateOutput


class productsMaxAggregateInput(TypedDict, total=False):
    """products input for aggregating by max"""
    productid: bool
    name: bool
    description: bool
    sellingprice: bool
    cost: bool
    tva: bool
    quantity: bool
    producttypeid: bool


class productsMinAggregateInput(TypedDict, total=False):
    """products input for aggregating by min"""
    productid: bool
    name: bool
    description: bool
    sellingprice: bool
    cost: bool
    tva: bool
    quantity: bool
    producttypeid: bool


class productsNumberAggregateInput(TypedDict, total=False):
    """products input for aggregating numbers"""
    productid: bool
    quantity: bool
    producttypeid: bool


productsAvgAggregateInput = productsNumberAggregateInput
productsSumAggregateInput = productsNumberAggregateInput


productsCountAggregateInput = TypedDict(
    'productsCountAggregateInput',
    {
        'productid': bool,
        'name': bool,
        'description': bool,
        'sellingprice': bool,
        'cost': bool,
        'tva': bool,
        'quantity': bool,
        'producttypeid': bool,
        '_all': bool,
    },
    total=False,
)

productsCountAggregateOutput = TypedDict(
    'productsCountAggregateOutput',
    {
        'productid': int,
        'name': int,
        'description': int,
        'sellingprice': int,
        'cost': int,
        'tva': int,
        'quantity': int,
        'producttypeid': int,
        '_all': int,
    },
    total=False,
)


productsKeys = Literal[
    'productid',
    'name',
    'description',
    'sellingprice',
    'cost',
    'tva',
    'quantity',
    'producttypeid',
    'product_types',
    'items_bought',
    'items_sold',
]
productsScalarFieldKeys = Literal[
    'productid',
    'name',
    'description',
    'sellingprice',
    'cost',
    'tva',
    'quantity',
    'producttypeid',
]
productsScalarFieldKeysT = TypeVar('productsScalarFieldKeysT', bound=productsScalarFieldKeys)

productsRelationalFieldKeys = Literal[
        'product_types',
        'items_bought',
        'items_sold',
    ]

# users types

class usersOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the users create method"""
    userid: _int
    events: 'eventsCreateManyNestedWithoutRelationsInput'


class usersCreateInput(usersOptionalCreateInput):
    """Required arguments to the users create method"""
    username: _str
    password: _str
    role: 'enums.roles'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class usersOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the users create method, without relations"""
    userid: _int


class usersCreateWithoutRelationsInput(usersOptionalCreateWithoutRelationsInput):
    """Required arguments to the users create method, without relations"""
    username: _str
    password: _str
    role: 'enums.roles'

class usersConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'usersCreateWithoutRelationsInput'
    where: 'usersWhereUniqueInput'

class usersCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'usersCreateWithoutRelationsInput'
    connect: 'usersWhereUniqueInput'
    connect_or_create: 'usersConnectOrCreateWithoutRelationsInput'


class usersCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['usersCreateWithoutRelationsInput', List['usersCreateWithoutRelationsInput']]
    connect: Union['usersWhereUniqueInput', List['usersWhereUniqueInput']]
    connect_or_create: Union['usersConnectOrCreateWithoutRelationsInput', List['usersConnectOrCreateWithoutRelationsInput']]

_usersWhereUnique_userid_Input = TypedDict(
    '_usersWhereUnique_userid_Input',
    {
        'userid': '_int',
    },
    total=True
)

usersWhereUniqueInput = _usersWhereUnique_userid_Input


class usersUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    userid: Union[AtomicIntInput, _int]
    username: _str
    password: _str
    role: 'enums.roles'
    events: 'eventsUpdateManyWithoutRelationsInput'


class usersUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    userid: Union[AtomicIntInput, _int]
    username: _str
    password: _str
    role: 'enums.roles'


class usersUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['usersCreateWithoutRelationsInput']
    connect: List['usersWhereUniqueInput']
    connect_or_create: List['usersConnectOrCreateWithoutRelationsInput']
    set: List['usersWhereUniqueInput']
    disconnect: List['usersWhereUniqueInput']
    delete: List['usersWhereUniqueInput']

    # TODO
    # update: List['usersUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['usersUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['usersScalarWhereInput']
    # upsert: List['usersUpserteWithWhereUniqueWithoutRelationsInput']


class usersUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'usersCreateWithoutRelationsInput'
    connect: 'usersWhereUniqueInput'
    connect_or_create: 'usersConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'usersUpdateInput'
    # upsert: 'usersUpsertWithoutRelationsInput'


class usersUpsertInput(TypedDict):
    create: 'usersCreateInput'
    update: 'usersUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_users_userid_OrderByInput = TypedDict(
    '_users_userid_OrderByInput',
    {
        'userid': 'SortOrder',
    },
    total=True
)

_users_username_OrderByInput = TypedDict(
    '_users_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_users_password_OrderByInput = TypedDict(
    '_users_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_users_role_OrderByInput = TypedDict(
    '_users_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_users_RelevanceInner = TypedDict(
    '_users_RelevanceInner',
    {
        'fields': 'List[usersScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_users_RelevanceOrderByInput = TypedDict(
    '_users_RelevanceOrderByInput',
    {
        '_relevance': '_users_RelevanceInner',
    },
    total=True
)

usersOrderByInput = Union[
    '_users_userid_OrderByInput',
    '_users_username_OrderByInput',
    '_users_password_OrderByInput',
    '_users_role_OrderByInput',
    '_users_RelevanceOrderByInput',
]



# recursive users types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

usersRelationFilter = TypedDict(
    'usersRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class usersListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class usersInclude(TypedDict, total=False):
    """users relational arguments"""
    events: Union[bool, 'FindManyeventsArgsFromusers']


    

class allergiesIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromusersRecursive1']


class allergiesIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromusersRecursive2']


class allergiesIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromusersRecursive3']


class allergiesIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromusersRecursive4']


class allergiesIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class allergiesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'allergiesIncludeFromallergiesRecursive1'


class allergiesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'allergiesIncludeFromallergiesRecursive2'


class allergiesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'allergiesIncludeFromallergiesRecursive3'


class allergiesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'allergiesIncludeFromallergiesRecursive4'


class allergiesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyallergiesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive1'


class FindManyallergiesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive2'


class FindManyallergiesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive3'


class FindManyallergiesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    include: 'allergiesIncludeFromallergiesRecursive4'


class FindManyallergiesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['allergiesOrderByInput', List['allergiesOrderByInput']]
    where: 'allergiesWhereInput'
    cursor: 'allergiesWhereUniqueInput'
    distinct: List['allergiesScalarFieldKeys']
    
    

class booster_shotsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    patients: Union[bool, 'patientsArgsFromusersRecursive1']


class booster_shotsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    patients: Union[bool, 'patientsArgsFromusersRecursive2']


class booster_shotsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    patients: Union[bool, 'patientsArgsFromusersRecursive3']


class booster_shotsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    patients: Union[bool, 'patientsArgsFromusersRecursive4']


class booster_shotsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class booster_shotsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class booster_shotsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class booster_shotsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class booster_shotsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class booster_shotsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManybooster_shotsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive1'


class FindManybooster_shotsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive2'


class FindManybooster_shotsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive3'


class FindManybooster_shotsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    include: 'booster_shotsIncludeFrombooster_shotsRecursive4'


class FindManybooster_shotsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['booster_shotsOrderByInput', List['booster_shotsOrderByInput']]
    where: 'booster_shotsWhereInput'
    cursor: 'booster_shotsWhereUniqueInput'
    distinct: List['booster_shotsScalarFieldKeys']
    
    

class clientsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    earnings: Union[bool, 'FindManyearningsArgsFromusersRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromusersRecursive1']
    patients: Union[bool, 'FindManypatientsArgsFromusersRecursive1']


class clientsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    earnings: Union[bool, 'FindManyearningsArgsFromusersRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromusersRecursive2']
    patients: Union[bool, 'FindManypatientsArgsFromusersRecursive2']


class clientsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    earnings: Union[bool, 'FindManyearningsArgsFromusersRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromusersRecursive3']
    patients: Union[bool, 'FindManypatientsArgsFromusersRecursive3']


class clientsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    earnings: Union[bool, 'FindManyearningsArgsFromusersRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromusersRecursive4']
    patients: Union[bool, 'FindManypatientsArgsFromusersRecursive4']


class clientsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class clientsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'clientsIncludeFromclientsRecursive1'


class clientsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'clientsIncludeFromclientsRecursive2'


class clientsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'clientsIncludeFromclientsRecursive3'


class clientsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'clientsIncludeFromclientsRecursive4'


class clientsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyclientsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive1'


class FindManyclientsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive2'


class FindManyclientsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive3'


class FindManyclientsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    include: 'clientsIncludeFromclientsRecursive4'


class FindManyclientsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['clientsOrderByInput', List['clientsOrderByInput']]
    where: 'clientsWhereInput'
    cursor: 'clientsWhereUniqueInput'
    distinct: List['clientsScalarFieldKeys']
    
    

class earningsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive1']
    invoices: Union[bool, 'FindManyinvoicesArgsFromusersRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromusersRecursive1']


class earningsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive2']
    invoices: Union[bool, 'FindManyinvoicesArgsFromusersRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromusersRecursive2']


class earningsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive3']
    invoices: Union[bool, 'FindManyinvoicesArgsFromusersRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromusersRecursive3']


class earningsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive4']
    invoices: Union[bool, 'FindManyinvoicesArgsFromusersRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromusersRecursive4']


class earningsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class earningsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'earningsIncludeFromearningsRecursive1'


class earningsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'earningsIncludeFromearningsRecursive2'


class earningsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'earningsIncludeFromearningsRecursive3'


class earningsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'earningsIncludeFromearningsRecursive4'


class earningsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyearningsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive1'


class FindManyearningsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive2'


class FindManyearningsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive3'


class FindManyearningsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    include: 'earningsIncludeFromearningsRecursive4'


class FindManyearningsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['earningsOrderByInput', List['earningsOrderByInput']]
    where: 'earningsWhereInput'
    cursor: 'earningsWhereUniqueInput'
    distinct: List['earningsScalarFieldKeys']
    
    

class eventsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive1']
    patients: Union[bool, 'patientsArgsFromusersRecursive1']
    users: Union[bool, 'usersArgsFromusersRecursive1']


class eventsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive2']
    patients: Union[bool, 'patientsArgsFromusersRecursive2']
    users: Union[bool, 'usersArgsFromusersRecursive2']


class eventsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive3']
    patients: Union[bool, 'patientsArgsFromusersRecursive3']
    users: Union[bool, 'usersArgsFromusersRecursive3']


class eventsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive4']
    patients: Union[bool, 'patientsArgsFromusersRecursive4']
    users: Union[bool, 'usersArgsFromusersRecursive4']


class eventsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class eventsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'eventsIncludeFromeventsRecursive1'


class eventsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'eventsIncludeFromeventsRecursive2'


class eventsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'eventsIncludeFromeventsRecursive3'


class eventsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'eventsIncludeFromeventsRecursive4'


class eventsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyeventsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive1'


class FindManyeventsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive2'


class FindManyeventsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive3'


class FindManyeventsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    include: 'eventsIncludeFromeventsRecursive4'


class FindManyeventsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['eventsOrderByInput', List['eventsOrderByInput']]
    where: 'eventsWhereInput'
    cursor: 'eventsWhereUniqueInput'
    distinct: List['eventsScalarFieldKeys']
    
    

class expensesIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromusersRecursive1']


class expensesIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromusersRecursive2']


class expensesIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromusersRecursive3']


class expensesIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromusersRecursive4']


class expensesIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class expensesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'expensesIncludeFromexpensesRecursive1'


class expensesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'expensesIncludeFromexpensesRecursive2'


class expensesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'expensesIncludeFromexpensesRecursive3'


class expensesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'expensesIncludeFromexpensesRecursive4'


class expensesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyexpensesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive1'


class FindManyexpensesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive2'


class FindManyexpensesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive3'


class FindManyexpensesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    include: 'expensesIncludeFromexpensesRecursive4'


class FindManyexpensesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['expensesOrderByInput', List['expensesOrderByInput']]
    where: 'expensesWhereInput'
    cursor: 'expensesWhereUniqueInput'
    distinct: List['expensesScalarFieldKeys']
    
    

class invoicesIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive1']
    earnings: Union[bool, 'earningsArgsFromusersRecursive1']


class invoicesIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive2']
    earnings: Union[bool, 'earningsArgsFromusersRecursive2']


class invoicesIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive3']
    earnings: Union[bool, 'earningsArgsFromusersRecursive3']


class invoicesIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    clients: Union[bool, 'clientsArgsFromusersRecursive4']
    earnings: Union[bool, 'earningsArgsFromusersRecursive4']


class invoicesIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class invoicesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'invoicesIncludeFrominvoicesRecursive1'


class invoicesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'invoicesIncludeFrominvoicesRecursive2'


class invoicesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'invoicesIncludeFrominvoicesRecursive3'


class invoicesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'invoicesIncludeFrominvoicesRecursive4'


class invoicesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyinvoicesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive1'


class FindManyinvoicesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive2'


class FindManyinvoicesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive3'


class FindManyinvoicesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    include: 'invoicesIncludeFrominvoicesRecursive4'


class FindManyinvoicesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['invoicesOrderByInput', List['invoicesOrderByInput']]
    where: 'invoicesWhereInput'
    cursor: 'invoicesWhereUniqueInput'
    distinct: List['invoicesScalarFieldKeys']
    
    

class items_boughtIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    expense: Union[bool, 'expensesArgsFromusersRecursive1']
    product: Union[bool, 'productsArgsFromusersRecursive1']


class items_boughtIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    expense: Union[bool, 'expensesArgsFromusersRecursive2']
    product: Union[bool, 'productsArgsFromusersRecursive2']


class items_boughtIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    expense: Union[bool, 'expensesArgsFromusersRecursive3']
    product: Union[bool, 'productsArgsFromusersRecursive3']


class items_boughtIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    expense: Union[bool, 'expensesArgsFromusersRecursive4']
    product: Union[bool, 'productsArgsFromusersRecursive4']


class items_boughtIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class items_boughtArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class items_boughtArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class items_boughtArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class items_boughtArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class items_boughtArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyitems_boughtArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive1'


class FindManyitems_boughtArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive2'


class FindManyitems_boughtArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive3'


class FindManyitems_boughtArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    include: 'items_boughtIncludeFromitems_boughtRecursive4'


class FindManyitems_boughtArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_boughtOrderByInput', List['items_boughtOrderByInput']]
    where: 'items_boughtWhereInput'
    cursor: 'items_boughtWhereUniqueInput'
    distinct: List['items_boughtScalarFieldKeys']
    
    

class items_soldIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    earning: Union[bool, 'earningsArgsFromusersRecursive1']
    product: Union[bool, 'productsArgsFromusersRecursive1']


class items_soldIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    earning: Union[bool, 'earningsArgsFromusersRecursive2']
    product: Union[bool, 'productsArgsFromusersRecursive2']


class items_soldIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    earning: Union[bool, 'earningsArgsFromusersRecursive3']
    product: Union[bool, 'productsArgsFromusersRecursive3']


class items_soldIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    earning: Union[bool, 'earningsArgsFromusersRecursive4']
    product: Union[bool, 'productsArgsFromusersRecursive4']


class items_soldIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class items_soldArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'items_soldIncludeFromitems_soldRecursive1'


class items_soldArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'items_soldIncludeFromitems_soldRecursive2'


class items_soldArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'items_soldIncludeFromitems_soldRecursive3'


class items_soldArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'items_soldIncludeFromitems_soldRecursive4'


class items_soldArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyitems_soldArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive1'


class FindManyitems_soldArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive2'


class FindManyitems_soldArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive3'


class FindManyitems_soldArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    include: 'items_soldIncludeFromitems_soldRecursive4'


class FindManyitems_soldArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['items_soldOrderByInput', List['items_soldOrderByInput']]
    where: 'items_soldWhereInput'
    cursor: 'items_soldWhereUniqueInput'
    distinct: List['items_soldScalarFieldKeys']
    
    

class patientsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromusersRecursive1']
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive1']
    clients: Union[bool, 'clientsArgsFromusersRecursive1']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromusersRecursive1']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromusersRecursive1']


class patientsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromusersRecursive2']
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive2']
    clients: Union[bool, 'clientsArgsFromusersRecursive2']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromusersRecursive2']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromusersRecursive2']


class patientsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromusersRecursive3']
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive3']
    clients: Union[bool, 'clientsArgsFromusersRecursive3']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromusersRecursive3']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromusersRecursive3']


class patientsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    booster_shots: Union[bool, 'FindManybooster_shotsArgsFromusersRecursive4']
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive4']
    clients: Union[bool, 'clientsArgsFromusersRecursive4']
    patients_allergies: Union[bool, 'FindManypatients_allergiesArgsFromusersRecursive4']
    prescriptions: Union[bool, 'FindManyprescriptionsArgsFromusersRecursive4']


class patientsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class patientsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'patientsIncludeFrompatientsRecursive1'


class patientsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'patientsIncludeFrompatientsRecursive2'


class patientsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'patientsIncludeFrompatientsRecursive3'


class patientsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'patientsIncludeFrompatientsRecursive4'


class patientsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManypatientsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive1'


class FindManypatientsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive2'


class FindManypatientsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive3'


class FindManypatientsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    include: 'patientsIncludeFrompatientsRecursive4'


class FindManypatientsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patientsOrderByInput', List['patientsOrderByInput']]
    where: 'patientsWhereInput'
    cursor: 'patientsWhereUniqueInput'
    distinct: List['patientsScalarFieldKeys']
    
    

class patients_allergiesIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    allergies: Union[bool, 'allergiesArgsFromusersRecursive1']
    patients: Union[bool, 'patientsArgsFromusersRecursive1']


class patients_allergiesIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    allergies: Union[bool, 'allergiesArgsFromusersRecursive2']
    patients: Union[bool, 'patientsArgsFromusersRecursive2']


class patients_allergiesIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    allergies: Union[bool, 'allergiesArgsFromusersRecursive3']
    patients: Union[bool, 'patientsArgsFromusersRecursive3']


class patients_allergiesIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    allergies: Union[bool, 'allergiesArgsFromusersRecursive4']
    patients: Union[bool, 'patientsArgsFromusersRecursive4']


class patients_allergiesIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class patients_allergiesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class patients_allergiesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class patients_allergiesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class patients_allergiesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class patients_allergiesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManypatients_allergiesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive1'


class FindManypatients_allergiesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive2'


class FindManypatients_allergiesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive3'


class FindManypatients_allergiesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    include: 'patients_allergiesIncludeFrompatients_allergiesRecursive4'


class FindManypatients_allergiesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['patients_allergiesOrderByInput', List['patients_allergiesOrderByInput']]
    where: 'patients_allergiesWhereInput'
    cursor: 'patients_allergiesWhereUniqueInput'
    distinct: List['patients_allergiesScalarFieldKeys']
    
    

class prescriptionsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    patients: Union[bool, 'patientsArgsFromusersRecursive1']


class prescriptionsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    patients: Union[bool, 'patientsArgsFromusersRecursive2']


class prescriptionsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    patients: Union[bool, 'patientsArgsFromusersRecursive3']


class prescriptionsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    patients: Union[bool, 'patientsArgsFromusersRecursive4']


class prescriptionsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class prescriptionsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class prescriptionsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class prescriptionsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class prescriptionsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class prescriptionsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyprescriptionsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive1'


class FindManyprescriptionsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive2'


class FindManyprescriptionsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive3'


class FindManyprescriptionsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    include: 'prescriptionsIncludeFromprescriptionsRecursive4'


class FindManyprescriptionsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['prescriptionsOrderByInput', List['prescriptionsOrderByInput']]
    where: 'prescriptionsWhereInput'
    cursor: 'prescriptionsWhereUniqueInput'
    distinct: List['prescriptionsScalarFieldKeys']
    
    

class product_typesIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    products: Union[bool, 'FindManyproductsArgsFromusersRecursive1']


class product_typesIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    products: Union[bool, 'FindManyproductsArgsFromusersRecursive2']


class product_typesIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    products: Union[bool, 'FindManyproductsArgsFromusersRecursive3']


class product_typesIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    products: Union[bool, 'FindManyproductsArgsFromusersRecursive4']


class product_typesIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class product_typesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class product_typesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class product_typesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class product_typesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class product_typesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyproduct_typesArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive1'


class FindManyproduct_typesArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive2'


class FindManyproduct_typesArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive3'


class FindManyproduct_typesArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    include: 'product_typesIncludeFromproduct_typesRecursive4'


class FindManyproduct_typesArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['product_typesOrderByInput', List['product_typesOrderByInput']]
    where: 'product_typesWhereInput'
    cursor: 'product_typesWhereUniqueInput'
    distinct: List['product_typesScalarFieldKeys']
    
    

class productsIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    product_types: Union[bool, 'product_typesArgsFromusersRecursive1']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromusersRecursive1']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromusersRecursive1']


class productsIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    product_types: Union[bool, 'product_typesArgsFromusersRecursive2']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromusersRecursive2']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromusersRecursive2']


class productsIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    product_types: Union[bool, 'product_typesArgsFromusersRecursive3']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromusersRecursive3']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromusersRecursive3']


class productsIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    product_types: Union[bool, 'product_typesArgsFromusersRecursive4']
    items_bought: Union[bool, 'FindManyitems_boughtArgsFromusersRecursive4']
    items_sold: Union[bool, 'FindManyitems_soldArgsFromusersRecursive4']


class productsIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class productsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'productsIncludeFromproductsRecursive1'


class productsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'productsIncludeFromproductsRecursive2'


class productsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'productsIncludeFromproductsRecursive3'


class productsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'productsIncludeFromproductsRecursive4'


class productsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyproductsArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive1'


class FindManyproductsArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive2'


class FindManyproductsArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive3'


class FindManyproductsArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    include: 'productsIncludeFromproductsRecursive4'


class FindManyproductsArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['productsOrderByInput', List['productsOrderByInput']]
    where: 'productsWhereInput'
    cursor: 'productsWhereUniqueInput'
    distinct: List['productsScalarFieldKeys']
    
    

class usersIncludeFromusers(TypedDict, total=False):
    """Relational arguments for users"""
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive1']


class usersIncludeFromusersRecursive1(TypedDict, total=False):
    """Relational arguments for users"""
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive2']


class usersIncludeFromusersRecursive2(TypedDict, total=False):
    """Relational arguments for users"""
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive3']


class usersIncludeFromusersRecursive3(TypedDict, total=False):
    """Relational arguments for users"""
    events: Union[bool, 'FindManyeventsArgsFromusersRecursive4']


class usersIncludeFromusersRecursive4(TypedDict, total=False):
    """Relational arguments for users"""

    

class usersArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive1'


class usersArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive2'


class usersArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive3'


class usersArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    include: 'usersIncludeFromusersRecursive4'


class usersArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    
    

class FindManyusersArgsFromusers(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive1'


class FindManyusersArgsFromusersRecursive1(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive2'


class FindManyusersArgsFromusersRecursive2(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive3'


class FindManyusersArgsFromusersRecursive3(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    include: 'usersIncludeFromusersRecursive4'


class FindManyusersArgsFromusersRecursive4(TypedDict, total=False):
    """Arguments for users"""
    take: int
    skip: int
    order_by: Union['usersOrderByInput', List['usersOrderByInput']]
    where: 'usersWhereInput'
    cursor: 'usersWhereUniqueInput'
    distinct: List['usersScalarFieldKeys']
    


FindManyusersArgs = FindManyusersArgsFromusers
FindFirstusersArgs = FindManyusersArgsFromusers


    

class usersWhereInput(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.roles'
    events: 'eventsListRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive1', List['usersWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive1']
    OR: List['usersWhereInputRecursive1']
    NOT: List['usersWhereInputRecursive1']


class usersWhereInputRecursive1(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.roles'
    events: 'eventsListRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive2', List['usersWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive2']
    OR: List['usersWhereInputRecursive2']
    NOT: List['usersWhereInputRecursive2']


class usersWhereInputRecursive2(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.roles'
    events: 'eventsListRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive3', List['usersWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive3']
    OR: List['usersWhereInputRecursive3']
    NOT: List['usersWhereInputRecursive3']


class usersWhereInputRecursive3(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.roles'
    events: 'eventsListRelationFilter'

    # should be noted that AND and NOT should be Union['usersWhereInputRecursive4', List['usersWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['usersWhereInputRecursive4']
    OR: List['usersWhereInputRecursive4']
    NOT: List['usersWhereInputRecursive4']


class usersWhereInputRecursive4(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    role: 'enums.roles'
    events: 'eventsListRelationFilter'



# aggregate users types


    

class usersScalarWhereWithAggregatesInput(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.roles'

    AND: List['usersScalarWhereWithAggregatesInputRecursive1']
    OR: List['usersScalarWhereWithAggregatesInputRecursive1']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive1']


class usersScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.roles'

    AND: List['usersScalarWhereWithAggregatesInputRecursive2']
    OR: List['usersScalarWhereWithAggregatesInputRecursive2']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive2']


class usersScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.roles'

    AND: List['usersScalarWhereWithAggregatesInputRecursive3']
    OR: List['usersScalarWhereWithAggregatesInputRecursive3']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive3']


class usersScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.roles'

    AND: List['usersScalarWhereWithAggregatesInputRecursive4']
    OR: List['usersScalarWhereWithAggregatesInputRecursive4']
    NOT: List['usersScalarWhereWithAggregatesInputRecursive4']


class usersScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """users arguments for searching"""
    userid: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.roles'



class usersGroupByOutput(TypedDict, total=False):
    userid: _int
    username: _str
    password: _str
    role: 'enums.roles'
    _sum: 'usersSumAggregateOutput'
    _avg: 'usersAvgAggregateOutput'
    _min: 'usersMinAggregateOutput'
    _max: 'usersMaxAggregateOutput'
    _count: 'usersCountAggregateOutput'


class usersAvgAggregateOutput(TypedDict, total=False):
    """users output for aggregating averages"""
    userid: float


class usersSumAggregateOutput(TypedDict, total=False):
    """users output for aggregating sums"""
    userid: _int


class usersScalarAggregateOutput(TypedDict, total=False):
    """users output including scalar fields"""
    userid: _int
    username: _str
    password: _str
    role: 'enums.roles'


usersMinAggregateOutput = usersScalarAggregateOutput
usersMaxAggregateOutput = usersScalarAggregateOutput


class usersMaxAggregateInput(TypedDict, total=False):
    """users input for aggregating by max"""
    userid: bool
    username: bool
    password: bool
    role: bool


class usersMinAggregateInput(TypedDict, total=False):
    """users input for aggregating by min"""
    userid: bool
    username: bool
    password: bool
    role: bool


class usersNumberAggregateInput(TypedDict, total=False):
    """users input for aggregating numbers"""
    userid: bool


usersAvgAggregateInput = usersNumberAggregateInput
usersSumAggregateInput = usersNumberAggregateInput


usersCountAggregateInput = TypedDict(
    'usersCountAggregateInput',
    {
        'userid': bool,
        'username': bool,
        'password': bool,
        'role': bool,
        '_all': bool,
    },
    total=False,
)

usersCountAggregateOutput = TypedDict(
    'usersCountAggregateOutput',
    {
        'userid': int,
        'username': int,
        'password': int,
        'role': int,
        '_all': int,
    },
    total=False,
)


usersKeys = Literal[
    'userid',
    'username',
    'password',
    'role',
    'events',
]
usersScalarFieldKeys = Literal[
    'userid',
    'username',
    'password',
    'role',
]
usersScalarFieldKeysT = TypeVar('usersScalarFieldKeysT', bound=usersScalarFieldKeys)

usersRelationalFieldKeys = Literal[
        'events',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields