generator client {
  provider                    = "prisma-client-py"
  recursive_type_depth        = "5"
  enable_experimental_decimal = "true"
  interface                   = "asyncio"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model allergies {
  allergyid          Int                  @id @default(autoincrement())
  name               String               @db.VarChar(50)
  description        String?              @db.VarChar(255)
  patients_allergies patients_allergies[]
}

model booster_shots {
  boostershotid Int       @id @default(autoincrement())
  type          String    @db.VarChar(50)
  initialdate   DateTime  @db.Date
  executiondate DateTime? @db.Date
  status        statuts
  patientid     Int
  patients      patients  @relation(fields: [patientid], references: [patientid], onDelete: NoAction, onUpdate: NoAction)
}

model clients {
  clientid    Int        @id @default(autoincrement())
  lastname    String     @db.VarChar(50)
  firstname   String     @db.VarChar(50)
  gender      genders
  phonenumber String     @db.VarChar(18)
  email       String?    @db.VarChar(255)
  address     String?    @db.VarChar(255)
  zipcode     String?    @db.VarChar(10)
  city        String?    @db.VarChar(100)
  earnings    earnings[]
  events      events[]
  invoices    invoices[]
  patients    patients[]
}

model earnings {
  earningid     Int        @id @default(autoincrement())
  amount        Decimal    @db.Decimal(6, 2)
  description   String?    @db.VarChar(255)
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  paymentstatus payment?
  clientid      Int
  clients       clients    @relation(fields: [clientid], references: [clientid], onDelete: NoAction, onUpdate: NoAction)
  invoices      invoices[]
}

model events {
  eventid     Int        @id @default(autoincrement())
  title       String     @db.VarChar(50)
  description String?    @db.VarChar(2048)
  type        event_type
  eventdate   DateTime   @db.Date
  starthour   DateTime   @db.Time(6)
  endhour     DateTime   @db.Time(6)
  userid      Int
  patientid   Int?
  clientid    Int?
  clients     clients?   @relation(fields: [clientid], references: [clientid], onDelete: NoAction, onUpdate: NoAction)
  patients    patients?  @relation(fields: [patientid], references: [patientid], onDelete: NoAction, onUpdate: NoAction)
  users       users      @relation(fields: [userid], references: [userid], onDelete: NoAction, onUpdate: NoAction)
}

model expenses {
  expenseid   Int      @id @default(autoincrement())
  amount      Decimal  @db.Decimal(6, 2)
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
}

model invoices {
  invoiceid   Int      @id @default(autoincrement())
  amount      Decimal  @db.Decimal(6, 2)
  invoicelink String   @db.VarChar(512)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  clientid    Int
  earningid   Int
  clients     clients  @relation(fields: [clientid], references: [clientid], onDelete: NoAction, onUpdate: NoAction)
  earnings    earnings @relation(fields: [earningid], references: [earningid], onDelete: NoAction, onUpdate: NoAction)
}

model items_bought {
  expenseid Int
  productid Int
  quantity  Int

  @@id([expenseid, productid])
}

model items_sold {
  earningid Int
  productid Int
  quantity  Int

  @@id([earningid, productid])
}

model patients {
  patientid          Int                  @id @default(autoincrement())
  name               String               @db.VarChar(50)
  gender             genders
  type               String               @db.VarChar(50)
  species            String?              @db.VarChar(50)
  birthdate          DateTime?            @db.Date
  numberid           Int?
  color              String?              @db.VarChar(50)
  clientid           Int
  booster_shots      booster_shots[]
  events             events[]
  clients            clients              @relation(fields: [clientid], references: [clientid], onDelete: NoAction, onUpdate: NoAction)
  patients_allergies patients_allergies[]
  prescriptions      prescriptions[]
}

model patients_allergies {
  patientid Int
  allergyid Int
  status    statuses
  allergies allergies @relation(fields: [allergyid], references: [allergyid], onDelete: NoAction, onUpdate: NoAction)
  patients  patients  @relation(fields: [patientid], references: [patientid], onDelete: NoAction, onUpdate: NoAction)

  @@id([patientid, allergyid])
}

model prescriptions {
  prescriptionid   Int      @id @default(autoincrement())
  motive           String?  @db.VarChar(255)
  prescriptionlink String   @db.VarChar(512)
  created_at       DateTime @default(now()) @db.Timestamp(6)
  patientid        Int
  patients         patients @relation(fields: [patientid], references: [patientid], onDelete: NoAction, onUpdate: NoAction)
}

model product_types {
  producttypeid Int        @id @default(autoincrement())
  name          String     @db.VarChar(50)
  products      products[]
}

model products {
  productid     Int           @id @default(autoincrement())
  name          String        @db.VarChar(50)
  description   String?       @db.VarChar(512)
  sellingprice  Decimal       @db.Decimal(6, 2)
  cost          Decimal       @db.Decimal(6, 2)
  tva           Decimal       @db.Decimal(6, 2)
  quantity      Int
  producttypeid Int
  product_types product_types @relation(fields: [producttypeid], references: [producttypeid], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  userid   Int      @id @default(autoincrement())
  username String   @db.VarChar(70)
  password String   @db.VarChar(255)
  role     roles
  events   events[]
}

enum event_type {
  RENDEZ_VOUS @map("RENDEZ-VOUS")
  OPERATION
  AUTRE
}

enum genders {
  M
  F
  N_A @map("N/A")
}

enum payment {
  PAYER
  A_PAYER              @map("A PAYER")
  EN_COURS_DE_PAIEMENT @map("EN COURS DE PAIEMENT")
  NON_PAYER            @map("NON PAYER")
}

enum roles {
  DIRECTEUR
  VETERINAIRE
  ASSISTANT
}

enum statuses {
  ACTIF
  INACTIF
}

enum statuts {
  A_FAIRE  @map("A FAIRE")
  REPORTER
  ANNULER
  TERMINER
}
